cseg01:C0000000	;
cseg01:C0000000	; +-------------------------------------------------------------------------+
cseg01:C0000000	; |   This file	has been generated by The Interactive Disassembler (IDA)    |
cseg01:C0000000	; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
cseg01:C0000000	; |			 License info: 48-B611-7234-BB			    |
cseg01:C0000000	; |		Doskey Lee, Kingsoft Internet Security Software		    |
cseg01:C0000000	; +-------------------------------------------------------------------------+
cseg01:C0000000	;
cseg01:C0000000	; Input	MD5   :	7293BC05582EF6DC3A231E597D3A70BE
cseg01:C0000000	; Input	CRC32 :	1D73AFE9
cseg01:C0000000
cseg01:C0000000	; File Name   :	D:\Projekty\vssync\vmdisp9x\vmwsmini.vxd
cseg01:C0000000	; Format      :	Linear Executable (LE)
cseg01:C0000000	; Target operating system	  MS Windows 386
cseg01:C0000000	; Module Version		  00000000h (	  0. )
cseg01:C0000000	; Program Entry	Point	(CS:EIP)  0:00000000h
cseg01:C0000000	; Initial Stack	Pointer	(SS:ESP)  0:00000000h
cseg01:C0000000	; DS Object			  2
cseg01:C0000000	; Heap Size			  00000000h (	  0. )
cseg01:C0000000	; Program Flags	(00038000h): Prot. Virt. Dev. Driver
cseg01:C0000000	; ----------------------------------------------------------------------------
cseg01:C0000000	; Object Number	    : 1.
cseg01:C0000000	; Virtual Size	    : 00002BC1h
cseg01:C0000000	; Number of Pages   : 3	(present in the	file)
cseg01:C0000000	; Attributes (00002045): Readable Executable PreloadPages Big
cseg01:C0000000
cseg01:C0000000			.686p
cseg01:C0000000			.mmx
cseg01:C0000000			.model flat
cseg01:C0000000
cseg01:C0000000	; ===========================================================================
cseg01:C0000000
cseg01:C0000000	; Segment type:	Pure code
cseg01:C0000000	cseg01		segment	para public 'CODE' use32
cseg01:C0000000			assume cs:cseg01
cseg01:C0000000			;org 0C0000000h
cseg01:C0000000			assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
cseg01:C0000000
cseg01:C0000000	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000000
cseg01:C0000000
cseg01:C0000000	sub_C0000000	proc near		; CODE XREF: sub_C00028A2+5p
cseg01:C0000000
cseg01:C0000000	arg_0		= dword	ptr  4
cseg01:C0000000
cseg01:C0000000			mov	edx, [esp+arg_0]
cseg01:C0000004			in	al, dx
cseg01:C0000005			retn
cseg01:C0000005	sub_C0000000	endp
cseg01:C0000005
cseg01:C0000006
cseg01:C0000006	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000006
cseg01:C0000006
cseg01:C0000006	sub_C0000006	proc near		; CODE XREF: sub_C0002841+7p
cseg01:C0000006						; sub_C0002841+19p ...
cseg01:C0000006
cseg01:C0000006	arg_0		= dword	ptr  4
cseg01:C0000006	arg_4		= byte ptr  8
cseg01:C0000006
cseg01:C0000006			mov	al, [esp+arg_4]
cseg01:C000000A			mov	edx, [esp+arg_0]
cseg01:C000000E			out	dx, al
cseg01:C000000F			retn
cseg01:C000000F	sub_C0000006	endp
cseg01:C000000F
cseg01:C000000F	; ---------------------------------------------------------------------------
cseg01:C0000010	dword_C0000010	dd 3 dup(0)		; DATA XREF: sub_C0000F51+Co
cseg01:C000001C
cseg01:C000001C	; =============== S U B	R O U T	I N E =======================================
cseg01:C000001C
cseg01:C000001C
cseg01:C000001C	sub_C000001C	proc near		; CODE XREF: sub_C0000DC1+26p
cseg01:C000001C
cseg01:C000001C	arg_0		= dword	ptr  4
cseg01:C000001C
cseg01:C000001C			mov	edx, [esp+arg_0]
cseg01:C0000020
cseg01:C0000020	loc_C0000020:				; DATA XREF: sub_C00020E0+41o
cseg01:C0000020						; sub_C00025C1+3Bo
cseg01:C0000020			in	eax, dx
cseg01:C0000021			retn
cseg01:C0000021	sub_C000001C	endp
cseg01:C0000021
cseg01:C0000022
cseg01:C0000022	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000022
cseg01:C0000022
cseg01:C0000022	sub_C0000022	proc near		; CODE XREF: sub_C0000DC1+19p
cseg01:C0000022						; sub_C0000DF0+19p ...
cseg01:C0000022
cseg01:C0000022	arg_0		= dword	ptr  4
cseg01:C0000022	arg_4		= dword	ptr  8
cseg01:C0000022
cseg01:C0000022			mov	eax, [esp+arg_4]
cseg01:C0000026			mov	edx, [esp+arg_0]
cseg01:C000002A			out	dx, eax
cseg01:C000002B			retn
cseg01:C000002B	sub_C0000022	endp
cseg01:C000002B
cseg01:C000002C
cseg01:C000002C	; =============== S U B	R O U T	I N E =======================================
cseg01:C000002C
cseg01:C000002C
cseg01:C000002C	sub_C000002C	proc near		; CODE XREF: sub_C0000DF0+26p
cseg01:C000002C
cseg01:C000002C	arg_0		= dword	ptr  4
cseg01:C000002C
cseg01:C000002C			mov	edx, [esp+arg_0]
cseg01:C0000030			in	ax, dx
cseg01:C0000032			retn
cseg01:C0000032	sub_C000002C	endp
cseg01:C0000032
cseg01:C0000033
cseg01:C0000033	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000033
cseg01:C0000033
cseg01:C0000033	sub_C0000033	proc near		; CODE XREF: sub_C0000E82+2Cp
cseg01:C0000033
cseg01:C0000033	arg_0		= dword	ptr  4
cseg01:C0000033	arg_4		= dword	ptr  8
cseg01:C0000033
cseg01:C0000033			mov	eax, [esp+arg_4]
cseg01:C0000037			mov	edx, [esp+arg_0]
cseg01:C000003B			out	dx, ax
cseg01:C000003D			retn
cseg01:C000003D	sub_C0000033	endp
cseg01:C000003D
cseg01:C000003E
cseg01:C000003E	; =============== S U B	R O U T	I N E =======================================
cseg01:C000003E
cseg01:C000003E
cseg01:C000003E	sub_C000003E	proc near		; CODE XREF: cseg01:C0000E45p
cseg01:C000003E
cseg01:C000003E	arg_0		= dword	ptr  4
cseg01:C000003E
cseg01:C000003E			mov	edx, [esp+arg_0]
cseg01:C0000042			in	al, dx
cseg01:C0000043			retn
cseg01:C0000043	sub_C000003E	endp
cseg01:C0000043
cseg01:C0000043	; ---------------------------------------------------------------------------
cseg01:C0000044	dword_C0000044	dd 0			; DATA XREF: sub_C00028B5r
cseg01:C0000044						; sub_C00028B5+Ew
cseg01:C0000048	;
cseg01:C0000048	; External Entry #1 into the Module vmwsmini
cseg01:C0000048	; Attributes: 32-bit entry Exported
cseg01:C0000048	;
cseg01:C0000048			public VMWS_DDB
cseg01:C0000048	VMWS_DDB	dd 0			; Next_0
cseg01:C000004C	SDK_Version_0	dw 30Ah
cseg01:C000004E	Req_Device_Number_0 dw 4331h
cseg01:C0000050	Dev_Major_Version_0 db 4		; Major	device number
cseg01:C0000051	Dev_Minor_Version_0 db 0		; Minor	device number
cseg01:C0000052	Flags_0		dw 0			; Flags	for init calls complete
cseg01:C0000054	Name_0		db 'VMWSVXD',0          ; Device name
cseg01:C000005C	Init_Order_0	dd 28000000h		; Initialization Order
cseg01:C0000060	Control_Proc_0	dd offset Control_0	; Offset of control procedure
cseg01:C0000064	V86_API_Proc_0	dd offset V86_0		; Offset of API	procedure (or 0)
cseg01:C0000068	PM_API_Proc_0	dd offset V86_0		; Offset of API	procedure (or 0)
cseg01:C000006C	V86_API_CSIP_0	dd 0			; CS:IP	of API entry point
cseg01:C0000070	PM_API_CSIP_0	dd 0			; CS:IP	of API entry point
cseg01:C0000074	Reference_Data_0 dd 0			; Reference data from real mode
cseg01:C0000078	Service_Table_Ptr_0 dd 0		; Pointer to service table
cseg01:C000007C	Service_Size_0	dd 0			; Number of services
cseg01:C0000080	Win32_Service_Table_0 dd 0		; Pointer to Win32 services
cseg01:C0000084	Prev_0		dd 0			; Pointer to previous DDB
cseg01:C0000088	Size_0		dd 50h			; Size of VxD_Desc_Block
cseg01:C000008C	Reserved1_0	dd 0
cseg01:C0000090	Reserved2_0	dd 0
cseg01:C0000094	Reserved3_0	dd 0
cseg01:C0000098	aHelloWorld	db 'Hello world!',0Ah,0
cseg01:C00000A6	aVmmVersion	db 'VMM version: ',0
cseg01:C00000B4	aRegionCreateEr	db 'region create error',0Ah,0
cseg01:C00000C9	aDevice_init_pr	db 'Device_Init_proc',0Ah,0 ; DATA XREF: sub_C000050Ao
cseg01:C00000DB	aDevice_init__0	db 'Device_Init_proc success',0Ah,0
cseg01:C00000DB						; DATA XREF: sub_C00019F5+17Bo
cseg01:C00000F5	aDeviceiocont_1	db 'DeviceIOControl: Ring',0Ah,0
cseg01:C000010C	aDeviceiocont_2	db 'DeviceIOControl: Sync',0Ah,0
cseg01:C0000123	aDeviceiocont_0	db 'DeviceIOControl: Unknown: %d',0Ah,0
cseg01:C0000123						; DATA XREF: sub_C000055F+21Fo
cseg01:C0000141	aDeviceiocontro	db 'DeviceIOControl: System code: %d',0Ah,0
cseg01:C0000141						; DATA XREF: sub_C000055F+FCo
cseg01:C0000163	aLxLx		db '%lx -> %lx',0Ah,0
cseg01:C000016F	aVirtualLx	db 'Virtual: %lx',0Ah,0
cseg01:C000017D	aAllocatedOtabl	db 'Allocated OTable row: %d',0Ah,0
cseg01:C000017D						; DATA XREF: sub_C0001599+92o
cseg01:C0000197	aS		db '%s',0Ah,0
cseg01:C000019B	aCbSubmitFailed	db 'CB submit FAILED',0Ah,0
cseg01:C00001AD	aCbSubmitD	db 'CB submit %d',0Ah,0
cseg01:C00001BB	aReusedCbDWithS	db 'Reused CB (%d) with status: %d',0Ah,0
cseg01:C00001DB	aErrorCommandLx	db 'Error command: %lX',0Ah,0
cseg01:C00001EF	aCbSupportedAnd	db 'CB supported and allocated',0Ah,0
cseg01:C00001EF						; DATA XREF: sub_C00019F5+2C3o
cseg01:C000020B	aGbSupportedAnd	db 'GB supported and allocated',0Ah,0
cseg01:C000020B						; DATA XREF: sub_C00019F5+294o
cseg01:C0000227	aCbContext0Enab	db 'CB context 0 enabled',0Ah,0
cseg01:C000023D	aRegionIdD	db 'Region id = %d',0Ah,0
cseg01:C000024D	aRegionAddressL	db 'Region address = %lX, PPN = %lX, GMRBLK = %lX',0Ah,0
cseg01:C000027C	aMemoryMapping	db 'Memory mapping:',0Ah,0
cseg01:C000027C						; DATA XREF: sub_C00019F5:loc_C0001BF6o
cseg01:C000028D	aXX		db '  %X -> %X',0Ah,0   ; DATA XREF: sub_C00019F5+195o
cseg01:C000028D						; sub_C00019F5+21Co ...
cseg01:C0000299	aDriverDestroye	db 'Driver destroyed',0Ah,0 ; DATA XREF: sub_C0000795o
cseg01:C00002AB	aSizeOfGsvga2DD	db 'Size of gSVGA(2) = %d %d',0Ah,0
cseg01:C00002AB						; DATA XREF: sub_C00019F5+262o
cseg01:C00002C5	aTestD		db 'test %d',0Ah,0      ; DATA XREF: sub_C00019F5+8Co
cseg01:C00002C5						; sub_C00019F5+EBo ...
cseg01:C00002CE	aSvga_initD	db 'SVGA_Init: %d',0Ah,0 ; DATA XREF: sub_C00019F5+ABo
cseg01:C00002DD	aUpdateScreenDD	db 'Update screen: %d %d %d',0Ah,0
cseg01:C00002F6	dword_C00002F6	dd 0			; DATA XREF: sub_C0000302+9w
cseg01:C00002F6						; sub_C000050A+29r ...
cseg01:C00002FA	dword_C00002FA	dd 0			; DATA XREF: sub_C0000302+Fw
cseg01:C00002FA						; sub_C000050A+20r
cseg01:C00002FE	dword_C00002FE	dd 0			; DATA XREF: sub_C000050A+11w
cseg01:C0000302
cseg01:C0000302	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000302
cseg01:C0000302
cseg01:C0000302	sub_C0000302	proc near		; CODE XREF: sub_C000050A+1Bp
cseg01:C0000302			push	ebx
cseg01:C0000303			push	esi
cseg01:C0000304			push	edi
cseg01:C0000305			VxDCall	VDD_Get_Mini_Dispatch_Table
cseg01:C000030B			mov	ds:dword_C00002F6, edi
cseg01:C0000311			mov	ds:dword_C00002FA, ecx
cseg01:C0000317			pop	edi
cseg01:C0000318			pop	esi
cseg01:C0000319			pop	ebx
cseg01:C0000319	sub_C0000302	endp ; sp-analysis failed
cseg01:C0000319
cseg01:C000031A	; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
cseg01:C000031B	; ---------------------------------------------------------------------------
cseg01:C000031B	; START	OF FUNCTION CHUNK FOR Control_0
cseg01:C000031B
cseg01:C000031B	loc_C000031B:				; CODE XREF: Control_0+3Fj
cseg01:C000031B			push	esi
cseg01:C000031C			call	sub_C000055F
cseg01:C0000321			retn
cseg01:C0000321	; END OF FUNCTION CHUNK	FOR Control_0
cseg01:C0000322
cseg01:C0000322	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000322
cseg01:C0000322
cseg01:C0000322			public Control_0
cseg01:C0000322	Control_0	proc near		; DATA XREF: cseg01:Control_Proc_0o
cseg01:C0000322
cseg01:C0000322	; FUNCTION CHUNK AT cseg01:C000031B SIZE 00000007 BYTES
cseg01:C0000322
cseg01:C0000322			cmp	eax, 0
cseg01:C0000325			jnz	loc_C0000334
cseg01:C000032B			pusha
cseg01:C000032C			call	nullsub_1
cseg01:C0000331			popa
cseg01:C0000332			clc
cseg01:C0000333			retn
cseg01:C0000334	; ---------------------------------------------------------------------------
cseg01:C0000334
cseg01:C0000334	loc_C0000334:				; CODE XREF: Control_0+3j
cseg01:C0000334			cmp	eax, 1
cseg01:C0000337			jnz	loc_C0000345
cseg01:C000033D			call	nullsub_1
cseg01:C0000342			popa
cseg01:C0000343			clc
cseg01:C0000344			retn
cseg01:C0000345	; ---------------------------------------------------------------------------
cseg01:C0000345
cseg01:C0000345	loc_C0000345:				; CODE XREF: Control_0+15j
cseg01:C0000345			cmp	eax, 1Bh
cseg01:C0000348			jnz	loc_C0000358
cseg01:C000034E			pusha
cseg01:C000034F			push	ebx
cseg01:C0000350			call	sub_C000050A
cseg01:C0000355			popa
cseg01:C0000356			clc
cseg01:C0000357			retn
cseg01:C0000358	; ---------------------------------------------------------------------------
cseg01:C0000358
cseg01:C0000358	loc_C0000358:				; CODE XREF: Control_0+26j
cseg01:C0000358			cmp	eax, 23h
cseg01:C000035B			jnz	loc_C0000366
cseg01:C0000361			jmp	loc_C000031B
cseg01:C0000366	; ---------------------------------------------------------------------------
cseg01:C0000366
cseg01:C0000366	loc_C0000366:				; CODE XREF: Control_0+39j
cseg01:C0000366			cmp	eax, 5
cseg01:C0000369			jnz	loc_C0000379
cseg01:C000036F			pusha
cseg01:C0000370			push	ebx
cseg01:C0000371			call	sub_C0000795
cseg01:C0000376			popa
cseg01:C0000377			clc
cseg01:C0000378			retn
cseg01:C0000379	; ---------------------------------------------------------------------------
cseg01:C0000379
cseg01:C0000379	loc_C0000379:				; CODE XREF: Control_0+47j
cseg01:C0000379			clc
cseg01:C000037A			retn
cseg01:C000037A	Control_0	endp ; sp-analysis failed
cseg01:C000037A
cseg01:C000037B
cseg01:C000037B	; =============== S U B	R O U T	I N E =======================================
cseg01:C000037B
cseg01:C000037B
cseg01:C000037B	sub_C000037B	proc near		; CODE XREF: V86_0+1p
cseg01:C000037B
cseg01:C000037B	arg_0		= dword	ptr  4
cseg01:C000037B
cseg01:C000037B			push	ebx
cseg01:C000037C			push	esi
cseg01:C000037D			push	edi
cseg01:C000037E			push	ebp
cseg01:C000037F			mov	ebx, [esp+10h+arg_0]
cseg01:C0000383			mov	esi, 0FFFFh
cseg01:C0000388			mov	ax, [ebx+14h]
cseg01:C000038C			cmp	ax, 110Fh
cseg01:C0000390			jb	short loc_C00003EA
cseg01:C0000392			jbe	loc_C0000461
cseg01:C0000398			cmp	ax, 2001h
cseg01:C000039C			jb	short loc_C00003C7
cseg01:C000039E			jbe	loc_C0000496
cseg01:C00003A4			cmp	ax, 2004h
cseg01:C00003A8			jz	loc_C00004D7
cseg01:C00003AE			cmp	ax, 2003h
cseg01:C00003B2			jz	loc_C00004D0
cseg01:C00003B8			cmp	ax, 2002h
cseg01:C00003BC			jz	loc_C00004BE
cseg01:C00003C2			jmp	loc_C00004DE
cseg01:C00003C7	; ---------------------------------------------------------------------------
cseg01:C00003C7
cseg01:C00003C7	loc_C00003C7:				; CODE XREF: sub_C000037B+21j
cseg01:C00003C7			cmp	ax, 2000h
cseg01:C00003CB			jz	loc_C000048F
cseg01:C00003D1			cmp	ax, 1111h
cseg01:C00003D5			jz	loc_C000047C
cseg01:C00003DB			cmp	ax, 1110h
cseg01:C00003DF			jz	loc_C0000468
cseg01:C00003E5			jmp	loc_C00004DE
cseg01:C00003EA	; ---------------------------------------------------------------------------
cseg01:C00003EA
cseg01:C00003EA	loc_C00003EA:				; CODE XREF: sub_C000037B+15j
cseg01:C00003EA			cmp	ax, 110Bh
cseg01:C00003EE			jb	short loc_C0000400
cseg01:C00003F0			jbe	short loc_C0000425
cseg01:C00003F2			cmp	ax, 110Eh
cseg01:C00003F6			jz	short loc_C0000453
cseg01:C00003F8			cmp	ax, 110Dh
cseg01:C00003FC			jz	short loc_C0000448
cseg01:C00003FE			jmp	short loc_C000043A
cseg01:C0000400	; ---------------------------------------------------------------------------
cseg01:C0000400
cseg01:C0000400	loc_C0000400:				; CODE XREF: sub_C000037B+73j
cseg01:C0000400			cmp	ax, 1
cseg01:C0000404			jz	short loc_C0000419
cseg01:C0000406			test	ax, ax
cseg01:C0000409			jnz	loc_C00004DE
cseg01:C000040F			mov	esi, 400h
cseg01:C0000414			jmp	loc_C00004B1
cseg01:C0000419	; ---------------------------------------------------------------------------
cseg01:C0000419
cseg01:C0000419	loc_C0000419:				; CODE XREF: sub_C000037B+89j
cseg01:C0000419			call	sub_C0001270
cseg01:C000041E			mov	esi, eax
cseg01:C0000420			jmp	loc_C00004DE
cseg01:C0000425	; ---------------------------------------------------------------------------
cseg01:C0000425
cseg01:C0000425	loc_C0000425:				; CODE XREF: sub_C000037B+75j
cseg01:C0000425			call	sub_C0001157
cseg01:C000042A			test	eax, eax
cseg01:C000042C			jz	loc_C00004DE
cseg01:C0000432			mov	[ebx+18h], eax
cseg01:C0000435			jmp	loc_C00004AC
cseg01:C000043A	; ---------------------------------------------------------------------------
cseg01:C000043A
cseg01:C000043A	loc_C000043A:				; CODE XREF: sub_C000037B+83j
cseg01:C000043A			mov	edx, [ebx+18h]
cseg01:C000043D			push	edx
cseg01:C000043E			call	sub_C000115D
cseg01:C0000443
cseg01:C0000443	loc_C0000443:				; CODE XREF: sub_C000037B+D6j
cseg01:C0000443			add	esp, 4
cseg01:C0000446			jmp	short loc_C00004AC
cseg01:C0000448	; ---------------------------------------------------------------------------
cseg01:C0000448
cseg01:C0000448	loc_C0000448:				; CODE XREF: sub_C000037B+81j
cseg01:C0000448			mov	ecx, [ebx+18h]
cseg01:C000044B			push	ecx
cseg01:C000044C			call	sub_C0002630
cseg01:C0000451			jmp	short loc_C0000443
cseg01:C0000453	; ---------------------------------------------------------------------------
cseg01:C0000453
cseg01:C0000453	loc_C0000453:				; CODE XREF: sub_C000037B+7Bj
cseg01:C0000453			mov	esi, [ebx+18h]
cseg01:C0000456			push	esi
cseg01:C0000457			call	sub_C0002180
cseg01:C000045C			add	esp, 4
cseg01:C000045F			jmp	short loc_C00004A9
cseg01:C0000461	; ---------------------------------------------------------------------------
cseg01:C0000461
cseg01:C0000461	loc_C0000461:				; CODE XREF: sub_C000037B+17j
cseg01:C0000461			call	sub_C000116E
cseg01:C0000466			jmp	short loc_C00004AC
cseg01:C0000468	; ---------------------------------------------------------------------------
cseg01:C0000468
cseg01:C0000468	loc_C0000468:				; CODE XREF: sub_C000037B+64j
cseg01:C0000468			mov	eax, [ebx]
cseg01:C000046A			push	eax
cseg01:C000046B			mov	al, [ebx+18h]
cseg01:C000046E			movzx	eax, al
cseg01:C0000471			push	eax
cseg01:C0000472			call	sub_C00026B8
cseg01:C0000477			add	esp, 8
cseg01:C000047A			jmp	short loc_C00004AC
cseg01:C000047C	; ---------------------------------------------------------------------------
cseg01:C000047C
cseg01:C000047C	loc_C000047C:				; CODE XREF: sub_C000037B+5Aj
cseg01:C000047C			mov	al, [ebx+18h]
cseg01:C000047F			movzx	eax, al
cseg01:C0000482			push	eax
cseg01:C0000483			call	sub_C000270C
cseg01:C0000488			add	esp, 4
cseg01:C000048B			mov	[ebx], eax
cseg01:C000048D			jmp	short loc_C00004AC
cseg01:C000048F	; ---------------------------------------------------------------------------
cseg01:C000048F
cseg01:C000048F	loc_C000048F:				; CODE XREF: sub_C000037B+50j
cseg01:C000048F			call	sub_C000262A
cseg01:C0000494			jmp	short loc_C00004A9
cseg01:C0000496	; ---------------------------------------------------------------------------
cseg01:C0000496
cseg01:C0000496	loc_C0000496:				; CODE XREF: sub_C000037B+23j
cseg01:C0000496			mov	esi, [ebx+18h]
cseg01:C0000499			push	esi
cseg01:C000049A			mov	edi, [ebx]
cseg01:C000049C			push	edi
cseg01:C000049D			mov	ebp, [ebx+4]
cseg01:C00004A0			push	ebp
cseg01:C00004A1			call	sub_C0002353
cseg01:C00004A6
cseg01:C00004A6	loc_C00004A6:				; CODE XREF: sub_C000037B+153j
cseg01:C00004A6			add	esp, 0Ch
cseg01:C00004A9
cseg01:C00004A9	loc_C00004A9:				; CODE XREF: sub_C000037B+E4j
cseg01:C00004A9						; sub_C000037B+119j
cseg01:C00004A9			mov	[ebx+1Ch], eax
cseg01:C00004AC
cseg01:C00004AC	loc_C00004AC:				; CODE XREF: sub_C000037B+BAj
cseg01:C00004AC						; sub_C000037B+CBj ...
cseg01:C00004AC			mov	esi, 1
cseg01:C00004B1
cseg01:C00004B1	loc_C00004B1:				; CODE XREF: sub_C000037B+99j
cseg01:C00004B1						; sub_C000037B+167j
cseg01:C00004B1			and	byte ptr [ebx+2Ch], 0FEh
cseg01:C00004B5
cseg01:C00004B5	loc_C00004B5:				; CODE XREF: sub_C000037B+16Dj
cseg01:C00004B5			mov	eax, esi
cseg01:C00004B7
cseg01:C00004B7	loc_C00004B7:				; CODE XREF: sub_C000055F+139j
cseg01:C00004B7						; sub_C000055F+231j
cseg01:C00004B7			pop	ebp
cseg01:C00004B8			pop	edi
cseg01:C00004B9			pop	esi
cseg01:C00004BA			pop	ebx
cseg01:C00004BB			retn	4
cseg01:C00004BE	; ---------------------------------------------------------------------------
cseg01:C00004BE
cseg01:C00004BE	loc_C00004BE:				; CODE XREF: sub_C000037B+41j
cseg01:C00004BE			mov	eax, [ebx+18h]
cseg01:C00004C1			push	eax
cseg01:C00004C2			mov	edx, [ebx]
cseg01:C00004C4			push	edx
cseg01:C00004C5			mov	ecx, [ebx+4]
cseg01:C00004C8			push	ecx
cseg01:C00004C9			call	sub_C00022E5
cseg01:C00004CE			jmp	short loc_C00004A6
cseg01:C00004D0	; ---------------------------------------------------------------------------
cseg01:C00004D0
cseg01:C00004D0	loc_C00004D0:				; CODE XREF: sub_C000037B+37j
cseg01:C00004D0			call	sub_C00025A4
cseg01:C00004D5			jmp	short loc_C00004AC
cseg01:C00004D7	; ---------------------------------------------------------------------------
cseg01:C00004D7
cseg01:C00004D7	loc_C00004D7:				; CODE XREF: sub_C000037B+2Dj
cseg01:C00004D7			call	sub_C0002620
cseg01:C00004DC			jmp	short loc_C00004AC
cseg01:C00004DE	; ---------------------------------------------------------------------------
cseg01:C00004DE
cseg01:C00004DE	loc_C00004DE:				; CODE XREF: sub_C000037B+47j
cseg01:C00004DE						; sub_C000037B+6Aj ...
cseg01:C00004DE			cmp	si, 0FFFFh
cseg01:C00004E2			jnz	short loc_C00004B1
cseg01:C00004E4			or	byte ptr [ebx+2Ch], 1
cseg01:C00004E8			jmp	short loc_C00004B5
cseg01:C00004E8	sub_C000037B	endp
cseg01:C00004E8
cseg01:C00004EA
cseg01:C00004EA	; =============== S U B	R O U T	I N E =======================================
cseg01:C00004EA
cseg01:C00004EA
cseg01:C00004EA	V86_0		proc near		; DATA XREF: cseg01:V86_API_Proc_0o
cseg01:C00004EA						; cseg01:PM_API_Proc_0o
cseg01:C00004EA			push	ebp
cseg01:C00004EB			call	sub_C000037B
cseg01:C00004F0			mov	[ebp+1Ch], ax
cseg01:C00004F4			retn
cseg01:C00004F4	V86_0		endp
cseg01:C00004F4
cseg01:C00004F5
cseg01:C00004F5	; =============== S U B	R O U T	I N E =======================================
cseg01:C00004F5
cseg01:C00004F5
cseg01:C00004F5	sub_C00004F5	proc near		; DATA XREF: sub_C000050A+2Eo
cseg01:C00004F5			push	ebp
cseg01:C00004F6			call	sub_C0002764
cseg01:C00004FB			retn
cseg01:C00004FB	sub_C00004F5	endp
cseg01:C00004FB
cseg01:C00004FC
cseg01:C00004FC	; =============== S U B	R O U T	I N E =======================================
cseg01:C00004FC
cseg01:C00004FC
cseg01:C00004FC	sub_C00004FC	proc near		; DATA XREF: sub_C000050A+39o
cseg01:C00004FC			push	ebp
cseg01:C00004FD			call	sub_C00027A1
cseg01:C0000502			retn
cseg01:C0000502	sub_C00004FC	endp
cseg01:C0000502
cseg01:C0000503
cseg01:C0000503	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000503
cseg01:C0000503
cseg01:C0000503	sub_C0000503	proc near		; DATA XREF: sub_C000050A+48o
cseg01:C0000503			push	ebp
cseg01:C0000504			call	sub_C000276F
cseg01:C0000509			retn
cseg01:C0000509	sub_C0000503	endp
cseg01:C0000509
cseg01:C000050A
cseg01:C000050A	; =============== S U B	R O U T	I N E =======================================
cseg01:C000050A
cseg01:C000050A
cseg01:C000050A	sub_C000050A	proc near		; CODE XREF: Control_0+2Ep
cseg01:C000050A
cseg01:C000050A	arg_0		= dword	ptr  4
cseg01:C000050A
cseg01:C000050A			push	offset aDevice_init_pr ; "Device_Init_proc\n"
cseg01:C000050F			call	sub_C0002A03
cseg01:C0000514			add	esp, 4
cseg01:C0000517			mov	eax, [esp+arg_0]
cseg01:C000051B			mov	ds:dword_C00002FE, eax
cseg01:C0000520			call	sub_C00019F5
cseg01:C0000525			call	sub_C0000302
cseg01:C000052A			cmp	ds:dword_C00002FA, 31h
cseg01:C0000531			jb	short locret_C000055C
cseg01:C0000533			mov	eax, ds:dword_C00002F6
cseg01:C0000538			mov	dword ptr [eax], offset	sub_C00004F5
cseg01:C000053E			mov	eax, ds:dword_C00002F6
cseg01:C0000543			mov	dword ptr [eax+90h], offset sub_C00004FC
cseg01:C000054D			mov	eax, ds:dword_C00002F6
cseg01:C0000552			mov	dword ptr [eax+0A8h], offset sub_C0000503
cseg01:C000055C
cseg01:C000055C	locret_C000055C:			; CODE XREF: sub_C000050A+27j
cseg01:C000055C			retn	4
cseg01:C000055C	sub_C000050A	endp
cseg01:C000055C
cseg01:C000055F
cseg01:C000055F	; =============== S U B	R O U T	I N E =======================================
cseg01:C000055F
cseg01:C000055F
cseg01:C000055F	sub_C000055F	proc near		; CODE XREF: Control_0-6p
cseg01:C000055F
cseg01:C000055F	arg_0		= dword	ptr  4
cseg01:C000055F
cseg01:C000055F			push	ebx
cseg01:C0000560			push	esi
cseg01:C0000561			push	edi
cseg01:C0000562			push	ebp
cseg01:C0000563			mov	ecx, [esp+10h+arg_0]
cseg01:C0000567			mov	eax, [ecx+10h]
cseg01:C000056A			mov	ebx, [ecx+18h]
cseg01:C000056D			mov	edx, [ecx+0Ch]
cseg01:C0000570			cmp	edx, 2006h
cseg01:C0000576			jl	short loc_C00005EB
cseg01:C0000578			jle	loc_C00006CC
cseg01:C000057E			cmp	edx, 200Bh
cseg01:C0000584			jl	short loc_C00005C8
cseg01:C0000586			jle	loc_C0000711
cseg01:C000058C			cmp	edx, 200Eh
cseg01:C0000592			jl	short loc_C00005B7
cseg01:C0000594			jle	loc_C000074D
cseg01:C000059A			cmp	edx, 2010h
cseg01:C00005A0			jz	loc_C0000770
cseg01:C00005A6			cmp	edx, 200Fh
cseg01:C00005AC			jz	loc_C0000766
cseg01:C00005B2			jmp	loc_C000077A
cseg01:C00005B7	; ---------------------------------------------------------------------------
cseg01:C00005B7
cseg01:C00005B7	loc_C00005B7:				; CODE XREF: sub_C000055F+33j
cseg01:C00005B7			cmp	edx, 200Dh
cseg01:C00005BD			jz	loc_C0000739
cseg01:C00005C3			jmp	loc_C000072E
cseg01:C00005C8	; ---------------------------------------------------------------------------
cseg01:C00005C8
cseg01:C00005C8	loc_C00005C8:				; CODE XREF: sub_C000055F+25j
cseg01:C00005C8			cmp	edx, 2008h
cseg01:C00005CE			jl	loc_C00006D6
cseg01:C00005D4			jle	loc_C00006F3
cseg01:C00005DA			cmp	edx, 200Ah
cseg01:C00005E0			jz	loc_C0000704
cseg01:C00005E6			jmp	loc_C00006FA
cseg01:C00005EB	; ---------------------------------------------------------------------------
cseg01:C00005EB
cseg01:C00005EB	loc_C00005EB:				; CODE XREF: sub_C000055F+17j
cseg01:C00005EB			cmp	edx, 110Eh
cseg01:C00005F1			jl	short loc_C0000635
cseg01:C00005F3			jle	loc_C0000689
cseg01:C00005F9			cmp	edx, 1111h
cseg01:C00005FF			jl	short loc_C0000624
cseg01:C0000601			jle	loc_C00006B3
cseg01:C0000607			cmp	edx, 2005h
cseg01:C000060D			jz	loc_C00006C5
cseg01:C0000613			cmp	edx, 2000h
cseg01:C0000619			jz	loc_C00006BE
cseg01:C000061F			jmp	loc_C000077A
cseg01:C0000624	; ---------------------------------------------------------------------------
cseg01:C0000624
cseg01:C0000624	loc_C0000624:				; CODE XREF: sub_C000055F+A0j
cseg01:C0000624			cmp	edx, 1110h
cseg01:C000062A			jz	loc_C00006A4
cseg01:C0000630			jmp	loc_C000069D
cseg01:C0000635	; ---------------------------------------------------------------------------
cseg01:C0000635
cseg01:C0000635	loc_C0000635:				; CODE XREF: sub_C000055F+92j
cseg01:C0000635			cmp	edx, 110Bh
cseg01:C000063B			jl	short loc_C0000649
cseg01:C000063D			jle	short loc_C000066B
cseg01:C000063F			cmp	edx, 110Dh
cseg01:C0000645			jz	short loc_C000067F
cseg01:C0000647			jmp	short loc_C0000672
cseg01:C0000649	; ---------------------------------------------------------------------------
cseg01:C0000649
cseg01:C0000649	loc_C0000649:				; CODE XREF: sub_C000055F+DCj
cseg01:C0000649			cmp	edx, 0FFFFFFFFh
cseg01:C000064C			jl	loc_C000077A
cseg01:C0000652			test	edx, edx
cseg01:C0000654			jg	loc_C000077A
cseg01:C000065A			push	edx
cseg01:C000065B			mov	eax, offset aDeviceiocontro ; "DeviceIOControl:	System code: %d\n"
cseg01:C0000660			push	eax
cseg01:C0000661			call	sub_C0002A03
cseg01:C0000666
cseg01:C0000666	loc_C0000666:				; CODE XREF: sub_C000055F+152j
cseg01:C0000666			add	esp, 8
cseg01:C0000669			jmp	short loc_C0000696
cseg01:C000066B	; ---------------------------------------------------------------------------
cseg01:C000066B
cseg01:C000066B	loc_C000066B:				; CODE XREF: sub_C000055F+DEj
cseg01:C000066B			call	sub_C0001157
cseg01:C0000670			jmp	short loc_C0000694
cseg01:C0000672	; ---------------------------------------------------------------------------
cseg01:C0000672
cseg01:C0000672	loc_C0000672:				; CODE XREF: sub_C000055F+E8j
cseg01:C0000672			mov	edi, [eax]
cseg01:C0000674			push	edi
cseg01:C0000675			call	sub_C000115D
cseg01:C000067A
cseg01:C000067A	loc_C000067A:				; CODE XREF: sub_C000055F+128j
cseg01:C000067A						; sub_C000055F+175j ...
cseg01:C000067A			add	esp, 4
cseg01:C000067D			jmp	short loc_C0000696
cseg01:C000067F	; ---------------------------------------------------------------------------
cseg01:C000067F
cseg01:C000067F	loc_C000067F:				; CODE XREF: sub_C000055F+E6j
cseg01:C000067F			mov	ebp, [eax]
cseg01:C0000681			push	ebp
cseg01:C0000682			call	sub_C0002630
cseg01:C0000687			jmp	short loc_C000067A
cseg01:C0000689	; ---------------------------------------------------------------------------
cseg01:C0000689
cseg01:C0000689	loc_C0000689:				; CODE XREF: sub_C000055F+94j
cseg01:C0000689			mov	esi, [eax]
cseg01:C000068B			push	esi
cseg01:C000068C			call	sub_C0002180
cseg01:C0000691
cseg01:C0000691	loc_C0000691:				; CODE XREF: sub_C000055F+15Dj
cseg01:C0000691						; sub_C000055F+1A3j
cseg01:C0000691			add	esp, 4
cseg01:C0000694
cseg01:C0000694	loc_C0000694:				; CODE XREF: sub_C000055F+111j
cseg01:C0000694						; sub_C000055F+164j ...
cseg01:C0000694			mov	[ebx], eax
cseg01:C0000696
cseg01:C0000696	loc_C0000696:				; CODE XREF: sub_C000055F+10Aj
cseg01:C0000696						; sub_C000055F+11Ej ...
cseg01:C0000696			xor	eax, eax
cseg01:C0000698			jmp	loc_C00004B7
cseg01:C000069D	; ---------------------------------------------------------------------------
cseg01:C000069D
cseg01:C000069D	loc_C000069D:				; CODE XREF: sub_C000055F+D1j
cseg01:C000069D			call	sub_C000116E
cseg01:C00006A2			jmp	short loc_C0000696
cseg01:C00006A4	; ---------------------------------------------------------------------------
cseg01:C00006A4
cseg01:C00006A4	loc_C00006A4:				; CODE XREF: sub_C000055F+CBj
cseg01:C00006A4			mov	ecx, [eax+4]
cseg01:C00006A7			push	ecx
cseg01:C00006A8			movzx	eax, byte ptr [eax]
cseg01:C00006AB			push	eax
cseg01:C00006AC			call	sub_C00026B8
cseg01:C00006B1			jmp	short loc_C0000666
cseg01:C00006B3	; ---------------------------------------------------------------------------
cseg01:C00006B3
cseg01:C00006B3	loc_C00006B3:				; CODE XREF: sub_C000055F+A2j
cseg01:C00006B3			movzx	eax, byte ptr [eax]
cseg01:C00006B6			push	eax
cseg01:C00006B7			call	sub_C000270C
cseg01:C00006BC			jmp	short loc_C0000691
cseg01:C00006BE	; ---------------------------------------------------------------------------
cseg01:C00006BE
cseg01:C00006BE	loc_C00006BE:				; CODE XREF: sub_C000055F+BAj
cseg01:C00006BE			call	sub_C000262A
cseg01:C00006C3			jmp	short loc_C0000694
cseg01:C00006C5	; ---------------------------------------------------------------------------
cseg01:C00006C5
cseg01:C00006C5	loc_C00006C5:				; CODE XREF: sub_C000055F+AEj
cseg01:C00006C5			call	sub_C0001714
cseg01:C00006CA			jmp	short loc_C0000694
cseg01:C00006CC	; ---------------------------------------------------------------------------
cseg01:C00006CC
cseg01:C00006CC	loc_C00006CC:				; CODE XREF: sub_C000055F+19j
cseg01:C00006CC			mov	edx, [eax]
cseg01:C00006CE			push	edx
cseg01:C00006CF			call	sub_C000176A
cseg01:C00006D4			jmp	short loc_C000067A
cseg01:C00006D6	; ---------------------------------------------------------------------------
cseg01:C00006D6
cseg01:C00006D6	loc_C00006D6:				; CODE XREF: sub_C000055F+6Fj
cseg01:C00006D6			mov	ecx, [eax+0Ch]
cseg01:C00006D9			push	ecx
cseg01:C00006DA			mov	esi, [eax+8]
cseg01:C00006DD			push	esi
cseg01:C00006DE			add	ebx, 10h
cseg01:C00006E1			push	ebx
cseg01:C00006E2			mov	edi, [eax+4]
cseg01:C00006E5			push	edi
cseg01:C00006E6			mov	ebp, [eax]
cseg01:C00006E8			push	ebp
cseg01:C00006E9			call	sub_C00017FE
cseg01:C00006EE			add	esp, 14h
cseg01:C00006F1			jmp	short loc_C0000696
cseg01:C00006F3	; ---------------------------------------------------------------------------
cseg01:C00006F3
cseg01:C00006F3	loc_C00006F3:				; CODE XREF: sub_C000055F+75j
cseg01:C00006F3			call	sub_C000179A
cseg01:C00006F8			jmp	short loc_C0000694
cseg01:C00006FA	; ---------------------------------------------------------------------------
cseg01:C00006FA
cseg01:C00006FA	loc_C00006FA:				; CODE XREF: sub_C000055F+87j
cseg01:C00006FA			mov	ebp, [eax]
cseg01:C00006FC			push	ebp
cseg01:C00006FD			call	sub_C00017C1
cseg01:C0000702			jmp	short loc_C0000691
cseg01:C0000704	; ---------------------------------------------------------------------------
cseg01:C0000704
cseg01:C0000704	loc_C0000704:				; CODE XREF: sub_C000055F+81j
cseg01:C0000704			mov	edx, [eax]
cseg01:C0000706			push	edx
cseg01:C0000707			call	sub_C00017D1
cseg01:C000070C			jmp	loc_C000067A
cseg01:C0000711	; ---------------------------------------------------------------------------
cseg01:C0000711
cseg01:C0000711	loc_C0000711:				; CODE XREF: sub_C000055F+27j
cseg01:C0000711			mov	esi, ebx
cseg01:C0000713			cmp	ebx, eax
cseg01:C0000715			jz	short loc_C0000723
cseg01:C0000717			push	1Ch
cseg01:C0000719			push	eax
cseg01:C000071A			push	ebx
cseg01:C000071B			call	sub_C0001222
cseg01:C0000720			add	esp, 0Ch
cseg01:C0000723
cseg01:C0000723	loc_C0000723:				; CODE XREF: sub_C000055F+1B6j
cseg01:C0000723			push	esi
cseg01:C0000724			call	sub_C0001D48
cseg01:C0000729			jmp	loc_C000067A
cseg01:C000072E	; ---------------------------------------------------------------------------
cseg01:C000072E
cseg01:C000072E	loc_C000072E:				; CODE XREF: sub_C000055F+64j
cseg01:C000072E			push	eax
cseg01:C000072F			call	sub_C0002055
cseg01:C0000734			jmp	loc_C000067A
cseg01:C0000739	; ---------------------------------------------------------------------------
cseg01:C0000739
cseg01:C0000739	loc_C0000739:				; CODE XREF: sub_C000055F+5Ej
cseg01:C0000739			mov	esi, [eax+4]
cseg01:C000073C			push	esi
cseg01:C000073D			mov	edi, [eax]
cseg01:C000073F			push	edi
cseg01:C0000740			call	sub_C0002520
cseg01:C0000745			add	esp, 8
cseg01:C0000748			jmp	loc_C0000694
cseg01:C000074D	; ---------------------------------------------------------------------------
cseg01:C000074D
cseg01:C000074D	loc_C000074D:				; CODE XREF: sub_C000055F+35j
cseg01:C000074D			push	ebx
cseg01:C000074E			mov	edx, [eax+8]
cseg01:C0000751			push	edx
cseg01:C0000752			mov	ecx, [eax+4]
cseg01:C0000755			push	ecx
cseg01:C0000756			mov	ebx, [eax]
cseg01:C0000758			push	ebx
cseg01:C0000759			call	sub_C0002574
cseg01:C000075E			add	esp, 10h
cseg01:C0000761			jmp	loc_C0000696
cseg01:C0000766	; ---------------------------------------------------------------------------
cseg01:C0000766
cseg01:C0000766	loc_C0000766:				; CODE XREF: sub_C000055F+4Dj
cseg01:C0000766			call	sub_C000170E
cseg01:C000076B			jmp	loc_C0000694
cseg01:C0000770	; ---------------------------------------------------------------------------
cseg01:C0000770
cseg01:C0000770	loc_C0000770:				; CODE XREF: sub_C000055F+41j
cseg01:C0000770			call	sub_C000163E
cseg01:C0000775			jmp	loc_C0000694
cseg01:C000077A	; ---------------------------------------------------------------------------
cseg01:C000077A
cseg01:C000077A	loc_C000077A:				; CODE XREF: sub_C000055F+53j
cseg01:C000077A						; sub_C000055F+C0j ...
cseg01:C000077A			mov	edx, [ecx+0Ch]
cseg01:C000077D			push	edx
cseg01:C000077E			push	offset aDeviceiocont_0 ; "DeviceIOControl: Unknown: %d\n"
cseg01:C0000783			call	sub_C0002A03
cseg01:C0000788			add	esp, 8
cseg01:C000078B			mov	eax, 1
cseg01:C0000790			jmp	loc_C00004B7
cseg01:C0000790	sub_C000055F	endp
cseg01:C0000790
cseg01:C0000795
cseg01:C0000795	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000795
cseg01:C0000795
cseg01:C0000795	sub_C0000795	proc near		; CODE XREF: Control_0+4Fp
cseg01:C0000795			push	offset aDriverDestroye ; "Driver destroyed\n"
cseg01:C000079A			call	sub_C0002A03
cseg01:C000079F			add	esp, 4
cseg01:C00007A2			call	sub_C0002620
cseg01:C00007A7			retn	4
cseg01:C00007A7	sub_C0000795	endp
cseg01:C00007A7
cseg01:C00007A7	; ---------------------------------------------------------------------------
cseg01:C00007AA			align 4
cseg01:C00007AC	dword_C00007AC	dd 0			; DATA XREF: sub_C0000861+Ao
cseg01:C00007AC						; sub_C0000861:loc_C0000895o ...
cseg01:C00007B0	dword_C00007B0	dd 0			; DATA XREF: sub_C0000861+F8w
cseg01:C00007B0						; sub_C0000861+162w ...
cseg01:C00007B4	dword_C00007B4	dd 0			; DATA XREF: sub_C0000BA8r
cseg01:C00007B4						; sub_C0000BA8+Br ...
cseg01:C00007B8	dword_C00007B8	dd 0			; DATA XREF: sub_C00019F5+1E9w
cseg01:C00007B8						; sub_C00019F5+20Er
cseg01:C00007BC	dword_C00007BC	dd 0			; DATA XREF: sub_C0000861+25Cw
cseg01:C00007BC						; sub_C0000861+28Ar ...
cseg01:C00007C0	dword_C00007C0	dd 0			; DATA XREF: sub_C00019F5+1DFw
cseg01:C00007C0						; sub_C00019F5+1F7r
cseg01:C00007C4			align 8
cseg01:C00007C8	dword_C00007C8	dd 0			; DATA XREF: sub_C0000861+15Dw
cseg01:C00007C8						; sub_C0000861+1B3w ...
cseg01:C00007CC	dword_C00007CC	dd 0			; DATA XREF: sub_C0000861+26Bw
cseg01:C00007D0	dword_C00007D0	dd 0			; DATA XREF: sub_C00019F5+1BAw
cseg01:C00007D0						; sub_C00019F5:loc_C0001BD9r ...
cseg01:C00007D4	dword_C00007D4	dd 0			; DATA XREF: sub_C0000861+D0w
cseg01:C00007D4						; sub_C0000861+142w ...
cseg01:C00007D8	dword_C00007D8	dd 0			; DATA XREF: sub_C0000861+E4w
cseg01:C00007D8						; sub_C0000861+156w ...
cseg01:C00007DC	dword_C00007DC	dd 0			; DATA XREF: sub_C0000861+200w
cseg01:C00007DC						; sub_C0000861:loc_C0000A67r ...
cseg01:C00007E0	dword_C00007E0	dd 0			; DATA XREF: sub_C0000861+2B6w
cseg01:C00007E0						; sub_C0002496+4r
cseg01:C00007E4	dword_C00007E4	dd 0			; DATA XREF: sub_C0000C25+4w
cseg01:C00007E8	dword_C00007E8	dd 0			; DATA XREF: sub_C0000C25+Dw
cseg01:C00007EC	dword_C00007EC	dd 0			; DATA XREF: sub_C0000C25+16w
cseg01:C00007F0	dword_C00007F0	dd 0			; DATA XREF: sub_C0000C25+68w
cseg01:C00007F4			align 8
cseg01:C00007F8	dword_C00007F8	dd 0			; DATA XREF: sub_C00019F5+24Ar
cseg01:C00007FC			align 10h
cseg01:C0000800	dword_C0000800	dd 0			; DATA XREF: sub_C00019F5+243r
cseg01:C0000804			align 8
cseg01:C0000808	dword_C0000808	dd 0			; DATA XREF: sub_C0000861+25w
cseg01:C0000808						; sub_C0000861+4Fw ...
cseg01:C000080C	dword_C000080C	dd 0			; DATA XREF: sub_C0000861+2BDw
cseg01:C000080C						; sub_C0000861+2F4w ...
cseg01:C0000810	dword_C0000810	dd 0			; DATA XREF: sub_C0000861+11Aw
cseg01:C0000814	dword_C0000814	dd 0			; DATA XREF: sub_C0000861+12Ew
cseg01:C0000818	dword_C0000818	dd 0			; DATA XREF: sub_C000156E+20w
cseg01:C000081C	dword_C000081C	dd 0			; DATA XREF: sub_C0000C93+Dr
cseg01:C000081C						; sub_C0000CD3+10r ...
cseg01:C0000820	aPciBarsLxLxLx	db 'PCI bars: %lx %lx %lx',0Ah,0
cseg01:C0000820						; DATA XREF: sub_C0000861+1CDo
cseg01:C0000837	aSizeOfGsvga1DD	db 'Size of gSVGA(1) = %d %d',0Ah,0
cseg01:C0000837						; DATA XREF: sub_C0000861+323o
cseg01:C0000851
cseg01:C0000851	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000851
cseg01:C0000851
cseg01:C0000851	sub_C0000851	proc near		; CODE XREF: sub_C0000C93+37p
cseg01:C0000851
cseg01:C0000851	arg_0		= dword	ptr  4
cseg01:C0000851
cseg01:C0000851			mov	edx, [esp+arg_0]
cseg01:C0000855			in	eax, dx
cseg01:C0000856			retn
cseg01:C0000856	sub_C0000851	endp
cseg01:C0000856
cseg01:C0000857
cseg01:C0000857	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000857
cseg01:C0000857
cseg01:C0000857	sub_C0000857	proc near		; CODE XREF: sub_C0000C93+24p
cseg01:C0000857						; sub_C0000CD3+2Bp ...
cseg01:C0000857
cseg01:C0000857	arg_0		= dword	ptr  4
cseg01:C0000857	arg_4		= dword	ptr  8
cseg01:C0000857
cseg01:C0000857			mov	eax, [esp+arg_4]
cseg01:C000085B			mov	edx, [esp+arg_0]
cseg01:C000085F			out	dx, eax
cseg01:C0000860			retn
cseg01:C0000860	sub_C0000857	endp
cseg01:C0000860
cseg01:C0000861
cseg01:C0000861	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000861
cseg01:C0000861
cseg01:C0000861	sub_C0000861	proc near		; CODE XREF: sub_C00019F5+A0p
cseg01:C0000861
cseg01:C0000861	arg_0		= dword	ptr  4
cseg01:C0000861	arg_4		= dword	ptr  8
cseg01:C0000861
cseg01:C0000861			push	ebx
cseg01:C0000862			push	esi
cseg01:C0000863			push	edi
cseg01:C0000864			push	ebp
cseg01:C0000865			mov	esi, [esp+10h+arg_4]
cseg01:C0000869			xor	ebx, ebx
cseg01:C000086B			push	offset dword_C00007AC
cseg01:C0000870			push	406h
cseg01:C0000875			push	15ADh
cseg01:C000087A			call	sub_C0000F51
cseg01:C000087F			add	esp, 0Ch
cseg01:C0000882			test	eax, eax
cseg01:C0000884			jz	short loc_C0000895
cseg01:C0000886			mov	ds:dword_C0000808, 40615ADh
cseg01:C0000890			mov	ebx, 1
cseg01:C0000895
cseg01:C0000895	loc_C0000895:				; CODE XREF: sub_C0000861+23j
cseg01:C0000895			push	offset dword_C00007AC
cseg01:C000089A			push	405h
cseg01:C000089F			push	15ADh
cseg01:C00008A4			call	sub_C0000F51
cseg01:C00008A9			add	esp, 0Ch
cseg01:C00008AC			test	eax, eax
cseg01:C00008AE			jz	short loc_C00008BF
cseg01:C00008B0			mov	ds:dword_C0000808, 40515ADh
cseg01:C00008BA			mov	ebx, 1
cseg01:C00008BF
cseg01:C00008BF	loc_C00008BF:				; CODE XREF: sub_C0000861+4Dj
cseg01:C00008BF			push	offset dword_C00007AC
cseg01:C00008C4			push	0BEEFh
cseg01:C00008C9			push	80EEh
cseg01:C00008CE			call	sub_C0000F51
cseg01:C00008D3			add	esp, 0Ch
cseg01:C00008D6			test	eax, eax
cseg01:C00008D8			jz	short loc_C00008FA
cseg01:C00008DA			push	offset dword_C00007AC
cseg01:C00008DF			call	sub_C0001074
cseg01:C00008E4			add	esp, 4
cseg01:C00008E7			cmp	eax, 40515ADh
cseg01:C00008EC			jnz	short loc_C00008FA
cseg01:C00008EE			mov	ds:dword_C0000808, 0BEEF80EEh
cseg01:C00008F8			jmp	short loc_C0000908
cseg01:C00008FA	; ---------------------------------------------------------------------------
cseg01:C00008FA
cseg01:C00008FA	loc_C00008FA:				; CODE XREF: sub_C0000861+77j
cseg01:C00008FA						; sub_C0000861+8Bj
cseg01:C00008FA			test	ebx, ebx
cseg01:C00008FC			jnz	short loc_C0000908
cseg01:C00008FE			mov	eax, 1
cseg01:C0000903			pop	ebp
cseg01:C0000904			pop	edi
cseg01:C0000905			pop	esi
cseg01:C0000906			pop	ebx
cseg01:C0000907			retn
cseg01:C0000908	; ---------------------------------------------------------------------------
cseg01:C0000908
cseg01:C0000908	loc_C0000908:				; CODE XREF: sub_C0000861+97j
cseg01:C0000908						; sub_C0000861+9Bj
cseg01:C0000908			push	1
cseg01:C000090A			push	offset dword_C00007AC
cseg01:C000090F			call	sub_C0001084
cseg01:C0000914			add	esp, 8
cseg01:C0000917			cmp	word ptr ds:dword_C0000808+2, 0BEEFh
cseg01:C0000920			jnz	short loc_C0000963
cseg01:C0000922			push	0
cseg01:C0000924			push	offset dword_C00007AC
cseg01:C0000929			call	sub_C0000FBE
cseg01:C000092E			add	esp, 8
cseg01:C0000931			mov	ds:dword_C00007D4, eax
cseg01:C0000936			push	0
cseg01:C0000938			push	offset dword_C00007AC
cseg01:C000093D			call	sub_C0000FF5
cseg01:C0000942			add	esp, 8
cseg01:C0000945			mov	ds:dword_C00007D8, eax
cseg01:C000094A			push	1
cseg01:C000094C			push	offset dword_C00007AC
cseg01:C0000951			call	sub_C0000FBE
cseg01:C0000956			add	esp, 8
cseg01:C0000959			mov	ds:dword_C00007B0, eax
cseg01:C000095E			jmp	loc_C0000A05
cseg01:C0000963	; ---------------------------------------------------------------------------
cseg01:C0000963
cseg01:C0000963	loc_C0000963:				; CODE XREF: sub_C0000861+BFj
cseg01:C0000963			call	sub_C0000B98
cseg01:C0000968			test	eax, eax
cseg01:C000096A			jz	short loc_C00009CA
cseg01:C000096C			push	0
cseg01:C000096E			push	offset dword_C00007AC
cseg01:C0000973			call	sub_C0000FBE
cseg01:C0000978			add	esp, 8
cseg01:C000097B			mov	ds:dword_C0000810, eax
cseg01:C0000980			push	0
cseg01:C0000982			push	offset dword_C00007AC
cseg01:C0000987			call	sub_C0000FF5
cseg01:C000098C			add	esp, 8
cseg01:C000098F			mov	ds:dword_C0000814, eax
cseg01:C0000994			push	2
cseg01:C0000996			push	offset dword_C00007AC
cseg01:C000099B			call	sub_C0000FBE
cseg01:C00009A0			add	esp, 8
cseg01:C00009A3			mov	ds:dword_C00007D4, eax
cseg01:C00009A8			push	2
cseg01:C00009AA			push	offset dword_C00007AC
cseg01:C00009AF			call	sub_C0000FF5
cseg01:C00009B4			add	esp, 8
cseg01:C00009B7			mov	ds:dword_C00007D8, eax
cseg01:C00009BC			xor	eax, eax
cseg01:C00009BE			mov	ds:dword_C00007C8, eax
cseg01:C00009C3			mov	ds:dword_C00007B0, eax
cseg01:C00009C8			jmp	short loc_C0000A19
cseg01:C00009CA	; ---------------------------------------------------------------------------
cseg01:C00009CA
cseg01:C00009CA	loc_C00009CA:				; CODE XREF: sub_C0000861+109j
cseg01:C00009CA			push	eax
cseg01:C00009CB			push	offset dword_C00007AC
cseg01:C00009D0			call	sub_C0000FBE
cseg01:C00009D5			add	esp, 8
cseg01:C00009D8			mov	ds:dword_C00007B0, eax
cseg01:C00009DD			push	1
cseg01:C00009DF			push	offset dword_C00007AC
cseg01:C00009E4			call	sub_C0000FBE
cseg01:C00009E9			add	esp, 8
cseg01:C00009EC			mov	ds:dword_C00007D4, eax
cseg01:C00009F1			push	1
cseg01:C00009F3			push	offset dword_C00007AC
cseg01:C00009F8			call	sub_C0000FF5
cseg01:C00009FD			add	esp, 8
cseg01:C0000A00			mov	ds:dword_C00007D8, eax
cseg01:C0000A05
cseg01:C0000A05	loc_C0000A05:				; CODE XREF: sub_C0000861+FDj
cseg01:C0000A05			push	2
cseg01:C0000A07			push	offset dword_C00007AC
cseg01:C0000A0C			call	sub_C0000FBE
cseg01:C0000A11			add	esp, 8
cseg01:C0000A14			mov	ds:dword_C00007C8, eax
cseg01:C0000A19
cseg01:C0000A19	loc_C0000A19:				; CODE XREF: sub_C0000861+167j
cseg01:C0000A19			mov	ecx, ds:dword_C00007C8
cseg01:C0000A1F			push	ecx
cseg01:C0000A20			mov	ebx, ds:dword_C00007D4
cseg01:C0000A26			push	ebx
cseg01:C0000A27			mov	edi, ds:dword_C00007B0
cseg01:C0000A2D			push	edi
cseg01:C0000A2E			push	offset aPciBarsLxLxLx ;	"PCI bars: %lx %lx %lx\n"
cseg01:C0000A33			call	sub_C0002A03
cseg01:C0000A38			add	esp, 10h
cseg01:C0000A3B			call	sub_C000156E
cseg01:C0000A40			test	esi, esi
cseg01:C0000A42			jnz	short loc_C0000A5B
cseg01:C0000A44			cmp	word ptr ds:dword_C0000808+2, 406h
cseg01:C0000A4D			jnz	short loc_C0000A56
cseg01:C0000A4F			mov	esi, 3
cseg01:C0000A54			jmp	short loc_C0000A5B
cseg01:C0000A56	; ---------------------------------------------------------------------------
cseg01:C0000A56
cseg01:C0000A56	loc_C0000A56:				; CODE XREF: sub_C0000861+1ECj
cseg01:C0000A56			mov	esi, 2
cseg01:C0000A5B
cseg01:C0000A5B	loc_C0000A5B:				; CODE XREF: sub_C0000861+1E1j
cseg01:C0000A5B						; sub_C0000861+1F3j
cseg01:C0000A5B			or	esi, 90000000h
cseg01:C0000A61			mov	ds:dword_C00007DC, esi
cseg01:C0000A67
cseg01:C0000A67	loc_C0000A67:				; CODE XREF: sub_C0000861+23Aj
cseg01:C0000A67			mov	ebp, ds:dword_C00007DC
cseg01:C0000A6D			push	ebp
cseg01:C0000A6E			push	0
cseg01:C0000A70			call	sub_C0000CD3
cseg01:C0000A75			add	esp, 8
cseg01:C0000A78			push	0
cseg01:C0000A7A			call	sub_C0000C93
cseg01:C0000A7F			add	esp, 4
cseg01:C0000A82			mov	edx, ds:dword_C00007DC
cseg01:C0000A88			cmp	eax, edx
cseg01:C0000A8A			jz	short loc_C0000A9D
cseg01:C0000A8C			lea	ecx, [edx-1]
cseg01:C0000A8F			mov	ds:dword_C00007DC, ecx
cseg01:C0000A95			cmp	ecx, 90000000h
cseg01:C0000A9B			jnb	short loc_C0000A67
cseg01:C0000A9D
cseg01:C0000A9D	loc_C0000A9D:				; CODE XREF: sub_C0000861+229j
cseg01:C0000A9D			cmp	ds:dword_C00007DC, 90000000h
cseg01:C0000AA7			jnb	short loc_C0000AB3
cseg01:C0000AA9			mov	eax, 2
cseg01:C0000AAE			pop	ebp
cseg01:C0000AAF			pop	edi
cseg01:C0000AB0			pop	esi
cseg01:C0000AB1			pop	ebx
cseg01:C0000AB2			retn
cseg01:C0000AB3	; ---------------------------------------------------------------------------
cseg01:C0000AB3
cseg01:C0000AB3	loc_C0000AB3:				; CODE XREF: sub_C0000861+246j
cseg01:C0000AB3			push	13h
cseg01:C0000AB5			call	sub_C0000C93
cseg01:C0000ABA			add	esp, 4
cseg01:C0000ABD			mov	ds:dword_C00007BC, eax
cseg01:C0000AC2			push	10h
cseg01:C0000AC4			call	sub_C0000C93
cseg01:C0000AC9			add	esp, 4
cseg01:C0000ACC			mov	ds:dword_C00007CC, eax
cseg01:C0000AD1			cmp	eax, 100000h
cseg01:C0000AD6			jnb	short loc_C0000AE2
cseg01:C0000AD8			mov	eax, 4
cseg01:C0000ADD			pop	ebp
cseg01:C0000ADE			pop	edi
cseg01:C0000ADF			pop	esi
cseg01:C0000AE0			pop	ebx
cseg01:C0000AE1			retn
cseg01:C0000AE2	; ---------------------------------------------------------------------------
cseg01:C0000AE2
cseg01:C0000AE2	loc_C0000AE2:				; CODE XREF: sub_C0000861+275j
cseg01:C0000AE2			call	sub_C0000B98
cseg01:C0000AE7			test	eax, eax
cseg01:C0000AE9			jz	short loc_C0000B01
cseg01:C0000AEB			cmp	ds:dword_C00007BC, 20000h
cseg01:C0000AF5			jnb	short loc_C0000B01
cseg01:C0000AF7			mov	eax, 5
cseg01:C0000AFC			pop	ebp
cseg01:C0000AFD			pop	edi
cseg01:C0000AFE			pop	esi
cseg01:C0000AFF			pop	ebx
cseg01:C0000B00			retn
cseg01:C0000B01	; ---------------------------------------------------------------------------
cseg01:C0000B01
cseg01:C0000B01	loc_C0000B01:				; CODE XREF: sub_C0000861+288j
cseg01:C0000B01						; sub_C0000861+294j
cseg01:C0000B01			cmp	ds:dword_C00007DC, 90000001h
cseg01:C0000B0B			jb	short loc_C0000B1C
cseg01:C0000B0D			push	11h
cseg01:C0000B0F			call	sub_C0000C93
cseg01:C0000B14			add	esp, 4
cseg01:C0000B17			mov	ds:dword_C00007E0, eax
cseg01:C0000B1C
cseg01:C0000B1C	loc_C0000B1C:				; CODE XREF: sub_C0000861+2AAj
cseg01:C0000B1C			xor	eax, eax
cseg01:C0000B1E			mov	ds:dword_C000080C, eax
cseg01:C0000B23			push	1
cseg01:C0000B25			push	1
cseg01:C0000B27			call	sub_C0000CD3
cseg01:C0000B2C			add	esp, 8
cseg01:C0000B2F			push	1
cseg01:C0000B31			push	14h
cseg01:C0000B33			call	sub_C0000CD3
cseg01:C0000B38			add	esp, 8
cseg01:C0000B3B			push	8
cseg01:C0000B3D			push	7
cseg01:C0000B3F			call	sub_C0000CD3
cseg01:C0000B44			add	esp, 8
cseg01:C0000B47			push	14h
cseg01:C0000B49			call	sub_C0000C93
cseg01:C0000B4E			add	esp, 4
cseg01:C0000B51			test	eax, eax
cseg01:C0000B53			jnz	short loc_C0000B5C
cseg01:C0000B55			or	byte ptr ds:dword_C000080C, 1
cseg01:C0000B5C
cseg01:C0000B5C	loc_C0000B5C:				; CODE XREF: sub_C0000861+2F2j
cseg01:C0000B5C			push	0
cseg01:C0000B5E			push	1
cseg01:C0000B60			call	sub_C0000CD3
cseg01:C0000B65			add	esp, 8
cseg01:C0000B68			push	0
cseg01:C0000B6A			push	14h
cseg01:C0000B6C			call	sub_C0000CD3
cseg01:C0000B71			add	esp, 8
cseg01:C0000B74			cmp	[esp+10h+arg_0], 0
cseg01:C0000B79			jz	short loc_C0000B80
cseg01:C0000B7B			call	sub_C0000BA8
cseg01:C0000B80
cseg01:C0000B80	loc_C0000B80:				; CODE XREF: sub_C0000861+318j
cseg01:C0000B80			push	4
cseg01:C0000B82			push	74h
cseg01:C0000B84			push	offset aSizeOfGsvga1DD ; "Size of gSVGA(1) = %d	%d\n"
cseg01:C0000B89			call	sub_C0002A03
cseg01:C0000B8E			add	esp, 0Ch
cseg01:C0000B91			xor	eax, eax
cseg01:C0000B93			pop	ebp
cseg01:C0000B94			pop	edi
cseg01:C0000B95			pop	esi
cseg01:C0000B96			pop	ebx
cseg01:C0000B97			retn
cseg01:C0000B97	sub_C0000861	endp
cseg01:C0000B97
cseg01:C0000B98
cseg01:C0000B98	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000B98
cseg01:C0000B98
cseg01:C0000B98	sub_C0000B98	proc near		; CODE XREF: sub_C0000861:loc_C0000963p
cseg01:C0000B98						; sub_C0000861:loc_C0000AE2p ...
cseg01:C0000B98			cmp	word ptr ds:dword_C0000808+2, 406h
cseg01:C0000BA1			setz	al
cseg01:C0000BA4			movzx	eax, al
cseg01:C0000BA7			retn
cseg01:C0000BA7	sub_C0000B98	endp
cseg01:C0000BA7
cseg01:C0000BA8
cseg01:C0000BA8	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000BA8
cseg01:C0000BA8
cseg01:C0000BA8	sub_C0000BA8	proc near		; CODE XREF: sub_C0000861+31Ap
cseg01:C0000BA8						; sub_C00019F5+26Fp
cseg01:C0000BA8			mov	eax, ds:dword_C00007B4
cseg01:C0000BAD			mov	dword ptr [eax], 48Ch
cseg01:C0000BB3			mov	eax, ds:dword_C00007B4
cseg01:C0000BB8			mov	edx, ds:dword_C00007BC
cseg01:C0000BBE			mov	[eax+4], edx
cseg01:C0000BC1			mov	eax, ds:dword_C00007B4
cseg01:C0000BC6			mov	edx, [eax]
cseg01:C0000BC8			mov	[eax+8], edx
cseg01:C0000BCB			mov	eax, ds:dword_C00007B4
cseg01:C0000BD0			mov	edx, [eax]
cseg01:C0000BD2			mov	[eax+0Ch], edx
cseg01:C0000BD5			push	8000h
cseg01:C0000BDA			call	sub_C0000D34
cseg01:C0000BDF			add	esp, 4
cseg01:C0000BE2			test	eax, eax
cseg01:C0000BE4			jz	short loc_C0000C06
cseg01:C0000BE6			push	120h
cseg01:C0000BEB			call	sub_C0000D1F
cseg01:C0000BF0			add	esp, 4
cseg01:C0000BF3			test	eax, eax
cseg01:C0000BF5			jz	short loc_C0000C06
cseg01:C0000BF7			mov	eax, ds:dword_C00007B4
cseg01:C0000BFC			mov	dword ptr [eax+480h], 20001h
cseg01:C0000C06
cseg01:C0000C06	loc_C0000C06:				; CODE XREF: sub_C0000BA8+3Cj
cseg01:C0000C06						; sub_C0000BA8+4Dj
cseg01:C0000C06			push	1
cseg01:C0000C08			push	1
cseg01:C0000C0A			call	sub_C0000CD3
cseg01:C0000C0F			add	esp, 8
cseg01:C0000C12			push	1
cseg01:C0000C14			push	14h
cseg01:C0000C16
cseg01:C0000C16	loc_C0000C16:				; CODE XREF: sub_C0002620-19FDj
cseg01:C0000C16			call	sub_C0000CD3
cseg01:C0000C1B			add	esp, 8
cseg01:C0000C1E			retn
cseg01:C0000C1E	sub_C0000BA8	endp
cseg01:C0000C1E
cseg01:C0000C1F	; ---------------------------------------------------------------------------
cseg01:C0000C1F	; START	OF FUNCTION CHUNK FOR sub_C0002620
cseg01:C0000C1F
cseg01:C0000C1F	loc_C0000C1F:				; CODE XREF: sub_C0002620+5j
cseg01:C0000C1F			push	0
cseg01:C0000C21			push	1
cseg01:C0000C23			jmp	short loc_C0000C16
cseg01:C0000C23	; END OF FUNCTION CHUNK	FOR sub_C0002620
cseg01:C0000C25
cseg01:C0000C25	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000C25
cseg01:C0000C25
cseg01:C0000C25	sub_C0000C25	proc near		; CODE XREF: sub_C0002353+37p
cseg01:C0000C25
cseg01:C0000C25	arg_0		= dword	ptr  4
cseg01:C0000C25	arg_4		= dword	ptr  8
cseg01:C0000C25	arg_8		= dword	ptr  0Ch
cseg01:C0000C25
cseg01:C0000C25			mov	eax, [esp+arg_0]
cseg01:C0000C29			mov	ds:dword_C00007E4, eax
cseg01:C0000C2E			mov	eax, [esp+arg_4]
cseg01:C0000C32			mov	ds:dword_C00007E8, eax
cseg01:C0000C37			mov	eax, [esp+arg_8]
cseg01:C0000C3B			mov	ds:dword_C00007EC, eax
cseg01:C0000C40			mov	eax, [esp+arg_0]
cseg01:C0000C44			push	eax
cseg01:C0000C45			push	2
cseg01:C0000C47			call	sub_C0000CD3
cseg01:C0000C4C			add	esp, 8
cseg01:C0000C4F			mov	edx, [esp+arg_4]
cseg01:C0000C53			push	edx
cseg01:C0000C54			push	3
cseg01:C0000C56			call	sub_C0000CD3
cseg01:C0000C5B			add	esp, 8
cseg01:C0000C5E			mov	ecx, [esp+arg_8]
cseg01:C0000C62			push	ecx
cseg01:C0000C63			push	7
cseg01:C0000C65			call	sub_C0000CD3
cseg01:C0000C6A			add	esp, 8
cseg01:C0000C6D			push	0Eh
cseg01:C0000C6F			call	sub_C0000C93
cseg01:C0000C74			add	esp, 4
cseg01:C0000C77			push	1
cseg01:C0000C79			push	1
cseg01:C0000C7B			call	sub_C0000CD3
cseg01:C0000C80			add	esp, 8
cseg01:C0000C83			push	0Ch
cseg01:C0000C85			call	sub_C0000C93
cseg01:C0000C8A			add	esp, 4
cseg01:C0000C8D			mov	ds:dword_C00007F0, eax
cseg01:C0000C92			retn
cseg01:C0000C92	sub_C0000C25	endp
cseg01:C0000C92
cseg01:C0000C93
cseg01:C0000C93	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000C93
cseg01:C0000C93
cseg01:C0000C93	sub_C0000C93	proc near		; CODE XREF: sub_C0000861+219p
cseg01:C0000C93						; sub_C0000861+254p ...
cseg01:C0000C93
cseg01:C0000C93	arg_0		= dword	ptr  4
cseg01:C0000C93
cseg01:C0000C93			call	sub_C0000B98
cseg01:C0000C98			test	eax, eax
cseg01:C0000C9A			jz	short loc_C0000CAA
cseg01:C0000C9C			mov	eax, [esp+arg_0]
cseg01:C0000CA0			mov	edx, ds:dword_C000081C
cseg01:C0000CA6			mov	eax, [edx+eax*4]
cseg01:C0000CA9			retn
cseg01:C0000CAA	; ---------------------------------------------------------------------------
cseg01:C0000CAA
cseg01:C0000CAA	loc_C0000CAA:				; CODE XREF: sub_C0000C93+7j
cseg01:C0000CAA			mov	eax, [esp+arg_0]
cseg01:C0000CAE			push	eax
cseg01:C0000CAF			movzx	eax, word ptr ds:dword_C00007B0
cseg01:C0000CB6			push	eax
cseg01:C0000CB7			call	sub_C0000857
cseg01:C0000CBC			add	esp, 8
cseg01:C0000CBF			mov	ax, word ptr ds:dword_C00007B0
cseg01:C0000CC5			inc	eax
cseg01:C0000CC6			movzx	eax, ax
cseg01:C0000CC9			push	eax
cseg01:C0000CCA			call	sub_C0000851
cseg01:C0000CCF			add	esp, 4
cseg01:C0000CD2			retn
cseg01:C0000CD2	sub_C0000C93	endp
cseg01:C0000CD2
cseg01:C0000CD3
cseg01:C0000CD3	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000CD3
cseg01:C0000CD3
cseg01:C0000CD3	sub_C0000CD3	proc near		; CODE XREF: sub_C0000861+20Fp
cseg01:C0000CD3						; sub_C0000861+2C6p ...
cseg01:C0000CD3
cseg01:C0000CD3	arg_0		= dword	ptr  4
cseg01:C0000CD3	arg_4		= dword	ptr  8
cseg01:C0000CD3
cseg01:C0000CD3			call	sub_C0000B98
cseg01:C0000CD8			test	eax, eax
cseg01:C0000CDA			jz	short loc_C0000CF1
cseg01:C0000CDC			mov	edx, [esp+arg_0]
cseg01:C0000CE0			shl	edx, 2
cseg01:C0000CE3			mov	eax, ds:dword_C000081C
cseg01:C0000CE8			add	eax, edx
cseg01:C0000CEA			mov	edx, [esp+arg_4]
cseg01:C0000CEE			mov	[eax], edx
cseg01:C0000CF0			retn
cseg01:C0000CF1	; ---------------------------------------------------------------------------
cseg01:C0000CF1
cseg01:C0000CF1	loc_C0000CF1:				; CODE XREF: sub_C0000CD3+7j
cseg01:C0000CF1			mov	eax, [esp+arg_0]
cseg01:C0000CF5			push	eax
cseg01:C0000CF6			movzx	eax, word ptr ds:dword_C00007B0
cseg01:C0000CFD			push	eax
cseg01:C0000CFE			call	sub_C0000857
cseg01:C0000D03			add	esp, 8
cseg01:C0000D06			mov	edx, [esp+arg_4]
cseg01:C0000D0A			push	edx
cseg01:C0000D0B			mov	ax, word ptr ds:dword_C00007B0
cseg01:C0000D11			inc	eax
cseg01:C0000D12			movzx	eax, ax
cseg01:C0000D15			push	eax
cseg01:C0000D16			call	sub_C0000857
cseg01:C0000D1B			add	esp, 8
cseg01:C0000D1E			retn
cseg01:C0000D1E	sub_C0000CD3	endp
cseg01:C0000D1E
cseg01:C0000D1F
cseg01:C0000D1F	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000D1F
cseg01:C0000D1F
cseg01:C0000D1F	sub_C0000D1F	proc near		; CODE XREF: sub_C0000BA8+43p
cseg01:C0000D1F						; cseg01:C0000D4Cp
cseg01:C0000D1F
cseg01:C0000D1F	arg_0		= dword	ptr  4
cseg01:C0000D1F
cseg01:C0000D1F			mov	eax, ds:dword_C00007B4
cseg01:C0000D24			mov	edx, [esp+arg_0]
cseg01:C0000D28			shl	edx, 2
cseg01:C0000D2B			cmp	edx, [eax]
cseg01:C0000D2D			setb	al
cseg01:C0000D30			movzx	eax, al
cseg01:C0000D33			retn
cseg01:C0000D33	sub_C0000D1F	endp
cseg01:C0000D33
cseg01:C0000D34
cseg01:C0000D34	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000D34
cseg01:C0000D34
cseg01:C0000D34	sub_C0000D34	proc near		; CODE XREF: sub_C0000BA8+32p
cseg01:C0000D34						; sub_C000213B+5p ...
cseg01:C0000D34
cseg01:C0000D34	arg_0		= dword	ptr  4
cseg01:C0000D34
cseg01:C0000D34			mov	eax, ds:dword_C00007B4
cseg01:C0000D39			mov	eax, [eax+10h]
cseg01:C0000D3C			test	[esp+arg_0], eax
cseg01:C0000D40			setnz	al
cseg01:C0000D43			movzx	eax, al
cseg01:C0000D46			retn
cseg01:C0000D46	sub_C0000D34	endp
cseg01:C0000D46
cseg01:C0000D47	; ---------------------------------------------------------------------------
cseg01:C0000D47			push	122h
cseg01:C0000D4C			call	sub_C0000D1F
cseg01:C0000D51			add	esp, 4
cseg01:C0000D54			test	eax, eax
cseg01:C0000D56			jz	short locret_C0000D7C
cseg01:C0000D58			mov	eax, ds:dword_C00007B4
cseg01:C0000D5D			cmp	dword ptr [eax+488h], 0
cseg01:C0000D64			jnz	short locret_C0000D7C
cseg01:C0000D66			mov	dword ptr [eax+488h], 1
cseg01:C0000D70			push	1
cseg01:C0000D72			push	15h
cseg01:C0000D74			call	sub_C0000CD3
cseg01:C0000D79			add	esp, 8
cseg01:C0000D7C
cseg01:C0000D7C	locret_C0000D7C:			; CODE XREF: cseg01:C0000D56j
cseg01:C0000D7C						; cseg01:C0000D64j
cseg01:C0000D7C			retn
cseg01:C0000D7D
cseg01:C0000D7D	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000D7D
cseg01:C0000D7D
cseg01:C0000D7D	sub_C0000D7D	proc near		; CODE XREF: sub_C000179A+9p
cseg01:C0000D7D						; sub_C0001D48:loc_C0002020p ...
cseg01:C0000D7D			push	1
cseg01:C0000D7F			push	15h
cseg01:C0000D81			call	sub_C0000CD3
cseg01:C0000D86			add	esp, 8
cseg01:C0000D89
cseg01:C0000D89	loc_C0000D89:				; CODE XREF: sub_C0000D7D+18j
cseg01:C0000D89			push	16h
cseg01:C0000D8B			call	sub_C0000C93
cseg01:C0000D90			add	esp, 4
cseg01:C0000D93			test	eax, eax
cseg01:C0000D95			jnz	short loc_C0000D89
cseg01:C0000D97			retn
cseg01:C0000D97	sub_C0000D7D	endp
cseg01:C0000D97
cseg01:C0000D98
cseg01:C0000D98	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000D98
cseg01:C0000D98
cseg01:C0000D98	sub_C0000D98	proc near		; CODE XREF: sub_C0000DC1+Bp
cseg01:C0000D98						; sub_C0000DF0+Bp ...
cseg01:C0000D98
cseg01:C0000D98	arg_0		= dword	ptr  4
cseg01:C0000D98	arg_4		= word ptr  8
cseg01:C0000D98
cseg01:C0000D98			mov	eax, [esp+arg_0]
cseg01:C0000D9C			movzx	edx, byte ptr [eax+1]
cseg01:C0000DA0			shl	edx, 0Bh
cseg01:C0000DA3			movzx	ecx, byte ptr [eax]
cseg01:C0000DA6			shl	ecx, 10h
cseg01:C0000DA9			or	edx, ecx
cseg01:C0000DAB			movzx	eax, byte ptr [eax+2]
cseg01:C0000DAF			shl	eax, 8
cseg01:C0000DB2			or	edx, eax
cseg01:C0000DB4			movzx	eax, [esp+arg_4]
cseg01:C0000DB9			or	eax, edx
cseg01:C0000DBB			or	eax, 80000000h
cseg01:C0000DC0			retn
cseg01:C0000DC0	sub_C0000D98	endp
cseg01:C0000DC0
cseg01:C0000DC1
cseg01:C0000DC1	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000DC1
cseg01:C0000DC1
cseg01:C0000DC1	sub_C0000DC1	proc near		; CODE XREF: sub_C0000EE0+Ep
cseg01:C0000DC1						; sub_C0000FBE+15p ...
cseg01:C0000DC1
cseg01:C0000DC1	arg_0		= dword	ptr  4
cseg01:C0000DC1	arg_4		= word ptr  8
cseg01:C0000DC1
cseg01:C0000DC1			movzx	eax, [esp+arg_4]
cseg01:C0000DC6			push	eax
cseg01:C0000DC7			mov	eax, [esp+4+arg_0]
cseg01:C0000DCB			push	eax
cseg01:C0000DCC			call	sub_C0000D98
cseg01:C0000DD1			add	esp, 8
cseg01:C0000DD4			push	eax
cseg01:C0000DD5			push	0CF8h
cseg01:C0000DDA			call	sub_C0000022
cseg01:C0000DDF			add	esp, 8
cseg01:C0000DE2			push	0CFCh
cseg01:C0000DE7			call	sub_C000001C
cseg01:C0000DEC			add	esp, 4
cseg01:C0000DEF			retn
cseg01:C0000DEF	sub_C0000DC1	endp
cseg01:C0000DEF
cseg01:C0000DF0
cseg01:C0000DF0	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000DF0
cseg01:C0000DF0
cseg01:C0000DF0	sub_C0000DF0	proc near		; CODE XREF: sub_C0001084+7p
cseg01:C0000DF0
cseg01:C0000DF0	arg_0		= dword	ptr  4
cseg01:C0000DF0	arg_4		= word ptr  8
cseg01:C0000DF0
cseg01:C0000DF0			movzx	eax, [esp+arg_4]
cseg01:C0000DF5			push	eax
cseg01:C0000DF6			mov	eax, [esp+4+arg_0]
cseg01:C0000DFA			push	eax
cseg01:C0000DFB			call	sub_C0000D98
cseg01:C0000E00			add	esp, 8
cseg01:C0000E03			push	eax
cseg01:C0000E04			push	0CF8h
cseg01:C0000E09			call	sub_C0000022
cseg01:C0000E0E			add	esp, 8
cseg01:C0000E11			push	0CFCh
cseg01:C0000E16			call	sub_C000002C
cseg01:C0000E1B			add	esp, 4
cseg01:C0000E1E			retn
cseg01:C0000E1E	sub_C0000DF0	endp
cseg01:C0000E1E
cseg01:C0000E1F	; ---------------------------------------------------------------------------
cseg01:C0000E1F			movzx	eax, word ptr [esp+8]
cseg01:C0000E24			push	eax
cseg01:C0000E25			mov	eax, [esp+8]
cseg01:C0000E29			push	eax
cseg01:C0000E2A			call	sub_C0000D98
cseg01:C0000E2F			add	esp, 8
cseg01:C0000E32			push	eax
cseg01:C0000E33			push	0CF8h
cseg01:C0000E38			call	sub_C0000022
cseg01:C0000E3D			add	esp, 8
cseg01:C0000E40			push	0CFCh
cseg01:C0000E45			call	sub_C000003E
cseg01:C0000E4A			add	esp, 4
cseg01:C0000E4D			retn
cseg01:C0000E4E
cseg01:C0000E4E	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000E4E
cseg01:C0000E4E
cseg01:C0000E4E	sub_C0000E4E	proc near		; CODE XREF: cseg01:C0000FB5p
cseg01:C0000E4E						; sub_C0000FF5+4Ap ...
cseg01:C0000E4E
cseg01:C0000E4E	arg_0		= dword	ptr  4
cseg01:C0000E4E	arg_4		= word ptr  8
cseg01:C0000E4E	arg_8		= dword	ptr  0Ch
cseg01:C0000E4E
cseg01:C0000E4E			movzx	eax, [esp+arg_4]
cseg01:C0000E53			push	eax
cseg01:C0000E54			mov	eax, [esp+4+arg_0]
cseg01:C0000E58			push	eax
cseg01:C0000E59			call	sub_C0000D98
cseg01:C0000E5E			add	esp, 8
cseg01:C0000E61			push	eax
cseg01:C0000E62			push	0CF8h
cseg01:C0000E67			call	sub_C0000022
cseg01:C0000E6C			add	esp, 8
cseg01:C0000E6F			mov	edx, [esp+arg_8]
cseg01:C0000E73			push	edx
cseg01:C0000E74
cseg01:C0000E74	loc_C0000E74:				; CODE XREF: cseg01:C0000EDEj
cseg01:C0000E74			push	0CFCh
cseg01:C0000E79			call	sub_C0000022
cseg01:C0000E7E			add	esp, 8
cseg01:C0000E81			retn
cseg01:C0000E81	sub_C0000E4E	endp
cseg01:C0000E81
cseg01:C0000E82
cseg01:C0000E82	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000E82
cseg01:C0000E82
cseg01:C0000E82	sub_C0000E82	proc near		; CODE XREF: sub_C0001084+27p
cseg01:C0000E82
cseg01:C0000E82	arg_0		= dword	ptr  4
cseg01:C0000E82	arg_4		= word ptr  8
cseg01:C0000E82	arg_8		= word ptr  0Ch
cseg01:C0000E82
cseg01:C0000E82			movzx	eax, [esp+arg_4]
cseg01:C0000E87			push	eax
cseg01:C0000E88			mov	eax, [esp+4+arg_0]
cseg01:C0000E8C			push	eax
cseg01:C0000E8D			call	sub_C0000D98
cseg01:C0000E92			add	esp, 8
cseg01:C0000E95			push	eax
cseg01:C0000E96			push	0CF8h
cseg01:C0000E9B			call	sub_C0000022
cseg01:C0000EA0			add	esp, 8
cseg01:C0000EA3			movzx	eax, [esp+arg_8]
cseg01:C0000EA8			push	eax
cseg01:C0000EA9			push	0CFCh
cseg01:C0000EAE			call	sub_C0000033
cseg01:C0000EB3			add	esp, 8
cseg01:C0000EB6			retn
cseg01:C0000EB6	sub_C0000E82	endp
cseg01:C0000EB6
cseg01:C0000EB7	; ---------------------------------------------------------------------------
cseg01:C0000EB7			movzx	eax, word ptr [esp+8]
cseg01:C0000EBC			push	eax
cseg01:C0000EBD			mov	eax, [esp+8]
cseg01:C0000EC1			push	eax
cseg01:C0000EC2			call	sub_C0000D98
cseg01:C0000EC7			add	esp, 8
cseg01:C0000ECA			push	eax
cseg01:C0000ECB			push	0CF8h
cseg01:C0000ED0			call	sub_C0000022
cseg01:C0000ED5			add	esp, 8
cseg01:C0000ED8			movzx	eax, byte ptr [esp+0Ch]
cseg01:C0000EDD			push	eax
cseg01:C0000EDE			jmp	short loc_C0000E74
cseg01:C0000EE0
cseg01:C0000EE0	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000EE0
cseg01:C0000EE0
cseg01:C0000EE0	sub_C0000EE0	proc near		; CODE XREF: sub_C0000F51+17p
cseg01:C0000EE0
cseg01:C0000EE0	var_8		= dword	ptr -8
cseg01:C0000EE0	arg_0		= dword	ptr  4
cseg01:C0000EE0
cseg01:C0000EE0			push	ebx
cseg01:C0000EE1			sub	esp, 4
cseg01:C0000EE4			mov	ebx, [esp+8+arg_0]
cseg01:C0000EE8
cseg01:C0000EE8	loc_C0000EE8:				; CODE XREF: sub_C0000EE0+57j
cseg01:C0000EE8			push	0
cseg01:C0000EEA			lea	eax, [ebx+4]
cseg01:C0000EED			push	eax
cseg01:C0000EEE			call	sub_C0000DC1
cseg01:C0000EF3			add	esp, 8
cseg01:C0000EF6			mov	[esp+8+var_8], eax
cseg01:C0000EF9			mov	eax, [ebx+4]
cseg01:C0000EFC			mov	[ebx+8], eax
cseg01:C0000EFF			mov	al, [ebx+6]
cseg01:C0000F02			inc	al
cseg01:C0000F04			mov	[ebx+6], al
cseg01:C0000F07			cmp	al, 8
cseg01:C0000F09			jnz	short loc_C0000F33
cseg01:C0000F0B			mov	byte ptr [ebx+6], 0
cseg01:C0000F0F			mov	dl, [ebx+5]
cseg01:C0000F12			inc	dl
cseg01:C0000F14			mov	[ebx+5], dl
cseg01:C0000F17			cmp	dl, 20h
cseg01:C0000F1A			jnz	short loc_C0000F33
cseg01:C0000F1C			mov	byte ptr [ebx+5], 0
cseg01:C0000F20			mov	cl, [ebx+4]
cseg01:C0000F23			inc	cl
cseg01:C0000F25			mov	[ebx+4], cl
cseg01:C0000F28			cmp	cl, dl
cseg01:C0000F2A			jnz	short loc_C0000F33
cseg01:C0000F2C			xor	eax, eax
cseg01:C0000F2E			add	esp, 4
cseg01:C0000F31			pop	ebx
cseg01:C0000F32			retn
cseg01:C0000F33	; ---------------------------------------------------------------------------
cseg01:C0000F33
cseg01:C0000F33	loc_C0000F33:				; CODE XREF: sub_C0000EE0+29j
cseg01:C0000F33						; sub_C0000EE0+3Aj ...
cseg01:C0000F33			cmp	[esp+8+var_8], 0FFFFFFFFh
cseg01:C0000F37			jz	short loc_C0000EE8
cseg01:C0000F39			mov	eax, [esp+8+var_8]
cseg01:C0000F3C			mov	[ebx], ax
cseg01:C0000F3F			mov	eax, [esp+8+var_8+2]
cseg01:C0000F43			mov	[ebx+2], ax
cseg01:C0000F47			mov	eax, 1
cseg01:C0000F4C			add	esp, 4
cseg01:C0000F4F			pop	ebx
cseg01:C0000F50			retn
cseg01:C0000F50	sub_C0000EE0	endp
cseg01:C0000F50
cseg01:C0000F51
cseg01:C0000F51	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000F51
cseg01:C0000F51
cseg01:C0000F51	sub_C0000F51	proc near		; CODE XREF: sub_C0000861+19p
cseg01:C0000F51						; sub_C0000861+43p ...
cseg01:C0000F51
cseg01:C0000F51	var_18		= word ptr -18h
cseg01:C0000F51	var_16		= dword	ptr -16h
cseg01:C0000F51	var_10		= dword	ptr -10h
cseg01:C0000F51	arg_0		= dword	ptr  4
cseg01:C0000F51	arg_4		= word ptr  8
cseg01:C0000F51	arg_8		= dword	ptr  0Ch
cseg01:C0000F51
cseg01:C0000F51			push	ebx
cseg01:C0000F52			push	esi
cseg01:C0000F53			push	edi
cseg01:C0000F54			sub	esp, 0Ch
cseg01:C0000F57			mov	ebx, [esp+18h+arg_0]
cseg01:C0000F5B			mov	edi, esp
cseg01:C0000F5D			mov	esi, offset dword_C0000010
cseg01:C0000F62			movsd
cseg01:C0000F63			movsd
cseg01:C0000F64			movsd
cseg01:C0000F65
cseg01:C0000F65	loc_C0000F65:				; CODE XREF: sub_C0000F51+27j
cseg01:C0000F65						; sub_C0000F51+32j
cseg01:C0000F65			mov	eax, esp
cseg01:C0000F67			push	eax
cseg01:C0000F68			call	sub_C0000EE0
cseg01:C0000F6D			add	esp, 4
cseg01:C0000F70			test	eax, eax
cseg01:C0000F72			jz	short loc_C0000F94
cseg01:C0000F74			cmp	bx, [esp+18h+var_18]
cseg01:C0000F78			jnz	short loc_C0000F65
cseg01:C0000F7A			mov	eax, [esp+18h+var_16]
cseg01:C0000F7E			cmp	ax, [esp+18h+arg_4]
cseg01:C0000F83			jnz	short loc_C0000F65
cseg01:C0000F85			mov	eax, [esp+18h+var_10]
cseg01:C0000F89			mov	edx, [esp+18h+arg_8]
cseg01:C0000F8D			mov	[edx], eax
cseg01:C0000F8F			mov	eax, 1
cseg01:C0000F94
cseg01:C0000F94	loc_C0000F94:				; CODE XREF: sub_C0000F51+21j
cseg01:C0000F94			add	esp, 0Ch
cseg01:C0000F97			pop	edi
cseg01:C0000F98			pop	esi
cseg01:C0000F99			pop	ebx
cseg01:C0000F9A			retn
cseg01:C0000F9A	sub_C0000F51	endp
cseg01:C0000F9A
cseg01:C0000F9B	; ---------------------------------------------------------------------------
cseg01:C0000F9B			mov	eax, [esp+0Ch]
cseg01:C0000F9F			push	eax
cseg01:C0000FA0			mov	eax, [esp+0Ch]
cseg01:C0000FA4			shl	eax, 2
cseg01:C0000FA7			add	eax, 10h
cseg01:C0000FAC			movzx	eax, ax
cseg01:C0000FAF			push	eax
cseg01:C0000FB0			mov	edx, [esp+0Ch]
cseg01:C0000FB4			push	edx
cseg01:C0000FB5			call	sub_C0000E4E
cseg01:C0000FBA			add	esp, 0Ch
cseg01:C0000FBD			retn
cseg01:C0000FBE
cseg01:C0000FBE	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000FBE
cseg01:C0000FBE
cseg01:C0000FBE	sub_C0000FBE	proc near		; CODE XREF: sub_C0000861+C8p
cseg01:C0000FBE						; sub_C0000861+F0p ...
cseg01:C0000FBE
cseg01:C0000FBE	arg_0		= dword	ptr  4
cseg01:C0000FBE	arg_4		= dword	ptr  8
cseg01:C0000FBE
cseg01:C0000FBE			mov	eax, [esp+arg_4]
cseg01:C0000FC2			shl	eax, 2
cseg01:C0000FC5			add	eax, 10h
cseg01:C0000FCA			movzx	eax, ax
cseg01:C0000FCD			push	eax
cseg01:C0000FCE			mov	eax, [esp+4+arg_0]
cseg01:C0000FD2			push	eax
cseg01:C0000FD3			call	sub_C0000DC1
cseg01:C0000FD8			add	esp, 8
cseg01:C0000FDB			mov	edx, eax
cseg01:C0000FDD			test	al, 1
cseg01:C0000FDF			jz	short loc_C0000FEB
cseg01:C0000FE1			mov	eax, 3
cseg01:C0000FE6			not	eax
cseg01:C0000FE8			and	eax, edx
cseg01:C0000FEA			retn
cseg01:C0000FEB	; ---------------------------------------------------------------------------
cseg01:C0000FEB
cseg01:C0000FEB	loc_C0000FEB:				; CODE XREF: sub_C0000FBE+21j
cseg01:C0000FEB			mov	eax, 0Fh
cseg01:C0000FF0			not	eax
cseg01:C0000FF2			and	eax, edx
cseg01:C0000FF4			retn
cseg01:C0000FF4	sub_C0000FBE	endp
cseg01:C0000FF4
cseg01:C0000FF5
cseg01:C0000FF5	; =============== S U B	R O U T	I N E =======================================
cseg01:C0000FF5
cseg01:C0000FF5
cseg01:C0000FF5	sub_C0000FF5	proc near		; CODE XREF: sub_C0000861+DCp
cseg01:C0000FF5						; sub_C0000861+126p ...
cseg01:C0000FF5
cseg01:C0000FF5	arg_0		= dword	ptr  4
cseg01:C0000FF5	arg_4		= dword	ptr  8
cseg01:C0000FF5
cseg01:C0000FF5			push	ebx
cseg01:C0000FF6			push	esi
cseg01:C0000FF7			push	edi
cseg01:C0000FF8			push	ebp
cseg01:C0000FF9			mov	eax, [esp+10h+arg_4]
cseg01:C0000FFD			shl	eax, 2
cseg01:C0001000			add	eax, 10h
cseg01:C0001005			movzx	eax, ax
cseg01:C0001008			push	eax
cseg01:C0001009			mov	eax, [esp+14h+arg_0]
cseg01:C000100D			push	eax
cseg01:C000100E			call	sub_C0000DC1
cseg01:C0001013			add	esp, 8
cseg01:C0001016			mov	ebp, eax
cseg01:C0001018			test	al, 1
cseg01:C000101A			jz	short loc_C0001023
cseg01:C000101C			mov	edi, 3
cseg01:C0001021			jmp	short loc_C0001028
cseg01:C0001023	; ---------------------------------------------------------------------------
cseg01:C0001023
cseg01:C0001023	loc_C0001023:				; CODE XREF: sub_C0000FF5+25j
cseg01:C0001023			mov	edi, 0Fh
cseg01:C0001028
cseg01:C0001028	loc_C0001028:				; CODE XREF: sub_C0000FF5+2Cj
cseg01:C0001028			push	0FFFFFFFFh
cseg01:C000102A			mov	eax, [esp+14h+arg_4]
cseg01:C000102E			shl	eax, 2
cseg01:C0001031			add	eax, 10h
cseg01:C0001036			movzx	ebx, ax
cseg01:C0001039			push	ebx
cseg01:C000103A			mov	edx, [esp+18h+arg_0]
cseg01:C000103E			push	edx
cseg01:C000103F			call	sub_C0000E4E
cseg01:C0001044			add	esp, 0Ch
cseg01:C0001047			push	ebx
cseg01:C0001048			mov	ecx, [esp+14h+arg_0]
cseg01:C000104C			push	ecx
cseg01:C000104D			call	sub_C0000DC1
cseg01:C0001052			mov	esi, eax
cseg01:C0001054			add	esp, 8
cseg01:C0001057			push	ebp
cseg01:C0001058			push	ebx
cseg01:C0001059			mov	ebx, [esp+18h+arg_0]
cseg01:C000105D			push	ebx
cseg01:C000105E			call	sub_C0000E4E
cseg01:C0001063			add	esp, 0Ch
cseg01:C0001066			not	edi
cseg01:C0001068			mov	eax, esi
cseg01:C000106A			and	eax, edi
cseg01:C000106C			not	eax
cseg01:C000106E			inc	eax
cseg01:C000106F			pop	ebp
cseg01:C0001070			pop	edi
cseg01:C0001071			pop	esi
cseg01:C0001072			pop	ebx
cseg01:C0001073			retn
cseg01:C0001073	sub_C0000FF5	endp
cseg01:C0001073
cseg01:C0001074
cseg01:C0001074	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001074
cseg01:C0001074
cseg01:C0001074	sub_C0001074	proc near		; CODE XREF: sub_C0000861+7Ep
cseg01:C0001074
cseg01:C0001074	arg_0		= dword	ptr  4
cseg01:C0001074
cseg01:C0001074			push	2Ch
cseg01:C0001076			mov	eax, [esp+4+arg_0]
cseg01:C000107A			push	eax
cseg01:C000107B			call	sub_C0000DC1
cseg01:C0001080			add	esp, 8
cseg01:C0001083			retn
cseg01:C0001083	sub_C0001074	endp
cseg01:C0001083
cseg01:C0001084
cseg01:C0001084	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001084
cseg01:C0001084
cseg01:C0001084	sub_C0001084	proc near		; CODE XREF: sub_C0000861+AEp
cseg01:C0001084
cseg01:C0001084	arg_0		= dword	ptr  4
cseg01:C0001084	arg_4		= dword	ptr  8
cseg01:C0001084
cseg01:C0001084			push	4
cseg01:C0001086			mov	eax, [esp+4+arg_0]
cseg01:C000108A			push	eax
cseg01:C000108B			call	sub_C0000DF0
cseg01:C0001090			add	esp, 8
cseg01:C0001093			cmp	[esp+arg_4], 0
cseg01:C0001098			jz	short loc_C000109E
cseg01:C000109A			or	al, 7
cseg01:C000109C			jmp	short loc_C00010A0
cseg01:C000109E	; ---------------------------------------------------------------------------
cseg01:C000109E
cseg01:C000109E	loc_C000109E:				; CODE XREF: sub_C0001084+14j
cseg01:C000109E			and	al, 0F8h
cseg01:C00010A0
cseg01:C00010A0	loc_C00010A0:				; CODE XREF: sub_C0001084+18j
cseg01:C00010A0			movzx	eax, ax
cseg01:C00010A3			push	eax
cseg01:C00010A4			push	4
cseg01:C00010A6			mov	ecx, [esp+8+arg_0]
cseg01:C00010AA			push	ecx
cseg01:C00010AB			call	sub_C0000E82
cseg01:C00010B0			add	esp, 0Ch
cseg01:C00010B3			retn
cseg01:C00010B3	sub_C0001084	endp
cseg01:C00010B3
cseg01:C00010B3	; ---------------------------------------------------------------------------
cseg01:C00010B4	dword_C00010B4	dd 0			; DATA XREF: sub_C00010BC+1Bw
cseg01:C00010B4						; sub_C00010BC+31r ...
cseg01:C00010B8	dword_C00010B8	dd 0			; DATA XREF: sub_C00010BC+52w
cseg01:C00010B8						; cseg01:loc_C0001143r	...
cseg01:C00010BC
cseg01:C00010BC	; =============== S U B	R O U T	I N E =======================================
cseg01:C00010BC
cseg01:C00010BC
cseg01:C00010BC	sub_C00010BC	proc near		; CODE XREF: sub_C00019F5+7Dp
cseg01:C00010BC			push	8
cseg01:C00010BE			push	0
cseg01:C00010C0			push	100000h
cseg01:C00010C5			push	0
cseg01:C00010C7			push	0
cseg01:C00010C9			push	0
cseg01:C00010CB			push	1
cseg01:C00010CD			push	1
cseg01:C00010CF			call	sub_C000135A
cseg01:C00010D4			add	esp, 20h
cseg01:C00010D7			mov	ds:dword_C00010B4, eax
cseg01:C00010DC			test	eax, eax
cseg01:C00010DE			jz	short locret_C000112E
cseg01:C00010E0			push	3Ch
cseg01:C00010E2			push	0
cseg01:C00010E4			push	eax
cseg01:C00010E5			call	sub_C00011BA
cseg01:C00010EA			add	esp, 0Ch
cseg01:C00010ED			mov	eax, ds:dword_C00010B4
cseg01:C00010F2			mov	dword ptr [eax], 3Ch
cseg01:C00010F8			mov	eax, ds:dword_C00010B4
cseg01:C00010FD			mov	dword ptr [eax+4], 0
cseg01:C0001104			push	1
cseg01:C0001106			call	sub_C00012BB
cseg01:C000110B			add	esp, 4
cseg01:C000110E			mov	ds:dword_C00010B8, eax
cseg01:C0001113			test	eax, eax
cseg01:C0001115			jnz	short loc_C0001129
cseg01:C0001117			push	eax
cseg01:C0001118			mov	eax, ds:dword_C00010B4
cseg01:C000111D			push	eax
cseg01:C000111E			call	sub_C0001360
cseg01:C0001123			add	esp, 8
cseg01:C0001126			xor	eax, eax
cseg01:C0001128			retn
cseg01:C0001129	; ---------------------------------------------------------------------------
cseg01:C0001129
cseg01:C0001129	loc_C0001129:				; CODE XREF: sub_C00010BC+59j
cseg01:C0001129			mov	eax, 1
cseg01:C000112E
cseg01:C000112E	locret_C000112E:			; CODE XREF: sub_C00010BC+22j
cseg01:C000112E			retn
cseg01:C000112E	sub_C00010BC	endp
cseg01:C000112E
cseg01:C000112F	; ---------------------------------------------------------------------------
cseg01:C000112F			mov	eax, ds:dword_C00010B4
cseg01:C0001134			test	eax, eax
cseg01:C0001136			jz	short loc_C0001143
cseg01:C0001138			push	0
cseg01:C000113A			push	eax
cseg01:C000113B			call	sub_C0001360
cseg01:C0001140			add	esp, 8
cseg01:C0001143
cseg01:C0001143	loc_C0001143:				; CODE XREF: cseg01:C0001136j
cseg01:C0001143			mov	ecx, ds:dword_C00010B8
cseg01:C0001149			test	ecx, ecx
cseg01:C000114B			jz	short locret_C0001156
cseg01:C000114D			push	ecx
cseg01:C000114E			call	sub_C00012F2
cseg01:C0001153			add	esp, 4
cseg01:C0001156
cseg01:C0001156	locret_C0001156:			; CODE XREF: cseg01:C000114Bj
cseg01:C0001156			retn
cseg01:C0001157
cseg01:C0001157	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001157
cseg01:C0001157
cseg01:C0001157	sub_C0001157	proc near		; CODE XREF: sub_C000037B:loc_C0000425p
cseg01:C0001157						; sub_C000055F:loc_C000066Bp
cseg01:C0001157			mov	eax, ds:dword_C00010B4
cseg01:C000115C			retn
cseg01:C000115C	sub_C0001157	endp
cseg01:C000115C
cseg01:C000115D
cseg01:C000115D	; =============== S U B	R O U T	I N E =======================================
cseg01:C000115D
cseg01:C000115D
cseg01:C000115D	sub_C000115D	proc near		; CODE XREF: sub_C000037B+C3p
cseg01:C000115D						; sub_C000055F+116p ...
cseg01:C000115D			push	0
cseg01:C000115F			mov	eax, ds:dword_C00010B8
cseg01:C0001164			push	eax
cseg01:C0001165			call	sub_C000130F
cseg01:C000116A			add	esp, 8
cseg01:C000116D			retn
cseg01:C000116D	sub_C000115D	endp
cseg01:C000116D
cseg01:C000116E
cseg01:C000116E	; =============== S U B	R O U T	I N E =======================================
cseg01:C000116E
cseg01:C000116E
cseg01:C000116E	sub_C000116E	proc near		; CODE XREF: sub_C000037B:loc_C0000461p
cseg01:C000116E						; sub_C000055F:loc_C000069Dp
cseg01:C000116E			push	0
cseg01:C0001170			call	sub_C000115D
cseg01:C0001175			add	esp, 4
cseg01:C0001178			mov	eax, ds:dword_C00010B4
cseg01:C000117D			mov	edx, [eax+1Ch]
cseg01:C0001180			push	edx
cseg01:C0001181			push	0
cseg01:C0001183			mov	edx, [eax+20h]
cseg01:C0001186			push	edx
cseg01:C0001187			call	sub_C00011BA
cseg01:C000118C			add	esp, 0Ch
cseg01:C000118F			push	0
cseg01:C0001191			call	sub_C0002630
cseg01:C0001196			add	esp, 4
cseg01:C0001199			retn
cseg01:C0001199	sub_C000116E	endp
cseg01:C0001199
cseg01:C0001199	; ---------------------------------------------------------------------------
cseg01:C000119A			align 4
cseg01:C000119C	word_C000119C	dw 0			; DATA XREF: sub_C0001270+Dw
cseg01:C000119C						; sub_C0001270+15r
cseg01:C000119E	dword_C000119E	dd 0			; DATA XREF: sub_C0001290+7w
cseg01:C000119E						; sub_C0001290+Dr
cseg01:C00011A2	dword_C00011A2	dd 0			; DATA XREF: sub_C00012BB+7w
cseg01:C00011A2						; sub_C00012BB+15r
cseg01:C00011A6	dword_C00011A6	dd 0			; DATA XREF: sub_C00012BB+Ew
cseg01:C00011A6						; sub_C00012BB+27w ...
cseg01:C00011AA	dword_C00011AA	dd 0			; DATA XREF: sub_C00012F2+7w
cseg01:C00011AA						; sub_C00012F2+Dr
cseg01:C00011AE	dword_C00011AE	dd 0			; DATA XREF: sub_C000130F+7w
cseg01:C00011AE						; sub_C000130F+17r
cseg01:C00011B2	dword_C00011B2	dd 0			; DATA XREF: sub_C000130F+10w
cseg01:C00011B2						; sub_C000130F+1Cr
cseg01:C00011B6	dword_C00011B6	dd 0			; DATA XREF: sub_C000133D+7w
cseg01:C00011B6						; sub_C000133D+Dr
cseg01:C00011BA
cseg01:C00011BA	; =============== S U B	R O U T	I N E =======================================
cseg01:C00011BA
cseg01:C00011BA
cseg01:C00011BA	sub_C00011BA	proc near		; CODE XREF: sub_C00010BC+29p
cseg01:C00011BA						; sub_C000116E+19p ...
cseg01:C00011BA
cseg01:C00011BA	var_10		= dword	ptr -10h
cseg01:C00011BA	arg_0		= dword	ptr  4
cseg01:C00011BA	arg_4		= dword	ptr  8
cseg01:C00011BA	arg_8		= dword	ptr  0Ch
cseg01:C00011BA
cseg01:C00011BA			push	ebx
cseg01:C00011BB			push	esi
cseg01:C00011BC			push	edi
cseg01:C00011BD			sub	esp, 4
cseg01:C00011C0			mov	ecx, [esp+10h+arg_0]
cseg01:C00011C4			mov	edi, [esp+10h+arg_8]
cseg01:C00011C8			mov	eax, [esp+10h+arg_4]
cseg01:C00011CC			and	eax, 0FFh
cseg01:C00011D1			mov	[esp+10h+arg_4], eax
cseg01:C00011D5			mov	edx, eax
cseg01:C00011D7			shl	edx, 18h
cseg01:C00011DA			shl	eax, 10h
cseg01:C00011DD			or	eax, edx
cseg01:C00011DF			mov	edx, [esp+10h+arg_4]
cseg01:C00011E3			shl	edx, 8
cseg01:C00011E6			or	eax, edx
cseg01:C00011E8			mov	esi, [esp+10h+arg_4]
cseg01:C00011EC			or	esi, eax
cseg01:C00011EE			mov	ebx, edi
cseg01:C00011F0			shr	ebx, 2
cseg01:C00011F3			mov	eax, edi
cseg01:C00011F5			and	al, 0FCh
cseg01:C00011F7			mov	[esp+10h+var_10], eax
cseg01:C00011FA			xor	eax, eax
cseg01:C00011FC
cseg01:C00011FC	loc_C00011FC:				; CODE XREF: sub_C00011BA+4Cj
cseg01:C00011FC			cmp	eax, ebx
cseg01:C00011FE			jnb	short loc_C0001208
cseg01:C0001200			mov	edx, eax
cseg01:C0001202			mov	[ecx+edx*4], esi
cseg01:C0001205			inc	eax
cseg01:C0001206			jmp	short loc_C00011FC
cseg01:C0001208	; ---------------------------------------------------------------------------
cseg01:C0001208
cseg01:C0001208	loc_C0001208:				; CODE XREF: sub_C00011BA+44j
cseg01:C0001208			mov	eax, [esp+10h+var_10]
cseg01:C000120B			mov	bl, byte ptr [esp+10h+arg_4]
cseg01:C000120F
cseg01:C000120F	loc_C000120F:				; CODE XREF: sub_C00011BA+5Fj
cseg01:C000120F			cmp	eax, edi
cseg01:C0001211			jnb	short loc_C000121B
cseg01:C0001213			lea	edx, [ecx+eax]
cseg01:C0001216			mov	[edx], bl
cseg01:C0001218			inc	eax
cseg01:C0001219			jmp	short loc_C000120F
cseg01:C000121B	; ---------------------------------------------------------------------------
cseg01:C000121B
cseg01:C000121B	loc_C000121B:				; CODE XREF: sub_C00011BA+57j
cseg01:C000121B						; sub_C0001222+4Cj
cseg01:C000121B			add	esp, 4
cseg01:C000121E			pop	edi
cseg01:C000121F			pop	esi
cseg01:C0001220			pop	ebx
cseg01:C0001221			retn
cseg01:C0001221	sub_C00011BA	endp
cseg01:C0001221
cseg01:C0001222
cseg01:C0001222	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001222
cseg01:C0001222
cseg01:C0001222	sub_C0001222	proc near		; CODE XREF: sub_C000055F+1BCp
cseg01:C0001222						; sub_C0001599+33p ...
cseg01:C0001222
cseg01:C0001222	var_10		= dword	ptr -10h
cseg01:C0001222	arg_0		= dword	ptr  4
cseg01:C0001222	arg_4		= dword	ptr  8
cseg01:C0001222	arg_8		= dword	ptr  0Ch
cseg01:C0001222
cseg01:C0001222			push	ebx
cseg01:C0001223			push	esi
cseg01:C0001224			push	edi
cseg01:C0001225			sub	esp, 4
cseg01:C0001228			mov	esi, [esp+10h+arg_0]
cseg01:C000122C			mov	ebx, [esp+10h+arg_4]
cseg01:C0001230			mov	edi, [esp+10h+arg_8]
cseg01:C0001234			shr	edi, 2
cseg01:C0001237			mov	eax, [esp+10h+arg_8]
cseg01:C000123B			and	al, 0FCh
cseg01:C000123D			mov	[esp+10h+var_10], eax
cseg01:C0001240			xor	eax, eax
cseg01:C0001242
cseg01:C0001242	loc_C0001242:				; CODE XREF: sub_C0001222+32j
cseg01:C0001242			cmp	eax, edi
cseg01:C0001244			jnb	short loc_C0001256
cseg01:C0001246			mov	ecx, eax
cseg01:C0001248			shl	ecx, 2
cseg01:C000124B			lea	edx, [ebx+ecx]
cseg01:C000124E			mov	edx, [edx]
cseg01:C0001250			mov	[ecx+esi], edx
cseg01:C0001253			inc	eax
cseg01:C0001254			jmp	short loc_C0001242
cseg01:C0001256	; ---------------------------------------------------------------------------
cseg01:C0001256
cseg01:C0001256	loc_C0001256:				; CODE XREF: sub_C0001222+22j
cseg01:C0001256			mov	eax, [esp+10h+var_10]
cseg01:C0001259
cseg01:C0001259	loc_C0001259:				; CODE XREF: sub_C0001222+48j
cseg01:C0001259			cmp	eax, [esp+10h+arg_8]
cseg01:C000125D			jnb	short loc_C000126C
cseg01:C000125F			lea	edx, [ebx+eax]
cseg01:C0001262			lea	ecx, [esi+eax]
cseg01:C0001265			mov	dl, [edx]
cseg01:C0001267			mov	[ecx], dl
cseg01:C0001269			inc	eax
cseg01:C000126A			jmp	short loc_C0001259
cseg01:C000126C	; ---------------------------------------------------------------------------
cseg01:C000126C
cseg01:C000126C	loc_C000126C:				; CODE XREF: sub_C0001222+3Bj
cseg01:C000126C			mov	eax, esi
cseg01:C000126E			jmp	short loc_C000121B
cseg01:C000126E	sub_C0001222	endp
cseg01:C000126E
cseg01:C0001270
cseg01:C0001270	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001270
cseg01:C0001270
cseg01:C0001270	sub_C0001270	proc near		; CODE XREF: sub_C000037B:loc_C0000419p
cseg01:C0001270			push	ebx
cseg01:C0001271			push	esi
cseg01:C0001272			push	edi
cseg01:C0001273			push	ecx
cseg01:C0001274			push	eax
cseg01:C0001275			xor	eax, eax
cseg01:C0001277			VMMCall	Get_VMM_Version
cseg01:C000127D			mov	ds:word_C000119C, ax
cseg01:C0001283			pop	ecx
cseg01:C0001284			pop	eax
cseg01:C0001285			movzx	eax, ds:word_C000119C
cseg01:C000128C			pop	edi
cseg01:C000128D			pop	esi
cseg01:C000128E			pop	ebx
cseg01:C000128F			retn
cseg01:C000128F	sub_C0001270	endp
cseg01:C000128F
cseg01:C0001290
cseg01:C0001290	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001290
cseg01:C0001290
cseg01:C0001290	sub_C0001290	proc near		; CODE XREF: sub_C00017FE+84p
cseg01:C0001290						; sub_C00017FE+12Bp
cseg01:C0001290
cseg01:C0001290	arg_0		= dword	ptr  4
cseg01:C0001290
cseg01:C0001290			push	ebx
cseg01:C0001291			push	esi
cseg01:C0001292			push	edi
cseg01:C0001293			mov	eax, [esp+0Ch+arg_0]
cseg01:C0001297			mov	ds:dword_C000119E, eax
cseg01:C000129C			push	ecx
cseg01:C000129D			mov	ecx, ds:dword_C000119E
cseg01:C00012A3			VMMCall	Begin_Critical_Section
cseg01:C00012A9			pop	ecx
cseg01:C00012AA			pop	edi
cseg01:C00012AB			pop	esi
cseg01:C00012AC			pop	ebx
cseg01:C00012AD			retn
cseg01:C00012AD	sub_C0001290	endp
cseg01:C00012AD
cseg01:C00012AE
cseg01:C00012AE	; =============== S U B	R O U T	I N E =======================================
cseg01:C00012AE
cseg01:C00012AE
cseg01:C00012AE	sub_C00012AE	proc near		; CODE XREF: sub_C00017FE+CCp
cseg01:C00012AE						; sub_C00017FE:loc_C0001996p
cseg01:C00012AE			push	ebx
cseg01:C00012AF			push	esi
cseg01:C00012B0			push	edi
cseg01:C00012B1			VMMCall	End_Critical_Section
cseg01:C00012B7			pop	edi
cseg01:C00012B8			pop	esi
cseg01:C00012B9			pop	ebx
cseg01:C00012BA			retn
cseg01:C00012BA	sub_C00012AE	endp
cseg01:C00012BA
cseg01:C00012BB
cseg01:C00012BB	; =============== S U B	R O U T	I N E =======================================
cseg01:C00012BB
cseg01:C00012BB
cseg01:C00012BB	sub_C00012BB	proc near		; CODE XREF: sub_C00010BC+4Ap
cseg01:C00012BB
cseg01:C00012BB	arg_0		= dword	ptr  4
cseg01:C00012BB
cseg01:C00012BB			push	ebx
cseg01:C00012BC			push	esi
cseg01:C00012BD			push	edi
cseg01:C00012BE			mov	eax, [esp+0Ch+arg_0]
cseg01:C00012C2			mov	ds:dword_C00011A2, eax
cseg01:C00012C7			xor	eax, eax
cseg01:C00012C9			mov	ds:dword_C00011A6, eax
cseg01:C00012CE			push	eax
cseg01:C00012CF			push	ecx
cseg01:C00012D0			mov	ecx, ds:dword_C00011A2
cseg01:C00012D6			VMMCall	Create_Semaphore
cseg01:C00012DC			jb	loc_C00012E7
cseg01:C00012E2			mov	ds:dword_C00011A6, eax
cseg01:C00012E7
cseg01:C00012E7	loc_C00012E7:				; CODE XREF: sub_C00012BB+21j
cseg01:C00012E7			pop	ecx
cseg01:C00012E8			pop	eax
cseg01:C00012E9			mov	eax, ds:dword_C00011A6
cseg01:C00012EE			pop	edi
cseg01:C00012EF			pop	esi
cseg01:C00012F0			pop	ebx
cseg01:C00012F1			retn
cseg01:C00012F1	sub_C00012BB	endp
cseg01:C00012F1
cseg01:C00012F2
cseg01:C00012F2	; =============== S U B	R O U T	I N E =======================================
cseg01:C00012F2
cseg01:C00012F2
cseg01:C00012F2	sub_C00012F2	proc near		; CODE XREF: cseg01:C000114Ep
cseg01:C00012F2
cseg01:C00012F2	arg_0		= dword	ptr  4
cseg01:C00012F2
cseg01:C00012F2			push	ebx
cseg01:C00012F3			push	esi
cseg01:C00012F4			push	edi
cseg01:C00012F5			mov	eax, [esp+0Ch+arg_0]
cseg01:C00012F9			mov	ds:dword_C00011AA, eax
cseg01:C00012FE			push	eax
cseg01:C00012FF			mov	eax, ds:dword_C00011AA
cseg01:C0001304			VMMCall	Destroy_Semaphore
cseg01:C000130A			pop	eax
cseg01:C000130B			pop	edi
cseg01:C000130C			pop	esi
cseg01:C000130D			pop	ebx
cseg01:C000130E			retn
cseg01:C000130E	sub_C00012F2	endp
cseg01:C000130E
cseg01:C000130F
cseg01:C000130F	; =============== S U B	R O U T	I N E =======================================
cseg01:C000130F
cseg01:C000130F
cseg01:C000130F	sub_C000130F	proc near		; CODE XREF: sub_C000115D+8p
cseg01:C000130F
cseg01:C000130F	arg_0		= dword	ptr  4
cseg01:C000130F	arg_4		= dword	ptr  8
cseg01:C000130F
cseg01:C000130F			push	ebx
cseg01:C0001310			push	esi
cseg01:C0001311			push	edi
cseg01:C0001312			mov	eax, [esp+0Ch+arg_0]
cseg01:C0001316			mov	ds:dword_C00011AE, eax
cseg01:C000131B			mov	eax, [esp+0Ch+arg_4]
cseg01:C000131F			mov	ds:dword_C00011B2, eax
cseg01:C0001324			push	eax
cseg01:C0001325			push	ecx
cseg01:C0001326			mov	eax, ds:dword_C00011AE
cseg01:C000132B			mov	ecx, ds:dword_C00011B2
cseg01:C0001331			VMMCall	Wait_Semaphore
cseg01:C0001337			pop	ecx
cseg01:C0001338			pop	eax
cseg01:C0001339			pop	edi
cseg01:C000133A			pop	esi
cseg01:C000133B			pop	ebx
cseg01:C000133C			retn
cseg01:C000133C	sub_C000130F	endp
cseg01:C000133C
cseg01:C000133D
cseg01:C000133D	; =============== S U B	R O U T	I N E =======================================
cseg01:C000133D
cseg01:C000133D
cseg01:C000133D	sub_C000133D	proc near		; CODE XREF: sub_C0002630+78p
cseg01:C000133D
cseg01:C000133D	arg_0		= dword	ptr  4
cseg01:C000133D
cseg01:C000133D			push	ebx
cseg01:C000133E			push	esi
cseg01:C000133F			push	edi
cseg01:C0001340			mov	eax, [esp+0Ch+arg_0]
cseg01:C0001344			mov	ds:dword_C00011B6, eax
cseg01:C0001349			push	eax
cseg01:C000134A			mov	eax, ds:dword_C00011B6
cseg01:C000134F			VMMCall	Signal_Semaphore
cseg01:C0001355			pop	eax
cseg01:C0001356			pop	edi
cseg01:C0001357			pop	esi
cseg01:C0001358			pop	ebx
cseg01:C0001359			retn
cseg01:C0001359	sub_C000133D	endp
cseg01:C0001359
cseg01:C000135A
cseg01:C000135A	; =============== S U B	R O U T	I N E =======================================
cseg01:C000135A
cseg01:C000135A
cseg01:C000135A	sub_C000135A	proc near		; CODE XREF: sub_C00010BC+13p
cseg01:C000135A						; sub_C0001599+1Ap ...
cseg01:C000135A			VMMJmp _PageAllocate
cseg01:C000135A	sub_C000135A	endp
cseg01:C000135A
cseg01:C0001360
cseg01:C0001360	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001360
cseg01:C0001360
cseg01:C0001360	sub_C0001360	proc near		; CODE XREF: sub_C00010BC+62p
cseg01:C0001360						; cseg01:C000113Bp ...
cseg01:C0001360			VMMJmp _PageFree
cseg01:C0001360	sub_C0001360	endp
cseg01:C0001360
cseg01:C0001366
cseg01:C0001366	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001366
cseg01:C0001366
cseg01:C0001366	sub_C0001366	proc near		; CODE XREF: sub_C0001D1E+18p
cseg01:C0001366			VMMJmp _CopyPageTable
cseg01:C0001366	sub_C0001366	endp
cseg01:C0001366
cseg01:C000136C	; ---------------------------------------------------------------------------
cseg01:C000136C			VMMJmp _LinPageLock
cseg01:C0001372	; ---------------------------------------------------------------------------
cseg01:C0001372			VMMJmp _LinPageUnlock
cseg01:C0001378
cseg01:C0001378	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001378
cseg01:C0001378
cseg01:C0001378	sub_C0001378	proc near		; CODE XREF: sub_C000156E+18p
cseg01:C0001378						; sub_C00019F5+1B2p ...
cseg01:C0001378			VMMJmp _MapPhysToLinear
cseg01:C0001378	sub_C0001378	endp
cseg01:C0001378
cseg01:C000137E	; ---------------------------------------------------------------------------
cseg01:C000137E			VMMJmp _MapPhysToLinear
cseg01:C0001384	; ---------------------------------------------------------------------------
cseg01:C0001384			VMMJmp _PhysIntov86
cseg01:C000138A
cseg01:C000138A	; =============== S U B	R O U T	I N E =======================================
cseg01:C000138A
cseg01:C000138A
cseg01:C000138A	sub_C000138A	proc near		; CODE XREF: sub_C00014C4+20p
cseg01:C000138A			VMMJmp _RegOpenKey
cseg01:C000138A	sub_C000138A	endp
cseg01:C000138A
cseg01:C0001390
cseg01:C0001390	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001390
cseg01:C0001390
cseg01:C0001390	sub_C0001390	proc near		; CODE XREF: sub_C00014C4+9Ap
cseg01:C0001390			VMMJmp _RegCloseKey
cseg01:C0001390	sub_C0001390	endp
cseg01:C0001390
cseg01:C0001396
cseg01:C0001396	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001396
cseg01:C0001396
cseg01:C0001396	sub_C0001396	proc near		; CODE XREF: sub_C00014C4+4Ap
cseg01:C0001396			VMMJmp _RegQueryValueEx
cseg01:C0001396	sub_C0001396	endp
cseg01:C0001396
cseg01:C0001396	; ---------------------------------------------------------------------------
cseg01:C000139C	dword_C000139C	dd 0			; DATA XREF: sub_C0001644+47w
cseg01:C000139C						; sub_C0001644+5Cr ...
cseg01:C00013A0	dword_C00013A0	dd 0			; DATA XREF: sub_C00019F5+28Aw
cseg01:C00013A0						; sub_C0001D48+1ECr
cseg01:C00013A4	dword_C00013A4	dd 0			; DATA XREF: sub_C00017FE+Br
cseg01:C00013A4						; sub_C00019F5+2B9w ...
cseg01:C00013A8	dword_C00013A8	dd 0			; DATA XREF: sub_C00017FE+18r
cseg01:C00013A8						; sub_C00020E0+3w ...
cseg01:C00013AC	dword_C00013AC	dd 0			; DATA XREF: sub_C00019F5+318w
cseg01:C00013AC						; sub_C000262Ar
cseg01:C00013B0	dword_C00013B0	dd 0			; DATA XREF: sub_C00017FE+8Cr
cseg01:C00013B0						; sub_C00017FE:loc_C0001893r ...
cseg01:C00013B4	dword_C00013B4	dd 0			; DATA XREF: sub_C00014C4+35o
cseg01:C00013B4						; sub_C00014C4+5Fo ...
cseg01:C00013B8			dd 0Fh dup(0)
cseg01:C00013F4	dword_C00013F4	dd 0			; DATA XREF: sub_C00017EA+3w
cseg01:C00013F4						; sub_C00017FE:loc_C0001869r
cseg01:C00013F8	dword_C00013F8	dd 0			; DATA XREF: sub_C00017EA+9w
cseg01:C00013F8						; sub_C00017FE+73r
cseg01:C00013FC	dword_C00013FC	dd 1			; DATA XREF: sub_C000179Ar
cseg01:C00013FC						; sub_C000179A+Ew ...
cseg01:C0001400	dword_C0001400	dd 0			; DATA XREF: sub_C00019F5+30Ew
cseg01:C0001400						; sub_C00020E0+11r ...
cseg01:C0001404	dword_C0001404	dd 2 dup(0)		; DATA XREF: sub_C0001599+2Do
cseg01:C000140C			dd 82h,	3 dup(0)
cseg01:C000141C			dd 1D0h, 3 dup(0)
cseg01:C000142C			dd 1, 7	dup(0)
cseg01:C000144C			dd 1, 3	dup(0)
cseg01:C000145C			dd 1, 0
cseg01:C0001464	dword_C0001464	dd 0			; DATA XREF: sub_C0001599+2r
cseg01:C0001464						; sub_C0001599+22w ...
cseg01:C0001468	aSoftwareSvga	db 'Software\SVGA',0    ; DATA XREF: sub_C00014C4+16o
cseg01:C0001476	aHwcursor	db 'hwcursor',0         ; DATA XREF: sub_C00019F5+28o
cseg01:C000147F	aVram256	db 'vram256',0          ; DATA XREF: sub_C00019F5+3Ao
cseg01:C000147F						; sub_C00019F5:loc_C0001ACEo
cseg01:C0001487	aRgb565bug	db 'rgb565bug',0        ; DATA XREF: sub_C00019F5+4Co
cseg01:C0001491	aCommandbuffers	db 'commandbuffers',0   ; DATA XREF: sub_C00019F5+5Eo
cseg01:C00014A0	aHwversion	db 'hwversion',0        ; DATA XREF: sub_C00019F5+70o
cseg01:C00014AA	aVmwsmini_vxd	db 'vmwsmini.vxd',0     ; DATA XREF: sub_C00019F5+2F3o
cseg01:C00014B7
cseg01:C00014B7	; =============== S U B	R O U T	I N E =======================================
cseg01:C00014B7
cseg01:C00014B7
cseg01:C00014B7	sub_C00014B7	proc near		; CODE XREF: sub_C00017D1+12p
cseg01:C00014B7						; sub_C00017FE+A0p
cseg01:C00014B7			push	1
cseg01:C00014B9			push	15h
cseg01:C00014BB			call	sub_C0000CD3
cseg01:C00014C0			add	esp, 8
cseg01:C00014C3			retn
cseg01:C00014C3	sub_C00014B7	endp
cseg01:C00014C3
cseg01:C00014C4
cseg01:C00014C4	; =============== S U B	R O U T	I N E =======================================
cseg01:C00014C4
cseg01:C00014C4
cseg01:C00014C4	sub_C00014C4	proc near		; CODE XREF: sub_C00019F5+2Dp
cseg01:C00014C4						; sub_C00019F5+3Fp ...
cseg01:C00014C4
cseg01:C00014C4	var_14		= dword	ptr -14h
cseg01:C00014C4	var_10		= dword	ptr -10h
cseg01:C00014C4	var_C		= dword	ptr -0Ch
cseg01:C00014C4	arg_0		= dword	ptr  4
cseg01:C00014C4	arg_4		= dword	ptr  8
cseg01:C00014C4
cseg01:C00014C4			push	ebx
cseg01:C00014C5			push	esi
cseg01:C00014C6			sub	esp, 0Ch
cseg01:C00014C9			mov	esi, [esp+14h+arg_4]
cseg01:C00014CD			mov	[esp+14h+var_C], 40h
cseg01:C00014D5			xor	ebx, ebx
cseg01:C00014D7			mov	eax, esp
cseg01:C00014D9			push	eax
cseg01:C00014DA			push	offset aSoftwareSvga ; "Software\\SVGA"
cseg01:C00014DF			push	80000002h
cseg01:C00014E4			call	sub_C000138A
cseg01:C00014E9			add	esp, 0Ch
cseg01:C00014EC			test	eax, eax
cseg01:C00014EE			jnz	loc_C0001566
cseg01:C00014F4			lea	eax, [esp+14h+var_C]
cseg01:C00014F8			push	eax
cseg01:C00014F9			push	offset dword_C00013B4
cseg01:C00014FE			lea	eax, [esp+1Ch+var_10]
cseg01:C0001502			push	eax
cseg01:C0001503			push	ebx
cseg01:C0001504			mov	edx, [esp+24h+arg_0]
cseg01:C0001508			push	edx
cseg01:C0001509			mov	ecx, [esp+28h+var_14]
cseg01:C000150D			push	ecx
cseg01:C000150E			call	sub_C0001396
cseg01:C0001513			add	esp, 18h
cseg01:C0001516			test	eax, eax
cseg01:C0001518			jnz	short loc_C000155A
cseg01:C000151A			cmp	[esp+14h+var_10], 1
cseg01:C000151F			jnz	short loc_C000154E
cseg01:C0001521			xor	edx, edx
cseg01:C0001523			mov	eax, offset dword_C00013B4
cseg01:C0001528
cseg01:C0001528	loc_C0001528:				; CODE XREF: sub_C00014C4+6Aj
cseg01:C0001528			cmp	byte ptr [eax],	20h
cseg01:C000152B			jnz	short loc_C0001530
cseg01:C000152D			inc	eax
cseg01:C000152E			jmp	short loc_C0001528
cseg01:C0001530	; ---------------------------------------------------------------------------
cseg01:C0001530
cseg01:C0001530	loc_C0001530:				; CODE XREF: sub_C00014C4+67j
cseg01:C0001530						; sub_C00014C4+84j
cseg01:C0001530			mov	bh, [eax]
cseg01:C0001532			cmp	bh, 30h
cseg01:C0001535			jb	short loc_C000154A
cseg01:C0001537			cmp	bh, 39h
cseg01:C000153A			ja	short loc_C000154A
cseg01:C000153C			imul	edx, 0Ah
cseg01:C000153F			movzx	ecx, bh
cseg01:C0001542			sub	ecx, 30h
cseg01:C0001545			add	edx, ecx
cseg01:C0001547			inc	eax
cseg01:C0001548			jmp	short loc_C0001530
cseg01:C000154A	; ---------------------------------------------------------------------------
cseg01:C000154A
cseg01:C000154A	loc_C000154A:				; CODE XREF: sub_C00014C4+71j
cseg01:C000154A						; sub_C00014C4+76j
cseg01:C000154A			mov	[esi], edx
cseg01:C000154C			jmp	short loc_C0001555
cseg01:C000154E	; ---------------------------------------------------------------------------
cseg01:C000154E
cseg01:C000154E	loc_C000154E:				; CODE XREF: sub_C00014C4+5Bj
cseg01:C000154E			mov	eax, ds:dword_C00013B4
cseg01:C0001553			mov	[esi], eax
cseg01:C0001555
cseg01:C0001555	loc_C0001555:				; CODE XREF: sub_C00014C4+88j
cseg01:C0001555			mov	ebx, 1
cseg01:C000155A
cseg01:C000155A	loc_C000155A:				; CODE XREF: sub_C00014C4+54j
cseg01:C000155A			mov	esi, [esp+14h+var_14]
cseg01:C000155D			push	esi
cseg01:C000155E			call	sub_C0001390
cseg01:C0001563			add	esp, 4
cseg01:C0001566
cseg01:C0001566	loc_C0001566:				; CODE XREF: sub_C00014C4+2Aj
cseg01:C0001566			mov	eax, ebx
cseg01:C0001568			add	esp, 0Ch
cseg01:C000156B
cseg01:C000156B	loc_C000156B:				; CODE XREF: sub_C0001599+42j
cseg01:C000156B						; sub_C0001599+4Cj
cseg01:C000156B			pop	esi
cseg01:C000156C			pop	ebx
cseg01:C000156D			retn
cseg01:C000156D	sub_C00014C4	endp
cseg01:C000156D
cseg01:C000156E
cseg01:C000156E	; =============== S U B	R O U T	I N E =======================================
cseg01:C000156E
cseg01:C000156E
cseg01:C000156E	sub_C000156E	proc near		; CODE XREF: sub_C0000861+1DAp
cseg01:C000156E			call	sub_C0000B98
cseg01:C0001573			test	eax, eax
cseg01:C0001575			jz	short locret_C0001598
cseg01:C0001577			push	0
cseg01:C0001579			mov	eax, ds:dword_C00007BC
cseg01:C000157E			push	eax
cseg01:C000157F			mov	edx, ds:dword_C00007C8
cseg01:C0001585			push	edx
cseg01:C0001586			call	sub_C0001378
cseg01:C000158B			add	esp, 0Ch
cseg01:C000158E			mov	ds:dword_C0000818, eax
cseg01:C0001593			mov	ds:dword_C000081C, eax
cseg01:C0001598
cseg01:C0001598	locret_C0001598:			; CODE XREF: sub_C000156E+7j
cseg01:C0001598			retn
cseg01:C0001598	sub_C000156E	endp
cseg01:C0001598
cseg01:C0001599
cseg01:C0001599	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001599
cseg01:C0001599
cseg01:C0001599	sub_C0001599	proc near		; CODE XREF: sub_C00019F5+285p
cseg01:C0001599			push	ebx
cseg01:C000159A			push	esi
cseg01:C000159B			mov	eax, ds:dword_C0001464
cseg01:C00015A0			test	eax, eax
cseg01:C00015A2			jnz	short loc_C00015D4
cseg01:C00015A4			push	8
cseg01:C00015A6			push	eax
cseg01:C00015A7			push	100000h
cseg01:C00015AC			push	eax
cseg01:C00015AD			push	eax
cseg01:C00015AE			push	eax
cseg01:C00015AF			push	1
cseg01:C00015B1			push	1
cseg01:C00015B3			call	sub_C000135A
cseg01:C00015B8			add	esp, 20h
cseg01:C00015BB			mov	ds:dword_C0001464, eax
cseg01:C00015C0			test	eax, eax
cseg01:C00015C2			jz	short loc_C00015D4
cseg01:C00015C4			push	60h
cseg01:C00015C6			push	offset dword_C0001404
cseg01:C00015CB			push	eax
cseg01:C00015CC			call	sub_C0001222
cseg01:C00015D1			add	esp, 0Ch
cseg01:C00015D4
cseg01:C00015D4	loc_C00015D4:				; CODE XREF: sub_C0001599+9j
cseg01:C00015D4						; sub_C0001599+29j
cseg01:C00015D4			cmp	ds:dword_C0001464, 0
cseg01:C00015DB			jz	short loc_C000156B
cseg01:C00015DD			xor	esi, esi
cseg01:C00015DF			jmp	short loc_C00015E7
cseg01:C00015E1	; ---------------------------------------------------------------------------
cseg01:C00015E1
cseg01:C00015E1	loc_C00015E1:				; CODE XREF: sub_C0001599+60j
cseg01:C00015E1						; sub_C0001599+66j ...
cseg01:C00015E1			inc	esi
cseg01:C00015E2			cmp	esi, 6
cseg01:C00015E5			jge	short loc_C000156B
cseg01:C00015E7
cseg01:C00015E7	loc_C00015E7:				; CODE XREF: sub_C0001599+46j
cseg01:C00015E7			mov	eax, esi
cseg01:C00015E9			shl	eax, 4
cseg01:C00015EC			mov	ebx, ds:dword_C0001464
cseg01:C00015F2			add	ebx, eax
cseg01:C00015F4			mov	ecx, [ebx+8]
cseg01:C00015F7			test	ecx, ecx
cseg01:C00015F9			jz	short loc_C00015E1
cseg01:C00015FB			test	byte ptr [ebx+0Ch], 1
cseg01:C00015FF			jnz	short loc_C00015E1
cseg01:C0001601			push	0Eh
cseg01:C0001603			push	ebx
cseg01:C0001604			push	100000h
cseg01:C0001609			push	0
cseg01:C000160B			push	0
cseg01:C000160D			push	0
cseg01:C000160F			push	1
cseg01:C0001611			lea	eax, [ecx+0FFFh]
cseg01:C0001617			shr	eax, 0Ch
cseg01:C000161A			push	eax
cseg01:C000161B			call	sub_C000135A
cseg01:C0001620			add	esp, 20h
cseg01:C0001623			mov	[ebx+4], eax
cseg01:C0001626			test	eax, eax
cseg01:C0001628			jz	short loc_C00015E1
cseg01:C000162A			push	esi
cseg01:C000162B			push	offset aAllocatedOtabl ; "Allocated OTable row:	%d\n"
cseg01:C0001630			call	sub_C0002A03
cseg01:C0001635			add	esp, 8
cseg01:C0001638			or	byte ptr [ebx+0Ch], 1
cseg01:C000163C			jmp	short loc_C00015E1
cseg01:C000163C	sub_C0001599	endp
cseg01:C000163C
cseg01:C000163E
cseg01:C000163E	; =============== S U B	R O U T	I N E =======================================
cseg01:C000163E
cseg01:C000163E
cseg01:C000163E	sub_C000163E	proc near		; CODE XREF: sub_C000055F:loc_C0000770p
cseg01:C000163E			mov	eax, ds:dword_C0001464
cseg01:C0001643			retn
cseg01:C0001643	sub_C000163E	endp
cseg01:C0001643
cseg01:C0001644
cseg01:C0001644	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001644
cseg01:C0001644
cseg01:C0001644	sub_C0001644	proc near		; CODE XREF: sub_C00019F5:loc_C0001CC5p
cseg01:C0001644			push	ebx
cseg01:C0001645			push	2Bh
cseg01:C0001647			call	sub_C0000C93
cseg01:C000164C			add	esp, 4
cseg01:C000164F			mov	ebx, eax
cseg01:C0001651			shl	ebx, 5
cseg01:C0001654			push	4Dh
cseg01:C0001656			call	sub_C0002496
cseg01:C000165B			add	esp, 4
cseg01:C000165E			shl	eax, 3
cseg01:C0001661			add	eax, ebx
cseg01:C0001663			lea	ebx, [eax+784h]
cseg01:C0001669			push	8
cseg01:C000166B			push	0
cseg01:C000166D			push	100000h
cseg01:C0001672			push	0
cseg01:C0001674			push	0
cseg01:C0001676			push	0
cseg01:C0001678			push	1
cseg01:C000167A			add	eax, 1783h
cseg01:C000167F			shr	eax, 0Ch
cseg01:C0001682			push	eax
cseg01:C0001683			call	sub_C000135A
cseg01:C0001688			add	esp, 20h
cseg01:C000168B			mov	ds:dword_C000139C, eax
cseg01:C0001690			test	eax, eax
cseg01:C0001692			jz	short loc_C000170C
cseg01:C0001694			push	ebx
cseg01:C0001695			push	0
cseg01:C0001697			push	eax
cseg01:C0001698			call	sub_C00011BA
cseg01:C000169D			add	esp, 0Ch
cseg01:C00016A0			mov	eax, ds:dword_C000139C
cseg01:C00016A5			lea	ebx, [eax+1Ch]
cseg01:C00016A8			mov	[eax], ebx
cseg01:C00016AA			push	2Bh
cseg01:C00016AC			call	sub_C0000C93
cseg01:C00016B1			mov	edx, eax
cseg01:C00016B3			add	esp, 4
cseg01:C00016B6			mov	eax, ds:dword_C000139C
cseg01:C00016BB			mov	[eax+0Ch], edx
cseg01:C00016BE			mov	eax, ds:dword_C000139C
cseg01:C00016C3			mov	edx, [eax+0Ch]
cseg01:C00016C6			shl	edx, 5
cseg01:C00016C9			add	ebx, edx
cseg01:C00016CB			mov	[eax+4], ebx
cseg01:C00016CE			push	4Dh
cseg01:C00016D0			call	sub_C0002496
cseg01:C00016D5			mov	edx, eax
cseg01:C00016D7			add	esp, 4
cseg01:C00016DA			mov	eax, ds:dword_C000139C
cseg01:C00016DF			mov	[eax+10h], edx
cseg01:C00016E2			mov	eax, ds:dword_C000139C
cseg01:C00016E7			mov	edx, [eax+10h]
cseg01:C00016EA			shl	edx, 3
cseg01:C00016ED			add	ebx, edx
cseg01:C00016EF			mov	[eax+8], ebx
cseg01:C00016F2			mov	eax, ds:dword_C000139C
cseg01:C00016F7			mov	dword ptr [eax+14h], 4Eh
cseg01:C00016FE			mov	eax, ds:dword_C000139C
cseg01:C0001703			imul	edx, [eax+14h],	18h
cseg01:C0001707			add	ebx, edx
cseg01:C0001709			mov	[eax+18h], ebx
cseg01:C000170C
cseg01:C000170C	loc_C000170C:				; CODE XREF: sub_C0001644+4Ej
cseg01:C000170C			pop	ebx
cseg01:C000170D			retn
cseg01:C000170D	sub_C0001644	endp
cseg01:C000170D
cseg01:C000170E
cseg01:C000170E	; =============== S U B	R O U T	I N E =======================================
cseg01:C000170E
cseg01:C000170E
cseg01:C000170E	sub_C000170E	proc near		; CODE XREF: sub_C000055F:loc_C0000766p
cseg01:C000170E			mov	eax, ds:dword_C000139C
cseg01:C0001713			retn
cseg01:C0001713	sub_C000170E	endp
cseg01:C0001713
cseg01:C0001714
cseg01:C0001714	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001714
cseg01:C0001714
cseg01:C0001714	sub_C0001714	proc near		; CODE XREF: sub_C000055F:loc_C00006C5p
cseg01:C0001714						; sub_C00019F5+309p
cseg01:C0001714
cseg01:C0001714	var_8		= dword	ptr -8
cseg01:C0001714
cseg01:C0001714			push	ebx
cseg01:C0001715			sub	esp, 4
cseg01:C0001718			push	0Eh
cseg01:C000171A			lea	eax, [esp+0Ch+var_8]
cseg01:C000171E			push	eax
cseg01:C000171F			push	100000h
cseg01:C0001724			push	0
cseg01:C0001726			push	0
cseg01:C0001728			push	0
cseg01:C000172A			push	1
cseg01:C000172C			push	80h
cseg01:C0001731			call	sub_C000135A
cseg01:C0001736			mov	ebx, eax
cseg01:C0001738			add	esp, 20h
cseg01:C000173B			test	eax, eax
cseg01:C000173D			jz	short loc_C0001765
cseg01:C000173F			push	4
cseg01:C0001741			push	0
cseg01:C0001743			push	eax
cseg01:C0001744			call	sub_C00011BA
cseg01:C0001749			add	esp, 0Ch
cseg01:C000174C			mov	dword ptr [ebx], 1
cseg01:C0001752			mov	dword ptr [ebx+1Ch], 0
cseg01:C0001759			mov	eax, [esp+8+var_8]
cseg01:C000175C			add	eax, 40h
cseg01:C000175F			mov	[ebx+18h], eax
cseg01:C0001762			lea	eax, [ebx+40h]
cseg01:C0001765
cseg01:C0001765	loc_C0001765:				; CODE XREF: sub_C0001714+29j
cseg01:C0001765			add	esp, 4
cseg01:C0001768			pop	ebx
cseg01:C0001769			retn
cseg01:C0001769	sub_C0001714	endp
cseg01:C0001769
cseg01:C000176A
cseg01:C000176A	; =============== S U B	R O U T	I N E =======================================
cseg01:C000176A
cseg01:C000176A
cseg01:C000176A	sub_C000176A	proc near		; CODE XREF: sub_C000055F+170p
cseg01:C000176A
cseg01:C000176A	arg_0		= dword	ptr  4
cseg01:C000176A
cseg01:C000176A			push	0
cseg01:C000176C			mov	eax, [esp+4+arg_0]
cseg01:C0001770			sub	eax, 40h
cseg01:C0001773			push	eax
cseg01:C0001774			call	sub_C0001360
cseg01:C0001779			add	esp, 8
cseg01:C000177C			retn
cseg01:C000177C	sub_C000176A	endp
cseg01:C000177C
cseg01:C000177D
cseg01:C000177D	; =============== S U B	R O U T	I N E =======================================
cseg01:C000177D
cseg01:C000177D
cseg01:C000177D	sub_C000177D	proc near		; CODE XREF: sub_C00017C1+5p
cseg01:C000177D						; sub_C00017FE+1E7p
cseg01:C000177D			call	sub_C0000B98
cseg01:C0001782			test	eax, eax
cseg01:C0001784			jz	short loc_C0001791
cseg01:C0001786			push	45h
cseg01:C0001788			call	sub_C0000C93
cseg01:C000178D			add	esp, 4
cseg01:C0001790			retn
cseg01:C0001791	; ---------------------------------------------------------------------------
cseg01:C0001791
cseg01:C0001791	loc_C0001791:				; CODE XREF: sub_C000177D+7j
cseg01:C0001791			mov	eax, ds:dword_C00007B4
cseg01:C0001796			mov	eax, [eax+18h]
cseg01:C0001799			retn
cseg01:C0001799	sub_C000177D	endp
cseg01:C0001799
cseg01:C000179A
cseg01:C000179A	; =============== S U B	R O U T	I N E =======================================
cseg01:C000179A
cseg01:C000179A
cseg01:C000179A	sub_C000179A	proc near		; CODE XREF: sub_C000055F:loc_C00006F3p
cseg01:C000179A						; sub_C00017FE+148p
cseg01:C000179A			cmp	ds:dword_C00013FC, 0
cseg01:C00017A1			jnz	short loc_C00017B2
cseg01:C00017A3			call	sub_C0000D7D
cseg01:C00017A8			mov	ds:dword_C00013FC, 1
cseg01:C00017B2
cseg01:C00017B2	loc_C00017B2:				; CODE XREF: sub_C000179A+7j
cseg01:C00017B2			mov	eax, ds:dword_C00013FC
cseg01:C00017B7			lea	edx, [eax+1]
cseg01:C00017BA			mov	ds:dword_C00013FC, edx
cseg01:C00017C0			retn
cseg01:C00017C0	sub_C000179A	endp
cseg01:C00017C0
cseg01:C00017C1
cseg01:C00017C1	; =============== S U B	R O U T	I N E =======================================
cseg01:C00017C1
cseg01:C00017C1
cseg01:C00017C1	sub_C00017C1	proc near		; CODE XREF: sub_C000055F+19Ep
cseg01:C00017C1						; sub_C00017D1+6p
cseg01:C00017C1
cseg01:C00017C1	arg_0		= dword	ptr  4
cseg01:C00017C1
cseg01:C00017C1			push	ebx
cseg01:C00017C2			mov	ebx, [esp+4+arg_0]
cseg01:C00017C6			call	sub_C000177D
cseg01:C00017CB			test	ebx, ebx
cseg01:C00017CD			xor	eax, eax
cseg01:C00017CF
cseg01:C00017CF	loc_C00017CF:				; CODE XREF: sub_C00017D1+10j
cseg01:C00017CF			pop	ebx
cseg01:C00017D0			retn
cseg01:C00017D0	sub_C00017C1	endp
cseg01:C00017D0
cseg01:C00017D1
cseg01:C00017D1	; =============== S U B	R O U T	I N E =======================================
cseg01:C00017D1
cseg01:C00017D1
cseg01:C00017D1	sub_C00017D1	proc near		; CODE XREF: sub_C000055F+1A8p
cseg01:C00017D1						; sub_C00017FE+1A8p
cseg01:C00017D1
cseg01:C00017D1	arg_0		= dword	ptr  4
cseg01:C00017D1
cseg01:C00017D1			push	ebx
cseg01:C00017D2			mov	ebx, [esp+4+arg_0]
cseg01:C00017D6
cseg01:C00017D6	loc_C00017D6:				; CODE XREF: sub_C00017D1+17j
cseg01:C00017D6			push	ebx
cseg01:C00017D7			call	sub_C00017C1
cseg01:C00017DC			add	esp, 4
cseg01:C00017DF			test	eax, eax
cseg01:C00017E1			jz	short loc_C00017CF
cseg01:C00017E3			call	sub_C00014B7
cseg01:C00017E8			jmp	short loc_C00017D6
cseg01:C00017E8	sub_C00017D1	endp
cseg01:C00017E8
cseg01:C00017EA
cseg01:C00017EA	; =============== S U B	R O U T	I N E =======================================
cseg01:C00017EA
cseg01:C00017EA
cseg01:C00017EA	sub_C00017EA	proc near		; CODE XREF: sub_C00017FE:loc_C0001912p
cseg01:C00017EA			push	ebx
cseg01:C00017EB			push	esi
cseg01:C00017EC			push	edi
cseg01:C00017ED			inc	ds:dword_C00013F4
cseg01:C00017F3			adc	ds:dword_C00013F8, 0
cseg01:C00017FA			pop	edi
cseg01:C00017FB			pop	esi
cseg01:C00017FC			pop	ebx
cseg01:C00017FD			retn
cseg01:C00017FD	sub_C00017EA	endp
cseg01:C00017FD
cseg01:C00017FE
cseg01:C00017FE	; =============== S U B	R O U T	I N E =======================================
cseg01:C00017FE
cseg01:C00017FE
cseg01:C00017FE	sub_C00017FE	proc near		; CODE XREF: sub_C000055F+18Ap
cseg01:C00017FE						; sub_C00020E0+51p ...
cseg01:C00017FE
cseg01:C00017FE	var_1C		= dword	ptr -1Ch
cseg01:C00017FE	var_18		= dword	ptr -18h
cseg01:C00017FE	var_14		= dword	ptr -14h
cseg01:C00017FE	arg_0		= dword	ptr  4
cseg01:C00017FE	arg_4		= dword	ptr  8
cseg01:C00017FE	arg_8		= dword	ptr  0Ch
cseg01:C00017FE	arg_C		= byte ptr  10h
cseg01:C00017FE	arg_F		= byte ptr  13h
cseg01:C00017FE	arg_10		= dword	ptr  14h
cseg01:C00017FE
cseg01:C00017FE			push	ebx
cseg01:C00017FF			push	esi
cseg01:C0001800			push	edi
cseg01:C0001801			push	ebp
cseg01:C0001802			sub	esp, 0Ch
cseg01:C0001805			mov	ebp, [esp+1Ch+arg_8]
cseg01:C0001809			cmp	ds:dword_C00013A4, 0
cseg01:C0001810			jz	loc_C000191C
cseg01:C0001816			cmp	ds:dword_C00013A8, 0
cseg01:C000181D			jnz	short loc_C000182A
cseg01:C000181F			test	[esp+1Ch+arg_F], 80h
cseg01:C0001824			jz	loc_C000191C
cseg01:C000182A
cseg01:C000182A	loc_C000182A:				; CODE XREF: sub_C00017FE+1Fj
cseg01:C000182A			mov	ah, [esp+1Ch+arg_F]
cseg01:C000182E			test	ah, 20h
cseg01:C0001831			jnz	loc_C000191C
cseg01:C0001837			mov	ebx, [esp+1Ch+arg_0]
cseg01:C000183B			sub	ebx, 40h
cseg01:C000183E			xor	edi, edi
cseg01:C0001840			test	ah, 80h
cseg01:C0001843			jz	short loc_C000184A
cseg01:C0001845			mov	edi, 3Fh
cseg01:C000184A
cseg01:C000184A	loc_C000184A:				; CODE XREF: sub_C00017FE+45j
cseg01:C000184A			mov	dword ptr [ebx], 0
cseg01:C0001850			mov	dword ptr [ebx+10h], 1
cseg01:C0001857			test	[esp+1Ch+arg_C], 2
cseg01:C000185C			jz	short loc_C0001869
cseg01:C000185E			or	byte ptr [ebx+10h], 2
cseg01:C0001862			mov	eax, [esp+1Ch+arg_10]
cseg01:C0001866			mov	[ebx+24h], eax
cseg01:C0001869
cseg01:C0001869	loc_C0001869:				; CODE XREF: sub_C00017FE+5Ej
cseg01:C0001869			mov	eax, ds:dword_C00013F4
cseg01:C000186E			mov	[ebx+8], eax
cseg01:C0001871			mov	eax, ds:dword_C00013F8
cseg01:C0001876			mov	[ebx+0Ch], eax
cseg01:C0001879			mov	eax, [esp+1Ch+arg_4]
cseg01:C000187D			mov	[ebx+14h], eax
cseg01:C0001880			push	0
cseg01:C0001882			call	sub_C0001290
cseg01:C0001887			add	esp, 4
cseg01:C000188A			cmp	ds:dword_C00013B0, 0
cseg01:C0001891			jz	short loc_C00018A5
cseg01:C0001893
cseg01:C0001893	loc_C0001893:				; CODE XREF: sub_C00017FE+A5j
cseg01:C0001893			mov	esi, ds:dword_C00013B0
cseg01:C0001899			cmp	dword ptr [esi], 0
cseg01:C000189C			jnz	short loc_C00018A5
cseg01:C000189E			call	sub_C00014B7
cseg01:C00018A3			jmp	short loc_C0001893
cseg01:C00018A5	; ---------------------------------------------------------------------------
cseg01:C00018A5
cseg01:C00018A5	loc_C00018A5:				; CODE XREF: sub_C00017FE+93j
cseg01:C00018A5						; sub_C00017FE+9Ej
cseg01:C00018A5			push	0
cseg01:C00018A7			push	31h
cseg01:C00018A9			call	sub_C0000CD3
cseg01:C00018AE			add	esp, 8
cseg01:C00018B1			mov	eax, [ebx+18h]
cseg01:C00018B4			sub	eax, 40h
cseg01:C00018B7			or	edi, eax
cseg01:C00018B9			push	edi
cseg01:C00018BA			push	30h
cseg01:C00018BC			call	sub_C0000CD3
cseg01:C00018C1			add	esp, 8
cseg01:C00018C4			mov	ds:dword_C00013B0, ebx
cseg01:C00018CA			call	sub_C00012AE
cseg01:C00018CF			test	[esp+1Ch+arg_F], 40h
cseg01:C00018D4			jz	short loc_C00018FD
cseg01:C00018D6
cseg01:C00018D6	loc_C00018D6:				; CODE XREF: sub_C00017FE+E9j
cseg01:C00018D6			cmp	dword ptr [ebx], 0
cseg01:C00018D9			jnz	short loc_C00018E9
cseg01:C00018DB			push	1
cseg01:C00018DD			push	15h
cseg01:C00018DF			call	sub_C0000CD3
cseg01:C00018E4			add	esp, 8
cseg01:C00018E7			jmp	short loc_C00018D6
cseg01:C00018E9	; ---------------------------------------------------------------------------
cseg01:C00018E9
cseg01:C00018E9	loc_C00018E9:				; CODE XREF: sub_C00017FE+DBj
cseg01:C00018E9			test	ebp, ebp
cseg01:C00018EB			jz	short loc_C0001912
cseg01:C00018ED			mov	dword ptr [ebp+4], 1
cseg01:C00018F4			mov	dword ptr [ebp+0], 0
cseg01:C00018FB			jmp	short loc_C000190B
cseg01:C00018FD	; ---------------------------------------------------------------------------
cseg01:C00018FD
cseg01:C00018FD	loc_C00018FD:				; CODE XREF: sub_C00017FE+D6j
cseg01:C00018FD			test	ebp, ebp
cseg01:C00018FF			jz	short loc_C0001912
cseg01:C0001901			mov	dword ptr [ebp+4], 0
cseg01:C0001908			mov	[ebp+0], ebx
cseg01:C000190B
cseg01:C000190B	loc_C000190B:				; CODE XREF: sub_C00017FE+FDj
cseg01:C000190B			mov	dword ptr [ebp+8], 0
cseg01:C0001912
cseg01:C0001912	loc_C0001912:				; CODE XREF: sub_C00017FE+EDj
cseg01:C0001912						; sub_C00017FE+101j
cseg01:C0001912			call	sub_C00017EA
cseg01:C0001917			jmp	loc_C00019E1
cseg01:C000191C	; ---------------------------------------------------------------------------
cseg01:C000191C
cseg01:C000191C	loc_C000191C:				; CODE XREF: sub_C00017FE+12j
cseg01:C000191C						; sub_C00017FE+26j ...
cseg01:C000191C			mov	esi, [esp+1Ch+arg_0]
cseg01:C0001920			mov	edi, [esp+1Ch+arg_4]
cseg01:C0001924			shr	edi, 2
cseg01:C0001927			push	0
cseg01:C0001929			call	sub_C0001290
cseg01:C000192E			add	esp, 4
cseg01:C0001931			mov	eax, ds:dword_C00007B4
cseg01:C0001936			mov	ebx, [eax+8]
cseg01:C0001939			mov	edx, [eax+4]
cseg01:C000193C			mov	[esp+1Ch+var_14], edx
cseg01:C0001940			mov	eax, [eax]
cseg01:C0001942			mov	[esp+1Ch+var_18], eax
cseg01:C0001946			call	sub_C000179A
cseg01:C000194B			mov	edx, eax
cseg01:C000194D			mov	[esp+1Ch+var_1C], eax
cseg01:C0001950			mov	eax, edi
cseg01:C0001952			shl	eax, 2
cseg01:C0001955			add	eax, esi
cseg01:C0001957			mov	dword ptr [eax], 1Eh
cseg01:C000195D			mov	[eax+4], edx
cseg01:C0001960			add	edi, 2
cseg01:C0001963
cseg01:C0001963	loc_C0001963:				; CODE XREF: sub_C00017FE+196j
cseg01:C0001963			test	edi, edi
cseg01:C0001965			jbe	short loc_C0001996
cseg01:C0001967			mov	eax, ebx
cseg01:C0001969			shr	eax, 2
cseg01:C000196C			shl	eax, 2
cseg01:C000196F			mov	edx, ds:dword_C00007B4
cseg01:C0001975			add	eax, edx
cseg01:C0001977			mov	edx, [esi]
cseg01:C0001979			mov	[eax], edx
cseg01:C000197B			add	esi, 4
cseg01:C000197E			add	ebx, 4
cseg01:C0001981			cmp	ebx, [esp+1Ch+var_14]
cseg01:C0001985			jb	short loc_C000198B
cseg01:C0001987			mov	ebx, [esp+1Ch+var_18]
cseg01:C000198B
cseg01:C000198B	loc_C000198B:				; CODE XREF: sub_C00017FE+187j
cseg01:C000198B			mov	eax, ds:dword_C00007B4
cseg01:C0001990			mov	[eax+8], ebx
cseg01:C0001993			dec	edi
cseg01:C0001994			jmp	short loc_C0001963
cseg01:C0001996	; ---------------------------------------------------------------------------
cseg01:C0001996
cseg01:C0001996	loc_C0001996:				; CODE XREF: sub_C00017FE+167j
cseg01:C0001996			call	sub_C00012AE
cseg01:C000199B			test	[esp+1Ch+arg_F], 40h
cseg01:C00019A0			jz	short loc_C00019C9
cseg01:C00019A2			mov	edi, [esp+1Ch+var_1C]
cseg01:C00019A5			push	edi
cseg01:C00019A6			call	sub_C00017D1
cseg01:C00019AB			add	esp, 4
cseg01:C00019AE			test	ebp, ebp
cseg01:C00019B0			jz	short loc_C00019E1
cseg01:C00019B2			mov	dword ptr [ebp+4], 1
cseg01:C00019B9			mov	dword ptr [ebp+0], 0
cseg01:C00019C0			mov	dword ptr [ebp+8], 0
cseg01:C00019C7			jmp	short loc_C00019E1
cseg01:C00019C9	; ---------------------------------------------------------------------------
cseg01:C00019C9
cseg01:C00019C9	loc_C00019C9:				; CODE XREF: sub_C00017FE+1A2j
cseg01:C00019C9			test	ebp, ebp
cseg01:C00019CB			jz	short loc_C00019E1
cseg01:C00019CD			mov	dword ptr [ebp+4], 0FFh
cseg01:C00019D4			mov	eax, [esp+1Ch+var_1C]
cseg01:C00019D7			mov	[ebp+8], eax
cseg01:C00019DA			mov	dword ptr [ebp+0], 0
cseg01:C00019E1
cseg01:C00019E1	loc_C00019E1:				; CODE XREF: sub_C00017FE+119j
cseg01:C00019E1						; sub_C00017FE+1B2j ...
cseg01:C00019E1			test	ebp, ebp
cseg01:C00019E3			jz	short loc_C00019ED
cseg01:C00019E5			call	sub_C000177D
cseg01:C00019EA			mov	[ebp+0Ch], eax
cseg01:C00019ED
cseg01:C00019ED	loc_C00019ED:				; CODE XREF: sub_C00017FE+1E5j
cseg01:C00019ED			add	esp, 0Ch
cseg01:C00019F0			pop	ebp
cseg01:C00019F1			pop	edi
cseg01:C00019F2			pop	esi
cseg01:C00019F3			pop	ebx
cseg01:C00019F4			retn
cseg01:C00019F4	sub_C00017FE	endp
cseg01:C00019F4
cseg01:C00019F5
cseg01:C00019F5	; =============== S U B	R O U T	I N E =======================================
cseg01:C00019F5
cseg01:C00019F5
cseg01:C00019F5	sub_C00019F5	proc near		; CODE XREF: sub_C000050A+16p
cseg01:C00019F5
cseg01:C00019F5	var_24		= dword	ptr -24h
cseg01:C00019F5	var_20		= dword	ptr -20h
cseg01:C00019F5	var_1C		= dword	ptr -1Ch
cseg01:C00019F5	var_18		= dword	ptr -18h
cseg01:C00019F5	var_14		= dword	ptr -14h
cseg01:C00019F5
cseg01:C00019F5			push	ebx
cseg01:C00019F6			push	esi
cseg01:C00019F7			push	edi
cseg01:C00019F8			push	ebp
cseg01:C00019F9			sub	esp, 14h
cseg01:C00019FC			xor	eax, eax
cseg01:C00019FE			mov	[esp+24h+var_24], eax
cseg01:C0001A01			mov	[esp+24h+var_20], eax
cseg01:C0001A05			mov	ecx, 1
cseg01:C0001A0A			mov	[esp+24h+var_1C], ecx
cseg01:C0001A0E			mov	[esp+24h+var_18], ecx
cseg01:C0001A12			mov	[esp+24h+var_14], 2
cseg01:C0001A1A			mov	eax, esp
cseg01:C0001A1C			push	eax
cseg01:C0001A1D			push	offset aHwcursor ; "hwcursor"
cseg01:C0001A22			call	sub_C00014C4
cseg01:C0001A27			add	esp, 8
cseg01:C0001A2A			lea	eax, [esp+24h+var_20]
cseg01:C0001A2E			push	eax
cseg01:C0001A2F			push	offset aVram256	; "vram256"
cseg01:C0001A34			call	sub_C00014C4
cseg01:C0001A39			add	esp, 8
cseg01:C0001A3C			lea	eax, [esp+24h+var_1C]
cseg01:C0001A40			push	eax
cseg01:C0001A41			push	offset aRgb565bug ; "rgb565bug"
cseg01:C0001A46			call	sub_C00014C4
cseg01:C0001A4B			add	esp, 8
cseg01:C0001A4E			lea	eax, [esp+24h+var_18]
cseg01:C0001A52			push	eax
cseg01:C0001A53			push	offset aCommandbuffers ; "commandbuffers"
cseg01:C0001A58			call	sub_C00014C4
cseg01:C0001A5D			add	esp, 8
cseg01:C0001A60			lea	eax, [esp+24h+var_14]
cseg01:C0001A64			push	eax
cseg01:C0001A65			push	offset aHwversion ; "hwversion"
cseg01:C0001A6A			call	sub_C00014C4
cseg01:C0001A6F			add	esp, 8
cseg01:C0001A72			call	sub_C00010BC
cseg01:C0001A77			test	eax, eax
cseg01:C0001A79			jz	loc_C0001D16
cseg01:C0001A7F			push	0
cseg01:C0001A81			push	offset aTestD	; "test	%d\n"
cseg01:C0001A86			call	sub_C0002A03
cseg01:C0001A8B			add	esp, 8
cseg01:C0001A8E			mov	edi, [esp+24h+var_14]
cseg01:C0001A92			push	edi
cseg01:C0001A93			push	0
cseg01:C0001A95			call	sub_C0000861
cseg01:C0001A9A			mov	ebx, eax
cseg01:C0001A9C			add	esp, 8
cseg01:C0001A9F			push	eax
cseg01:C0001AA0			push	offset aSvga_initD ; "SVGA_Init: %d\n"
cseg01:C0001AA5			call	sub_C0002A03
cseg01:C0001AAA			add	esp, 8
cseg01:C0001AAD			test	ebx, ebx
cseg01:C0001AAF			jnz	loc_C0001D14
cseg01:C0001AB5			xor	ebp, ebp
cseg01:C0001AB7			mov	ds:dword_C000080C, ebp
cseg01:C0001ABD			cmp	[esp+24h+var_1C], 0
cseg01:C0001AC2			jz	short loc_C0001ACE
cseg01:C0001AC4			mov	ds:dword_C000080C, 8
cseg01:C0001ACE
cseg01:C0001ACE	loc_C0001ACE:				; CODE XREF: sub_C00019F5+CDj
cseg01:C0001ACE			mov	eax, offset aVram256 ; "vram256"
cseg01:C0001AD3			test	eax, eax
cseg01:C0001AD5			jz	short loc_C0001ADE
cseg01:C0001AD7			or	byte ptr ds:dword_C000080C, 10h
cseg01:C0001ADE
cseg01:C0001ADE	loc_C0001ADE:				; CODE XREF: sub_C00019F5+E0j
cseg01:C0001ADE			push	1
cseg01:C0001AE0			push	offset aTestD	; "test	%d\n"
cseg01:C0001AE5			call	sub_C0002A03
cseg01:C0001AEA			add	esp, 8
cseg01:C0001AED			push	11h
cseg01:C0001AEF			call	sub_C0000C93
cseg01:C0001AF4			add	esp, 4
cseg01:C0001AF7			test	al, 20h
cseg01:C0001AF9			jz	short loc_C0001B08
cseg01:C0001AFB			cmp	[esp+24h+var_24], 0
cseg01:C0001AFF			jz	short loc_C0001B08
cseg01:C0001B01			or	byte ptr ds:dword_C000080C, 2
cseg01:C0001B08
cseg01:C0001B08	loc_C0001B08:				; CODE XREF: sub_C00019F5+104j
cseg01:C0001B08						; sub_C00019F5+10Aj
cseg01:C0001B08			push	2
cseg01:C0001B0A			push	offset aTestD	; "test	%d\n"
cseg01:C0001B0F			call	sub_C0002A03
cseg01:C0001B14			add	esp, 8
cseg01:C0001B17			push	11h
cseg01:C0001B19			call	sub_C0000C93
cseg01:C0001B1E			add	esp, 4
cseg01:C0001B21			test	ah, 2
cseg01:C0001B24			jz	short loc_C0001B33
cseg01:C0001B26			cmp	[esp+24h+var_24], 0
cseg01:C0001B2A			jz	short loc_C0001B33
cseg01:C0001B2C			or	byte ptr ds:dword_C000080C, 4
cseg01:C0001B33
cseg01:C0001B33	loc_C0001B33:				; CODE XREF: sub_C00019F5+12Fj
cseg01:C0001B33						; sub_C00019F5+135j
cseg01:C0001B33			push	3
cseg01:C0001B35			push	offset aTestD	; "test	%d\n"
cseg01:C0001B3A			call	sub_C0002A03
cseg01:C0001B3F			add	esp, 8
cseg01:C0001B42			test	byte ptr ds:dword_C000080C, 10h
cseg01:C0001B49			jz	short loc_C0001B61
cseg01:C0001B4B			cmp	ds:dword_C00007D8, 8000000h
cseg01:C0001B55			jbe	short loc_C0001B61
cseg01:C0001B57			mov	ds:dword_C00007D8, 8000000h
cseg01:C0001B61
cseg01:C0001B61	loc_C0001B61:				; CODE XREF: sub_C00019F5+154j
cseg01:C0001B61						; sub_C00019F5+160j
cseg01:C0001B61			push	4
cseg01:C0001B63			push	offset aTestD	; "test	%d\n"
cseg01:C0001B68			call	sub_C0002A03
cseg01:C0001B6D			add	esp, 8
cseg01:C0001B70			push	offset aDevice_init__0 ; "Device_Init_proc success\n"
cseg01:C0001B75			call	sub_C0002A03
cseg01:C0001B7A			add	esp, 4
cseg01:C0001B7D			mov	ebp, ds:dword_C00007C8
cseg01:C0001B83			push	ebp
cseg01:C0001B84			mov	eax, ds:dword_C00007D4
cseg01:C0001B89			push	eax
cseg01:C0001B8A			push	offset aXX	; "  %X	-> %X\n"
cseg01:C0001B8F			call	sub_C0002A03
cseg01:C0001B94			add	esp, 0Ch
cseg01:C0001B97			push	0
cseg01:C0001B99			mov	edx, ds:dword_C00007D8
cseg01:C0001B9F			push	edx
cseg01:C0001BA0			mov	ecx, ds:dword_C00007D4
cseg01:C0001BA6			push	ecx
cseg01:C0001BA7			call	sub_C0001378
cseg01:C0001BAC			add	esp, 0Ch
cseg01:C0001BAF			mov	ds:dword_C00007D0, eax
cseg01:C0001BB4			call	sub_C0000B98
cseg01:C0001BB9			test	eax, eax
cseg01:C0001BBB			jnz	short loc_C0001BD9
cseg01:C0001BBD			push	eax
cseg01:C0001BBE			mov	ebx, ds:dword_C00007BC
cseg01:C0001BC4			push	ebx
cseg01:C0001BC5			mov	esi, ds:dword_C00007C8
cseg01:C0001BCB			push	esi
cseg01:C0001BCC			call	sub_C0001378
cseg01:C0001BD1			add	esp, 0Ch
cseg01:C0001BD4			mov	ds:dword_C00007C0, eax
cseg01:C0001BD9
cseg01:C0001BD9	loc_C0001BD9:				; CODE XREF: sub_C00019F5+1C6j
cseg01:C0001BD9			mov	eax, ds:dword_C00007D0
cseg01:C0001BDE			mov	ds:dword_C00007B8, eax
cseg01:C0001BE3			call	sub_C0000B98
cseg01:C0001BE8			test	eax, eax
cseg01:C0001BEA			jnz	short loc_C0001BF6
cseg01:C0001BEC			mov	eax, ds:dword_C00007C0
cseg01:C0001BF1			mov	ds:dword_C00007B4, eax
cseg01:C0001BF6
cseg01:C0001BF6	loc_C0001BF6:				; CODE XREF: sub_C00019F5+1F5j
cseg01:C0001BF6			push	offset aMemoryMapping ;	"Memory	mapping:\n"
cseg01:C0001BFB			call	sub_C0002A03
cseg01:C0001C00			add	esp, 4
cseg01:C0001C03			mov	edi, ds:dword_C00007B8
cseg01:C0001C09			push	edi
cseg01:C0001C0A			mov	ebp, ds:dword_C00007D4
cseg01:C0001C10			push	ebp
cseg01:C0001C11			push	offset aXX	; "  %X	-> %X\n"
cseg01:C0001C16			call	sub_C0002A03
cseg01:C0001C1B			add	esp, 0Ch
cseg01:C0001C1E			mov	eax, ds:dword_C00007B4
cseg01:C0001C23			push	eax
cseg01:C0001C24			mov	edx, ds:dword_C00007C8
cseg01:C0001C2A			push	edx
cseg01:C0001C2B			push	offset aXX	; "  %X	-> %X\n"
cseg01:C0001C30			call	sub_C0002A03
cseg01:C0001C35			add	esp, 0Ch
cseg01:C0001C38			mov	ecx, ds:dword_C0000800
cseg01:C0001C3E			push	ecx
cseg01:C0001C3F			mov	ebx, ds:dword_C00007F8
cseg01:C0001C45			push	ebx
cseg01:C0001C46			push	offset aXX	; "  %X	-> %X\n"
cseg01:C0001C4B			call	sub_C0002A03
cseg01:C0001C50			add	esp, 0Ch
cseg01:C0001C53			push	4
cseg01:C0001C55			push	74h
cseg01:C0001C57			push	offset aSizeOfGsvga2DD ; "Size of gSVGA(2) = %d	%d\n"
cseg01:C0001C5C			call	sub_C0002A03
cseg01:C0001C61			add	esp, 0Ch
cseg01:C0001C64			call	sub_C0000BA8
cseg01:C0001C69			push	11h
cseg01:C0001C6B			call	sub_C0000C93
cseg01:C0001C70			add	esp, 4
cseg01:C0001C73			test	eax, 8000000h
cseg01:C0001C78			jz	short loc_C0001C96
cseg01:C0001C7A			call	sub_C0001599
cseg01:C0001C7F			mov	ds:dword_C00013A0, 1
cseg01:C0001C89			push	offset aGbSupportedAnd ; "GB supported and allocated\n"
cseg01:C0001C8E			call	sub_C0002A03
cseg01:C0001C93			add	esp, 4
cseg01:C0001C96
cseg01:C0001C96	loc_C0001C96:				; CODE XREF: sub_C00019F5+283j
cseg01:C0001C96			push	11h
cseg01:C0001C98			call	sub_C0000C93
cseg01:C0001C9D			add	esp, 4
cseg01:C0001CA0			test	eax, 5000000h
cseg01:C0001CA5			jz	short loc_C0001CC5
cseg01:C0001CA7			cmp	[esp+24h+var_18], 0
cseg01:C0001CAC			jz	short loc_C0001CC5
cseg01:C0001CAE			mov	ds:dword_C00013A4, 1
cseg01:C0001CB8			push	offset aCbSupportedAnd ; "CB supported and allocated\n"
cseg01:C0001CBD			call	sub_C0002A03
cseg01:C0001CC2			add	esp, 4
cseg01:C0001CC5
cseg01:C0001CC5	loc_C0001CC5:				; CODE XREF: sub_C00019F5+2B0j
cseg01:C0001CC5						; sub_C00019F5+2B7j
cseg01:C0001CC5			call	sub_C0001644
cseg01:C0001CCA			mov	eax, ds:dword_C00010B4
cseg01:C0001CCF			mov	ebx, ds:dword_C00007D0
cseg01:C0001CD5			mov	[eax+20h], ebx
cseg01:C0001CD8			mov	eax, ds:dword_C00010B4
cseg01:C0001CDD			mov	ebx, ds:dword_C00007D8
cseg01:C0001CE3			mov	[eax+28h], ebx
cseg01:C0001CE6			push	0Dh
cseg01:C0001CE8			push	offset aVmwsmini_vxd ; "vmwsmini.vxd"
cseg01:C0001CED			mov	eax, ds:dword_C00010B4
cseg01:C0001CF2			add	eax, 2Ch
cseg01:C0001CF5			push	eax
cseg01:C0001CF6			call	sub_C0001222
cseg01:C0001CFB			add	esp, 0Ch
cseg01:C0001CFE			call	sub_C0001714
cseg01:C0001D03			mov	ds:dword_C0001400, eax
cseg01:C0001D08			mov	eax, 1
cseg01:C0001D0D			mov	ds:dword_C00013AC, eax
cseg01:C0001D12			jmp	short loc_C0001D16
cseg01:C0001D14	; ---------------------------------------------------------------------------
cseg01:C0001D14
cseg01:C0001D14	loc_C0001D14:				; CODE XREF: sub_C00019F5+BAj
cseg01:C0001D14			xor	eax, eax
cseg01:C0001D16
cseg01:C0001D16	loc_C0001D16:				; CODE XREF: sub_C00019F5+84j
cseg01:C0001D16						; sub_C00019F5+31Dj
cseg01:C0001D16			add	esp, 14h
cseg01:C0001D19			pop	ebp
cseg01:C0001D1A			pop	edi
cseg01:C0001D1B			pop	esi
cseg01:C0001D1C			pop	ebx
cseg01:C0001D1D			retn
cseg01:C0001D1D	sub_C00019F5	endp
cseg01:C0001D1D
cseg01:C0001D1E
cseg01:C0001D1E	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001D1E
cseg01:C0001D1E
cseg01:C0001D1E	sub_C0001D1E	proc near		; CODE XREF: sub_C0001D48+C2p
cseg01:C0001D1E						; sub_C0001D48+E7p ...
cseg01:C0001D1E
cseg01:C0001D1E	var_4		= dword	ptr -4
cseg01:C0001D1E	arg_0		= dword	ptr  4
cseg01:C0001D1E
cseg01:C0001D1E			sub	esp, 4
cseg01:C0001D21			xor	eax, eax
cseg01:C0001D23			mov	[esp+4+var_4], eax
cseg01:C0001D26			push	eax
cseg01:C0001D27			lea	eax, [esp+8+var_4]
cseg01:C0001D2B			push	eax
cseg01:C0001D2C			push	1
cseg01:C0001D2E			mov	eax, [esp+10h+arg_0]
cseg01:C0001D32			shr	eax, 0Ch
cseg01:C0001D35			push	eax
cseg01:C0001D36			call	sub_C0001366
cseg01:C0001D3B			add	esp, 10h
cseg01:C0001D3E			mov	eax, [esp+4+var_4]
cseg01:C0001D41			shr	eax, 0Ch
cseg01:C0001D44			add	esp, 4
cseg01:C0001D47			retn
cseg01:C0001D47	sub_C0001D1E	endp
cseg01:C0001D47
cseg01:C0001D48
cseg01:C0001D48	; =============== S U B	R O U T	I N E =======================================
cseg01:C0001D48
cseg01:C0001D48
cseg01:C0001D48	sub_C0001D48	proc near		; CODE XREF: sub_C000055F+1C5p
cseg01:C0001D48
cseg01:C0001D48	var_34		= dword	ptr -34h
cseg01:C0001D48	var_30		= dword	ptr -30h
cseg01:C0001D48	var_2C		= dword	ptr -2Ch
cseg01:C0001D48	var_28		= dword	ptr -28h
cseg01:C0001D48	var_24		= dword	ptr -24h
cseg01:C0001D48	var_20		= dword	ptr -20h
cseg01:C0001D48	var_1C		= dword	ptr -1Ch
cseg01:C0001D48	var_18		= dword	ptr -18h
cseg01:C0001D48	var_14		= dword	ptr -14h
cseg01:C0001D48	arg_0		= dword	ptr  4
cseg01:C0001D48
cseg01:C0001D48			push	ebx
cseg01:C0001D49			push	esi
cseg01:C0001D4A			push	edi
cseg01:C0001D4B			push	ebp
cseg01:C0001D4C			sub	esp, 24h
cseg01:C0001D4F			mov	eax, [esp+34h+arg_0]
cseg01:C0001D53			mov	eax, [eax+4]
cseg01:C0001D56			add	eax, 0FFFh
cseg01:C0001D5B			shr	eax, 0Ch
cseg01:C0001D5E			mov	[esp+34h+var_14], eax
cseg01:C0001D62			push	0Eh
cseg01:C0001D64			lea	eax, [esp+38h+var_34]
cseg01:C0001D68			push	eax
cseg01:C0001D69			push	100000h
cseg01:C0001D6E			push	0
cseg01:C0001D70			push	0
cseg01:C0001D72			push	0
cseg01:C0001D74			push	1
cseg01:C0001D76			mov	eax, [esp+50h+var_14]
cseg01:C0001D7A			inc	eax
cseg01:C0001D7B			push	eax
cseg01:C0001D7C			call	sub_C000135A
cseg01:C0001D81			add	esp, 20h
cseg01:C0001D84			test	eax, eax
cseg01:C0001D86			jz	short loc_C0001DD7
cseg01:C0001D88			mov	edx, [esp+34h+var_34]
cseg01:C0001D8B			shr	edx, 0Ch
cseg01:C0001D8E			inc	edx
cseg01:C0001D8F			mov	[eax], edx
cseg01:C0001D91			mov	edx, [esp+34h+var_14]
cseg01:C0001D95			mov	[eax+4], edx
cseg01:C0001D98			lea	ebx, [eax+8]
cseg01:C0001D9B			mov	dword ptr [ebx], 0
cseg01:C0001DA1			mov	dword ptr [ebx+4], 0
cseg01:C0001DA8			add	eax, 1000h
cseg01:C0001DAD			mov	edx, [esp+34h+arg_0]
cseg01:C0001DB1			mov	[edx+8], eax
cseg01:C0001DB4			mov	dword ptr [edx+0Ch], 0
cseg01:C0001DBB			mov	eax, [esp+34h+var_34]
cseg01:C0001DBE			shr	eax, 0Ch
cseg01:C0001DC1			mov	[edx+10h], eax
cseg01:C0001DC4			mov	dword ptr [edx+14h], 0
cseg01:C0001DCB			mov	eax, [esp+34h+var_34]
cseg01:C0001DCE			shr	eax, 0Ch
cseg01:C0001DD1			inc	eax
cseg01:C0001DD2			jmp	loc_C000201D
cseg01:C0001DD7	; ---------------------------------------------------------------------------
cseg01:C0001DD7
cseg01:C0001DD7	loc_C0001DD7:				; CODE XREF: sub_C0001D48+3Ej
cseg01:C0001DD7			mov	ebp, 1
cseg01:C0001DDC			mov	[esp+34h+var_20], eax
cseg01:C0001DE0			mov	[esp+34h+var_30], eax
cseg01:C0001DE4			push	8
cseg01:C0001DE6			push	eax
cseg01:C0001DE7			push	100000h
cseg01:C0001DEC			push	eax
cseg01:C0001DED			push	eax
cseg01:C0001DEE			push	eax
cseg01:C0001DEF			push	ebp
cseg01:C0001DF0			mov	ecx, [esp+50h+var_14]
cseg01:C0001DF4			push	ecx
cseg01:C0001DF5			call	sub_C000135A
cseg01:C0001DFA			add	esp, 20h
cseg01:C0001DFD			mov	[esp+34h+var_18], eax
cseg01:C0001E01			test	eax, eax
cseg01:C0001E03			jz	loc_C000204D
cseg01:C0001E09			push	eax
cseg01:C0001E0A			call	sub_C0001D1E
cseg01:C0001E0F			add	esp, 4
cseg01:C0001E12			mov	edi, eax
cseg01:C0001E14			mov	ebx, ebp
cseg01:C0001E16			mov	esi, ebp
cseg01:C0001E18
cseg01:C0001E18	loc_C0001E18:				; CODE XREF: sub_C0001D48+105j
cseg01:C0001E18			lea	eax, [ebp+1]
cseg01:C0001E1B			mov	[esp+34h+var_24], eax
cseg01:C0001E1F			cmp	esi, [esp+34h+var_14]
cseg01:C0001E23			jnb	short loc_C0001E4F
cseg01:C0001E25			mov	eax, esi
cseg01:C0001E27			shl	eax, 0Ch
cseg01:C0001E2A			add	eax, [esp+34h+var_18]
cseg01:C0001E2E			push	eax
cseg01:C0001E2F			call	sub_C0001D1E
cseg01:C0001E34			add	esp, 4
cseg01:C0001E37			lea	edx, [edi+ebx]
cseg01:C0001E3A			cmp	eax, edx
cseg01:C0001E3C			jz	short loc_C0001E4B
cseg01:C0001E3E			mov	edi, eax
cseg01:C0001E40			mov	ebx, 1
cseg01:C0001E45			mov	ebp, [esp+34h+var_24]
cseg01:C0001E49			jmp	short loc_C0001E4C
cseg01:C0001E4B	; ---------------------------------------------------------------------------
cseg01:C0001E4B
cseg01:C0001E4B	loc_C0001E4B:				; CODE XREF: sub_C0001D48+F4j
cseg01:C0001E4B			inc	ebx
cseg01:C0001E4C
cseg01:C0001E4C	loc_C0001E4C:				; CODE XREF: sub_C0001D48+101j
cseg01:C0001E4C			inc	esi
cseg01:C0001E4D			jmp	short loc_C0001E18
cseg01:C0001E4F	; ---------------------------------------------------------------------------
cseg01:C0001E4F
cseg01:C0001E4F	loc_C0001E4F:				; CODE XREF: sub_C0001D48+DBj
cseg01:C0001E4F			shr	eax, 9
cseg01:C0001E52			inc	eax
cseg01:C0001E53			add	eax, ebp
cseg01:C0001E55			inc	eax
cseg01:C0001E56			shr	eax, 9
cseg01:C0001E59			inc	eax
cseg01:C0001E5A			push	8
cseg01:C0001E5C			push	0
cseg01:C0001E5E			push	100000h
cseg01:C0001E63			push	0
cseg01:C0001E65			push	0
cseg01:C0001E67			push	0
cseg01:C0001E69			push	1
cseg01:C0001E6B			push	eax
cseg01:C0001E6C			call	sub_C000135A
cseg01:C0001E71			mov	esi, eax
cseg01:C0001E73			add	esp, 20h
cseg01:C0001E76			mov	[esp+34h+var_2C], eax
cseg01:C0001E7A			test	eax, eax
cseg01:C0001E7C			jnz	short loc_C0001E93
cseg01:C0001E7E			push	eax
cseg01:C0001E7F			mov	ecx, [esp+38h+var_18]
cseg01:C0001E83			push	ecx
cseg01:C0001E84
cseg01:C0001E84	loc_C0001E84:				; CODE XREF: sub_C0001D48+23Dj
cseg01:C0001E84			call	sub_C0001360
cseg01:C0001E89			add	esp, 8
cseg01:C0001E8C			xor	eax, eax
cseg01:C0001E8E			jmp	loc_C000204D
cseg01:C0001E93	; ---------------------------------------------------------------------------
cseg01:C0001E93
cseg01:C0001E93	loc_C0001E93:				; CODE XREF: sub_C0001D48+134j
cseg01:C0001E93			mov	ebx, eax
cseg01:C0001E95			mov	edx, [esp+34h+var_18]
cseg01:C0001E99			push	edx
cseg01:C0001E9A			call	sub_C0001D1E
cseg01:C0001E9F			add	esp, 4
cseg01:C0001EA2			mov	[esi], eax
cseg01:C0001EA4			mov	dword ptr [esi+4], 1
cseg01:C0001EAB			mov	ebp, 1
cseg01:C0001EB0			mov	esi, ebp
cseg01:C0001EB2
cseg01:C0001EB2	loc_C0001EB2:				; CODE XREF: sub_C0001D48+1DDj
cseg01:C0001EB2			lea	edi, [ebx+8]
cseg01:C0001EB5			mov	ecx, [esp+34h+var_14]
cseg01:C0001EB9			cmp	esi, ecx
cseg01:C0001EBB			jnb	short loc_C0001F27
cseg01:C0001EBD			mov	eax, esi
cseg01:C0001EBF			shl	eax, 0Ch
cseg01:C0001EC2			add	eax, [esp+34h+var_18]
cseg01:C0001EC6			push	eax
cseg01:C0001EC7			call	sub_C0001D1E
cseg01:C0001ECC			mov	edx, eax
cseg01:C0001ECE			add	esp, 4
cseg01:C0001ED1			mov	[esp+34h+var_28], eax
cseg01:C0001ED5			mov	eax, [ebx]
cseg01:C0001ED7			mov	ecx, [ebx+4]
cseg01:C0001EDA			add	eax, ecx
cseg01:C0001EDC			cmp	edx, eax
cseg01:C0001EDE			jnz	short loc_C0001EE8
cseg01:C0001EE0			lea	edi, [ecx+1]
cseg01:C0001EE3			mov	[ebx+4], edi
cseg01:C0001EE6			jmp	short loc_C0001F24
cseg01:C0001EE8	; ---------------------------------------------------------------------------
cseg01:C0001EE8
cseg01:C0001EE8	loc_C0001EE8:				; CODE XREF: sub_C0001D48+196j
cseg01:C0001EE8			lea	eax, [ebp+1]
cseg01:C0001EEB			mov	[esp+34h+var_1C], eax
cseg01:C0001EEF			test	word ptr [esp+34h+var_1C], 1FFh
cseg01:C0001EF6			jnz	short loc_C0001F13
cseg01:C0001EF8			mov	ebx, edi
cseg01:C0001EFA			mov	dword ptr [edi+4], 0
cseg01:C0001F01			lea	eax, [edi+8]
cseg01:C0001F04			push	eax
cseg01:C0001F05			call	sub_C0001D1E
cseg01:C0001F0A			add	esp, 4
cseg01:C0001F0D			mov	[edi], eax
cseg01:C0001F0F			mov	ebp, [esp+34h+var_1C]
cseg01:C0001F13
cseg01:C0001F13	loc_C0001F13:				; CODE XREF: sub_C0001D48+1AEj
cseg01:C0001F13			add	ebx, 8
cseg01:C0001F16			mov	eax, [esp+34h+var_28]
cseg01:C0001F1A			mov	[ebx], eax
cseg01:C0001F1C			mov	dword ptr [ebx+4], 1
cseg01:C0001F23			inc	ebp
cseg01:C0001F24
cseg01:C0001F24	loc_C0001F24:				; CODE XREF: sub_C0001D48+19Ej
cseg01:C0001F24			inc	esi
cseg01:C0001F25			jmp	short loc_C0001EB2
cseg01:C0001F27	; ---------------------------------------------------------------------------
cseg01:C0001F27
cseg01:C0001F27	loc_C0001F27:				; CODE XREF: sub_C0001D48+173j
cseg01:C0001F27			mov	dword ptr [edi], 0
cseg01:C0001F2D			mov	dword ptr [edi+4], 0
cseg01:C0001F34			cmp	ds:dword_C00013A0, 0
cseg01:C0001F3B			jz	loc_C0001FE2
cseg01:C0001F41			push	0Eh
cseg01:C0001F43			lea	eax, [esp+38h+var_30]
cseg01:C0001F47			push	eax
cseg01:C0001F48			push	100000h
cseg01:C0001F4D			push	0
cseg01:C0001F4F			push	0
cseg01:C0001F51			push	0
cseg01:C0001F53			push	1
cseg01:C0001F55			lea	eax, [ecx+3FFh]
cseg01:C0001F5B			shr	eax, 0Ah
cseg01:C0001F5E			inc	eax
cseg01:C0001F5F			push	eax
cseg01:C0001F60			call	sub_C000135A
cseg01:C0001F65			add	esp, 20h
cseg01:C0001F68			mov	[esp+34h+var_20], eax
cseg01:C0001F6C			test	eax, eax
cseg01:C0001F6E			jnz	short loc_C0001F8A
cseg01:C0001F70			push	eax
cseg01:C0001F71			mov	esi, [esp+38h+var_18]
cseg01:C0001F75			push	esi
cseg01:C0001F76			call	sub_C0001360
cseg01:C0001F7B			add	esp, 8
cseg01:C0001F7E			push	0
cseg01:C0001F80			mov	edi, [esp+38h+var_2C]
cseg01:C0001F84			push	edi
cseg01:C0001F85			jmp	loc_C0001E84
cseg01:C0001F8A	; ---------------------------------------------------------------------------
cseg01:C0001F8A
cseg01:C0001F8A	loc_C0001F8A:				; CODE XREF: sub_C0001D48+226j
cseg01:C0001F8A			xor	ebx, ebx
cseg01:C0001F8C
cseg01:C0001F8C	loc_C0001F8C:				; CODE XREF: sub_C0001D48+26Aj
cseg01:C0001F8C			mov	eax, [esp+34h+var_14]
cseg01:C0001F90			add	eax, 3FFh
cseg01:C0001F95			shr	eax, 0Ah
cseg01:C0001F98			cmp	ebx, eax
cseg01:C0001F9A			jnb	short loc_C0001FB4
cseg01:C0001F9C			mov	edx, [esp+34h+var_30]
cseg01:C0001FA0			shr	edx, 0Ch
cseg01:C0001FA3			add	edx, ebx
cseg01:C0001FA5			mov	eax, ebx
cseg01:C0001FA7			shl	eax, 2
cseg01:C0001FAA			add	eax, [esp+34h+var_20]
cseg01:C0001FAE			inc	edx
cseg01:C0001FAF			mov	[eax], edx
cseg01:C0001FB1			inc	ebx
cseg01:C0001FB2			jmp	short loc_C0001F8C
cseg01:C0001FB4	; ---------------------------------------------------------------------------
cseg01:C0001FB4
cseg01:C0001FB4	loc_C0001FB4:				; CODE XREF: sub_C0001D48+252j
cseg01:C0001FB4			xor	ebx, ebx
cseg01:C0001FB6
cseg01:C0001FB6	loc_C0001FB6:				; CODE XREF: sub_C0001D48+298j
cseg01:C0001FB6			cmp	ebx, [esp+34h+var_14]
cseg01:C0001FBA			jnb	short loc_C0001FE2
cseg01:C0001FBC			mov	eax, ebx
cseg01:C0001FBE			shl	eax, 0Ch
cseg01:C0001FC1			add	eax, [esp+34h+var_18]
cseg01:C0001FC5			push	eax
cseg01:C0001FC6			call	sub_C0001D1E
cseg01:C0001FCB			mov	edx, eax
cseg01:C0001FCD			add	esp, 4
cseg01:C0001FD0			mov	eax, ebx
cseg01:C0001FD2			shl	eax, 2
cseg01:C0001FD5			add	eax, [esp+34h+var_20]
cseg01:C0001FD9			mov	[eax+1000h], edx
cseg01:C0001FDF			inc	ebx
cseg01:C0001FE0			jmp	short loc_C0001FB6
cseg01:C0001FE2	; ---------------------------------------------------------------------------
cseg01:C0001FE2
cseg01:C0001FE2	loc_C0001FE2:				; CODE XREF: sub_C0001D48+1F3j
cseg01:C0001FE2						; sub_C0001D48+272j
cseg01:C0001FE2			mov	eax, [esp+34h+var_18]
cseg01:C0001FE6			mov	edx, [esp+34h+arg_0]
cseg01:C0001FEA			mov	[edx+8], eax
cseg01:C0001FED			mov	eax, [esp+34h+var_2C]
cseg01:C0001FF1			mov	[edx+0Ch], eax
cseg01:C0001FF4			push	eax
cseg01:C0001FF5			call	sub_C0001D1E
cseg01:C0001FFA			add	esp, 4
cseg01:C0001FFD			mov	edx, [esp+34h+arg_0]
cseg01:C0002001			mov	[edx+10h], eax
cseg01:C0002004			mov	eax, [esp+34h+var_20]
cseg01:C0002008			mov	[edx+14h], eax
cseg01:C000200B			mov	dword ptr [edx+18h], 0
cseg01:C0002012			test	eax, eax
cseg01:C0002014			jz	short loc_C0002020
cseg01:C0002016			mov	eax, [esp+34h+var_30]
cseg01:C000201A			shr	eax, 0Ch
cseg01:C000201D
cseg01:C000201D	loc_C000201D:				; CODE XREF: sub_C0001D48+8Aj
cseg01:C000201D			mov	[edx+18h], eax
cseg01:C0002020
cseg01:C0002020	loc_C0002020:				; CODE XREF: sub_C0001D48+2CCj
cseg01:C0002020			call	sub_C0000D7D
cseg01:C0002025			mov	eax, [esp+34h+arg_0]
cseg01:C0002029			mov	edi, [eax]
cseg01:C000202B			push	edi
cseg01:C000202C			push	29h
cseg01:C000202E			call	sub_C0000CD3
cseg01:C0002033			add	esp, 8
cseg01:C0002036			mov	eax, [esp+34h+arg_0]
cseg01:C000203A			mov	ebp, [eax+10h]
cseg01:C000203D			push	ebp
cseg01:C000203E			push	2Ah
cseg01:C0002040			call	sub_C0000CD3
cseg01:C0002045			add	esp, 8
cseg01:C0002048			mov	eax, 1
cseg01:C000204D
cseg01:C000204D	loc_C000204D:				; CODE XREF: sub_C0001D48+BBj
cseg01:C000204D						; sub_C0001D48+146j
cseg01:C000204D			add	esp, 24h
cseg01:C0002050			pop	ebp
cseg01:C0002051			pop	edi
cseg01:C0002052			pop	esi
cseg01:C0002053			pop	ebx
cseg01:C0002054			retn
cseg01:C0002054	sub_C0001D48	endp
cseg01:C0002054
cseg01:C0002055
cseg01:C0002055	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002055
cseg01:C0002055
cseg01:C0002055	sub_C0002055	proc near		; CODE XREF: sub_C000055F+1D0p
cseg01:C0002055
cseg01:C0002055	arg_0		= dword	ptr  4
cseg01:C0002055
cseg01:C0002055			push	ebx
cseg01:C0002056			push	esi
cseg01:C0002057			push	edi
cseg01:C0002058			mov	ebx, [esp+0Ch+arg_0]
cseg01:C000205C			mov	esi, [ebx+8]
cseg01:C000205F			call	sub_C0000D7D
cseg01:C0002064			mov	eax, [ebx]
cseg01:C0002066			push	eax
cseg01:C0002067			push	29h
cseg01:C0002069			call	sub_C0000CD3
cseg01:C000206E			add	esp, 8
cseg01:C0002071			push	0
cseg01:C0002073			push	2Ah
cseg01:C0002075			call	sub_C0000CD3
cseg01:C000207A			add	esp, 8
cseg01:C000207D			call	sub_C0000D7D
cseg01:C0002082			mov	edx, [ebx+0Ch]
cseg01:C0002085			test	edx, edx
cseg01:C0002087			jz	short loc_C0002096
cseg01:C0002089			push	0
cseg01:C000208B			push	edx
cseg01:C000208C			call	sub_C0001360
cseg01:C0002091			add	esp, 8
cseg01:C0002094			jmp	short loc_C000209C
cseg01:C0002096	; ---------------------------------------------------------------------------
cseg01:C0002096
cseg01:C0002096	loc_C0002096:				; CODE XREF: sub_C0002055+32j
cseg01:C0002096			sub	esi, 1000h
cseg01:C000209C
cseg01:C000209C	loc_C000209C:				; CODE XREF: sub_C0002055+3Fj
cseg01:C000209C			mov	edi, [ebx+10h]
cseg01:C000209F			test	edi, edi
cseg01:C00020A1			jz	short loc_C00020AE
cseg01:C00020A3			push	0
cseg01:C00020A5			push	edi
cseg01:C00020A6			call	sub_C0001360
cseg01:C00020AB			add	esp, 8
cseg01:C00020AE
cseg01:C00020AE	loc_C00020AE:				; CODE XREF: sub_C0002055+4Cj
cseg01:C00020AE			push	0
cseg01:C00020B0			push	esi
cseg01:C00020B1			call	sub_C0001360
cseg01:C00020B6			add	esp, 8
cseg01:C00020B9			mov	dword ptr [ebx+8], 0
cseg01:C00020C0			mov	dword ptr [ebx+0Ch], 0
cseg01:C00020C7			mov	dword ptr [ebx+14h], 0
cseg01:C00020CE			mov	dword ptr [ebx+10h], 0
cseg01:C00020D5			mov	dword ptr [ebx+18h], 0
cseg01:C00020DC			pop	edi
cseg01:C00020DD			pop	esi
cseg01:C00020DE			pop	ebx
cseg01:C00020DF			retn
cseg01:C00020DF	sub_C0002055	endp
cseg01:C00020DF
cseg01:C00020E0
cseg01:C00020E0	; =============== S U B	R O U T	I N E =======================================
cseg01:C00020E0
cseg01:C00020E0
cseg01:C00020E0	sub_C00020E0	proc near		; CODE XREF: sub_C0002353+27p
cseg01:C00020E0						; sub_C0002620p
cseg01:C00020E0			push	ebx
cseg01:C00020E1			xor	eax, eax
cseg01:C00020E3			mov	ds:dword_C00013A8, eax
cseg01:C00020E8			cmp	ds:dword_C00013A4, 0
cseg01:C00020EF			jz	short loc_C0002139
cseg01:C00020F1			mov	ebx, ds:dword_C0001400
cseg01:C00020F7			push	4Ch
cseg01:C00020F9			push	eax
cseg01:C00020FA			push	ebx
cseg01:C00020FB			call	sub_C00011BA
cseg01:C0002100			add	esp, 0Ch
cseg01:C0002103			mov	dword ptr [ebx+14h], 0Ch
cseg01:C000210A			mov	dword ptr [ebx+40h], 1
cseg01:C0002111			mov	dword ptr [ebx+44h], 0
cseg01:C0002118			mov	dword ptr [ebx+48h], 0
cseg01:C000211F			push	0
cseg01:C0002121			push	0C0000000h
cseg01:C0002126			push	0
cseg01:C0002128			push	4Ch
cseg01:C000212A			mov	ecx, ds:dword_C0001400
cseg01:C0002130			push	ecx
cseg01:C0002131			call	sub_C00017FE
cseg01:C0002136			add	esp, 14h
cseg01:C0002139
cseg01:C0002139	loc_C0002139:				; CODE XREF: sub_C00020E0+Fj
cseg01:C0002139			pop	ebx
cseg01:C000213A			retn
cseg01:C000213A	sub_C00020E0	endp
cseg01:C000213A
cseg01:C000213B
cseg01:C000213B	; =============== S U B	R O U T	I N E =======================================
cseg01:C000213B
cseg01:C000213B
cseg01:C000213B	sub_C000213B	proc near		; CODE XREF: sub_C0002353+49p
cseg01:C000213B			push	280h
cseg01:C0002140			call	sub_C0000D34
cseg01:C0002145			add	esp, 4
cseg01:C0002148			test	eax, eax
cseg01:C000214A			setnz	al
cseg01:C000214D			movzx	eax, al
cseg01:C0002150			retn
cseg01:C0002150	sub_C000213B	endp
cseg01:C0002150
cseg01:C0002151
cseg01:C0002151	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002151
cseg01:C0002151
cseg01:C0002151	sub_C0002151	proc near		; CODE XREF: sub_C0002353+44p
cseg01:C0002151
cseg01:C0002151	; FUNCTION CHUNK AT cseg01:C0002183 SIZE 00000006 BYTES
cseg01:C0002151
cseg01:C0002151			push	100h
cseg01:C0002156			call	sub_C0000D34
cseg01:C000215B			add	esp, 4
cseg01:C000215E			test	eax, eax
cseg01:C0002160			jz	short loc_C000216C
cseg01:C0002162			mov	eax, ds:dword_C00007B4
cseg01:C0002167			mov	eax, [eax+44h]
cseg01:C000216A			jmp	short loc_C0002174
cseg01:C000216C	; ---------------------------------------------------------------------------
cseg01:C000216C
cseg01:C000216C	loc_C000216C:				; CODE XREF: sub_C0002151+Fj
cseg01:C000216C			mov	eax, ds:dword_C00007B4
cseg01:C0002171			mov	eax, [eax+1Ch]
cseg01:C0002174
cseg01:C0002174	loc_C0002174:				; CODE XREF: sub_C0002151+19j
cseg01:C0002174			test	eax, eax
cseg01:C0002176			jnz	short loc_C0002179
cseg01:C0002178			retn
cseg01:C0002179	; ---------------------------------------------------------------------------
cseg01:C0002179
cseg01:C0002179	loc_C0002179:				; CODE XREF: sub_C0002151+25j
cseg01:C0002179			cmp	eax, 20000h
cseg01:C000217E			jge	short loc_C0002183
cseg01:C000217E	sub_C0002151	endp
cseg01:C000217E
cseg01:C0002180
cseg01:C0002180	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002180
cseg01:C0002180
cseg01:C0002180	sub_C0002180	proc near		; CODE XREF: sub_C000037B+DCp
cseg01:C0002180						; sub_C000055F+12Dp
cseg01:C0002180			xor	eax, eax
cseg01:C0002182			retn
cseg01:C0002182	sub_C0002180	endp
cseg01:C0002182
cseg01:C0002183	; ---------------------------------------------------------------------------
cseg01:C0002183	; START	OF FUNCTION CHUNK FOR sub_C0002151
cseg01:C0002183
cseg01:C0002183	loc_C0002183:				; CODE XREF: sub_C0002151+2Dj
cseg01:C0002183			mov	eax, 1
cseg01:C0002188			retn
cseg01:C0002188	; END OF FUNCTION CHUNK	FOR sub_C0002151
cseg01:C0002189
cseg01:C0002189	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002189
cseg01:C0002189
cseg01:C0002189	sub_C0002189	proc near		; CODE XREF: sub_C00021C7+7Ap
cseg01:C0002189						; sub_C00021C7+C9p ...
cseg01:C0002189
cseg01:C0002189	arg_0		= dword	ptr  4
cseg01:C0002189	arg_4		= dword	ptr  8
cseg01:C0002189
cseg01:C0002189			mov	eax, [esp+arg_4]
cseg01:C000218D			add	eax, 7
cseg01:C0002190			shr	eax, 3
cseg01:C0002193			imul	eax, [esp+arg_0]
cseg01:C0002198			add	eax, 3
cseg01:C000219B			and	al, 0FCh
cseg01:C000219D			retn
cseg01:C000219D	sub_C0002189	endp
cseg01:C000219D
cseg01:C000219E
cseg01:C000219E	; =============== S U B	R O U T	I N E =======================================
cseg01:C000219E
cseg01:C000219E
cseg01:C000219E	sub_C000219E	proc near		; CODE XREF: sub_C00021C7+1Fp
cseg01:C000219E						; sub_C00021C7+A8p ...
cseg01:C000219E
cseg01:C000219E	arg_0		= dword	ptr  4
cseg01:C000219E	arg_4		= dword	ptr  8
cseg01:C000219E	arg_8		= dword	ptr  0Ch
cseg01:C000219E	arg_C		= dword	ptr  10h
cseg01:C000219E
cseg01:C000219E			push	ebx
cseg01:C000219F			mov	edx, [esp+4+arg_4]
cseg01:C00021A3			mov	eax, [edx]
cseg01:C00021A5			shr	eax, 2
cseg01:C00021A8			shl	eax, 2
cseg01:C00021AB			add	eax, [esp+4+arg_0]
cseg01:C00021AF			mov	ecx, [esp+4+arg_8]
cseg01:C00021B3			mov	[eax], ecx
cseg01:C00021B5			mov	ecx, [edx]
cseg01:C00021B7			add	ecx, 4
cseg01:C00021BA			mov	ebx, [esp+4+arg_C]
cseg01:C00021BE			add	ebx, ecx
cseg01:C00021C0			mov	[edx], ebx
cseg01:C00021C2			add	eax, 4
cseg01:C00021C5			pop	ebx
cseg01:C00021C6			retn
cseg01:C00021C6	sub_C000219E	endp
cseg01:C00021C6
cseg01:C00021C7
cseg01:C00021C7	; =============== S U B	R O U T	I N E =======================================
cseg01:C00021C7
cseg01:C00021C7
cseg01:C00021C7	sub_C00021C7	proc near		; CODE XREF: sub_C0002353+59p
cseg01:C00021C7
cseg01:C00021C7	var_10		= dword	ptr -10h
cseg01:C00021C7	arg_0		= dword	ptr  4
cseg01:C00021C7	arg_4		= dword	ptr  8
cseg01:C00021C7	arg_8		= dword	ptr  0Ch
cseg01:C00021C7
cseg01:C00021C7			push	ebx
cseg01:C00021C8			push	esi
cseg01:C00021C9			push	edi
cseg01:C00021CA			sub	esp, 4
cseg01:C00021CD			mov	edi, [esp+10h+arg_8]
cseg01:C00021D1			xor	eax, eax
cseg01:C00021D3			mov	[esp+10h+var_10], eax
cseg01:C00021D6			push	2Ch
cseg01:C00021D8			push	22h
cseg01:C00021DA			lea	eax, [esp+18h+var_10]
cseg01:C00021DE			push	eax
cseg01:C00021DF			mov	edx, ds:dword_C0001400
cseg01:C00021E5			push	edx
cseg01:C00021E6			call	sub_C000219E
cseg01:C00021EB			mov	ebx, eax
cseg01:C00021ED			add	esp, 10h
cseg01:C00021F0			mov	esi, eax
cseg01:C00021F2			push	2Ch
cseg01:C00021F4			push	0
cseg01:C00021F6			push	eax
cseg01:C00021F7			call	sub_C00011BA
cseg01:C00021FC			add	esp, 0Ch
cseg01:C00021FF			mov	dword ptr [ebx], 2Ch
cseg01:C0002205			mov	dword ptr [ebx+4], 0
cseg01:C000220C			mov	dword ptr [ebx+8], 3
cseg01:C0002213			mov	eax, [esp+10h+arg_0]
cseg01:C0002217			mov	[ebx+0Ch], eax
cseg01:C000221A			mov	eax, [esp+10h+arg_4]
cseg01:C000221E			mov	[ebx+10h], eax
cseg01:C0002221			mov	dword ptr [ebx+14h], 0
cseg01:C0002228			mov	dword ptr [ebx+18h], 0
cseg01:C000222F			mov	dword ptr [ebx+28h], 0
cseg01:C0002236			cmp	edi, 20h
cseg01:C0002239			jnb	short loc_C000224C
cseg01:C000223B			push	edi
cseg01:C000223C			mov	ecx, [esp+14h+arg_0]
cseg01:C0002240			push	ecx
cseg01:C0002241			call	sub_C0002189
cseg01:C0002246			add	esp, 8
cseg01:C0002249			mov	[ebx+24h], eax
cseg01:C000224C
cseg01:C000224C	loc_C000224C:				; CODE XREF: sub_C00021C7+72j
cseg01:C000224C			mov	dword ptr [esi+20h], 0
cseg01:C0002253			mov	dword ptr [esi+1Ch], 0FFFFFFFEh
cseg01:C000225A			cmp	edi, 0Fh
cseg01:C000225D			jb	short loc_C00022C1
cseg01:C000225F			push	10h
cseg01:C0002261			push	24h
cseg01:C0002263			lea	eax, [esp+18h+var_10]
cseg01:C0002267			push	eax
cseg01:C0002268			mov	ebx, ds:dword_C0001400
cseg01:C000226E			push	ebx
cseg01:C000226F			call	sub_C000219E
cseg01:C0002274			mov	ebx, eax
cseg01:C0002276			add	esp, 10h
cseg01:C0002279			test	eax, eax
cseg01:C000227B			jz	short loc_C00022C1
cseg01:C000227D			mov	dword ptr [eax], 0FFFFFFFEh
cseg01:C0002283			mov	dword ptr [eax+4], 0
cseg01:C000228A			push	edi
cseg01:C000228B			mov	esi, [esp+14h+arg_0]
cseg01:C000228F			push	esi
cseg01:C0002290			call	sub_C0002189
cseg01:C0002295			add	esp, 8
cseg01:C0002298			mov	[ebx+8], eax
cseg01:C000229B			mov	eax, edi
cseg01:C000229D			and	eax, 0FFh
cseg01:C00022A2			mov	byte ptr [ebx+0Dh], 0
cseg01:C00022A6			shl	eax, 8
cseg01:C00022A9			or	[ebx+0Ch], eax
cseg01:C00022AC			cmp	edi, 18h
cseg01:C00022AF			jb	short loc_C00022BA
cseg01:C00022B1			mov	dword ptr [ebx+0Ch], 1820h
cseg01:C00022B8			jmp	short loc_C00022C1
cseg01:C00022BA	; ---------------------------------------------------------------------------
cseg01:C00022BA
cseg01:C00022BA	loc_C00022BA:				; CODE XREF: sub_C00021C7+E8j
cseg01:C00022BA			mov	dword ptr [ebx+0Ch], 1010h
cseg01:C00022C1
cseg01:C00022C1	loc_C00022C1:				; CODE XREF: sub_C00021C7+96j
cseg01:C00022C1						; sub_C00021C7+B4j ...
cseg01:C00022C1			push	0
cseg01:C00022C3			push	60000000h
cseg01:C00022C8			push	0
cseg01:C00022CA			mov	eax, [esp+1Ch+var_10]
cseg01:C00022CE			push	eax
cseg01:C00022CF			mov	edx, ds:dword_C0001400
cseg01:C00022D5			push	edx
cseg01:C00022D6			call	sub_C00017FE
cseg01:C00022DB			add	esp, 14h
cseg01:C00022DE			add	esp, 4
cseg01:C00022E1			pop	edi
cseg01:C00022E2			pop	esi
cseg01:C00022E3			pop	ebx
cseg01:C00022E4			retn
cseg01:C00022E4	sub_C00021C7	endp
cseg01:C00022E4
cseg01:C00022E5
cseg01:C00022E5	; =============== S U B	R O U T	I N E =======================================
cseg01:C00022E5
cseg01:C00022E5
cseg01:C00022E5	sub_C00022E5	proc near		; CODE XREF: sub_C000037B+14Ep
cseg01:C00022E5						; sub_C0002353+12p
cseg01:C00022E5
cseg01:C00022E5	arg_0		= dword	ptr  4
cseg01:C00022E5	arg_4		= dword	ptr  8
cseg01:C00022E5	arg_8		= dword	ptr  0Ch
cseg01:C00022E5
cseg01:C00022E5			push	ebx
cseg01:C00022E6			push	esi
cseg01:C00022E7			mov	ebx, [esp+8+arg_8]
cseg01:C00022EB			cmp	ebx, 20h
cseg01:C00022EE			jz	short loc_C00022FA
cseg01:C00022F0			cmp	ebx, 10h
cseg01:C00022F3			jz	short loc_C00022FA
cseg01:C00022F5			cmp	ebx, 8
cseg01:C00022F8			jnz	short loc_C000234E
cseg01:C00022FA
cseg01:C00022FA	loc_C00022FA:				; CODE XREF: sub_C00022E5+9j
cseg01:C00022FA						; sub_C00022E5+Ej
cseg01:C00022FA			push	4
cseg01:C00022FC			call	sub_C0000C93
cseg01:C0002301			add	esp, 4
cseg01:C0002304			cmp	eax, [esp+8+arg_0]
cseg01:C0002308			jb	short loc_C000234E
cseg01:C000230A			push	5
cseg01:C000230C			call	sub_C0000C93
cseg01:C0002311			add	esp, 4
cseg01:C0002314			cmp	eax, [esp+8+arg_4]
cseg01:C0002318			jb	short loc_C000234E
cseg01:C000231A			push	ebx
cseg01:C000231B			mov	esi, [esp+0Ch+arg_0]
cseg01:C000231F			push	esi
cseg01:C0002320			call	sub_C0002189
cseg01:C0002325			add	esp, 8
cseg01:C0002328			mov	edx, [esp+8+arg_4]
cseg01:C000232C			imul	edx, eax
cseg01:C000232F			mov	eax, ds:dword_C00010B4
cseg01:C0002334			cmp	edx, [eax+28h]
cseg01:C0002337			jnb	short loc_C000234E
cseg01:C0002339			cmp	ebx, 20h
cseg01:C000233C			jz	short loc_C0002346
cseg01:C000233E			cmp	edx, 1000000h
cseg01:C0002344			ja	short loc_C000234E
cseg01:C0002346
cseg01:C0002346	loc_C0002346:				; CODE XREF: sub_C00022E5+57j
cseg01:C0002346			mov	eax, 1
cseg01:C000234B			pop	esi
cseg01:C000234C			pop	ebx
cseg01:C000234D			retn
cseg01:C000234E	; ---------------------------------------------------------------------------
cseg01:C000234E
cseg01:C000234E	loc_C000234E:				; CODE XREF: sub_C00022E5+13j
cseg01:C000234E						; sub_C00022E5+23j ...
cseg01:C000234E			xor	eax, eax
cseg01:C0002350			pop	esi
cseg01:C0002351			pop	ebx
cseg01:C0002352			retn
cseg01:C0002352	sub_C00022E5	endp
cseg01:C0002352
cseg01:C0002353
cseg01:C0002353	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002353
cseg01:C0002353
cseg01:C0002353	sub_C0002353	proc near		; CODE XREF: sub_C000037B+126p
cseg01:C0002353
cseg01:C0002353	arg_0		= dword	ptr  4
cseg01:C0002353	arg_4		= dword	ptr  8
cseg01:C0002353	arg_8		= dword	ptr  0Ch
cseg01:C0002353
cseg01:C0002353			push	ebx
cseg01:C0002354			push	esi
cseg01:C0002355			push	edi
cseg01:C0002356			mov	ebx, [esp+0Ch+arg_8]
cseg01:C000235A			push	ebx
cseg01:C000235B			mov	eax, [esp+10h+arg_4]
cseg01:C000235F			push	eax
cseg01:C0002360			mov	edx, [esp+14h+arg_0]
cseg01:C0002364			push	edx
cseg01:C0002365			call	sub_C00022E5
cseg01:C000236A			add	esp, 0Ch
cseg01:C000236D			test	eax, eax
cseg01:C000236F			jz	loc_C000244A
cseg01:C0002375			call	sub_C0000D7D
cseg01:C000237A			call	sub_C00020E0
cseg01:C000237F			push	ebx
cseg01:C0002380			mov	ecx, [esp+10h+arg_4]
cseg01:C0002384			push	ecx
cseg01:C0002385			mov	esi, [esp+14h+arg_0]
cseg01:C0002389			push	esi
cseg01:C000238A			call	sub_C0000C25
cseg01:C000238F			add	esp, 0Ch
cseg01:C0002392			call	sub_C0000D7D
cseg01:C0002397			call	sub_C0002151
cseg01:C000239C			call	sub_C000213B
cseg01:C00023A1			test	eax, eax
cseg01:C00023A3			jz	short loc_C00023B9
cseg01:C00023A5			push	ebx
cseg01:C00023A6			mov	edi, [esp+10h+arg_4]
cseg01:C00023AA			push	edi
cseg01:C00023AB			push	esi
cseg01:C00023AC			call	sub_C00021C7
cseg01:C00023B1			add	esp, 0Ch
cseg01:C00023B4			call	sub_C0000D7D
cseg01:C00023B9
cseg01:C00023B9	loc_C00023B9:				; CODE XREF: sub_C0002353+50j
cseg01:C00023B9			call	sub_C00025C1
cseg01:C00023BE			cmp	ebx, 20h
cseg01:C00023C1			jnz	short loc_C00023C7
cseg01:C00023C3			push	0
cseg01:C00023C5			jmp	short loc_C00023C9
cseg01:C00023C7	; ---------------------------------------------------------------------------
cseg01:C00023C7
cseg01:C00023C7	loc_C00023C7:				; CODE XREF: sub_C0002353+6Ej
cseg01:C00023C7			push	1
cseg01:C00023C9
cseg01:C00023C9	loc_C00023C9:				; CODE XREF: sub_C0002353+72j
cseg01:C00023C9			push	2Dh
cseg01:C00023CB			call	sub_C0000CD3
cseg01:C00023D0			add	esp, 8
cseg01:C00023D3			push	1
cseg01:C00023D5			push	1
cseg01:C00023D7			call	sub_C0000CD3
cseg01:C00023DC			add	esp, 8
cseg01:C00023DF			call	sub_C0000D7D
cseg01:C00023E4			push	2
cseg01:C00023E6			call	sub_C0000C93
cseg01:C00023EB			mov	edx, eax
cseg01:C00023ED			add	esp, 4
cseg01:C00023F0			mov	eax, ds:dword_C00010B4
cseg01:C00023F5			mov	[eax+8], edx
cseg01:C00023F8			push	3
cseg01:C00023FA			call	sub_C0000C93
cseg01:C00023FF			mov	edx, eax
cseg01:C0002401			add	esp, 4
cseg01:C0002404			mov	eax, ds:dword_C00010B4
cseg01:C0002409			mov	[eax+0Ch], edx
cseg01:C000240C			push	7
cseg01:C000240E			call	sub_C0000C93
cseg01:C0002413			add	esp, 4
cseg01:C0002416			mov	edx, ds:dword_C00010B4
cseg01:C000241C			mov	[edx+10h], eax
cseg01:C000241F			push	0Ch
cseg01:C0002421			call	sub_C0000C93
cseg01:C0002426			add	esp, 4
cseg01:C0002429			mov	edx, ds:dword_C00010B4
cseg01:C000242F			mov	[edx+14h], eax
cseg01:C0002432			mov	eax, edx
cseg01:C0002434			mov	edx, [edx+0Ch]
cseg01:C0002437			imul	edx, [eax+14h]
cseg01:C000243B			mov	[eax+1Ch], edx
cseg01:C000243E			mov	dword ptr [eax+18h], 0
cseg01:C0002445			mov	eax, 1
cseg01:C000244A
cseg01:C000244A	loc_C000244A:				; CODE XREF: sub_C0002353+1Cj
cseg01:C000244A			pop	edi
cseg01:C000244B			pop	esi
cseg01:C000244C			pop	ebx
cseg01:C000244D			retn
cseg01:C000244D	sub_C0002353	endp
cseg01:C000244D
cseg01:C000244E
cseg01:C000244E	; =============== S U B	R O U T	I N E =======================================
cseg01:C000244E
cseg01:C000244E
cseg01:C000244E	sub_C000244E	proc near		; CODE XREF: sub_C0002496:loc_C00024C2p
cseg01:C000244E
cseg01:C000244E	arg_0		= dword	ptr  4
cseg01:C000244E	arg_5		= byte ptr  9
cseg01:C000244E
cseg01:C000244E			cmp	[esp+arg_0], 26h
cseg01:C0002453			jnz	short loc_C0002491
cseg01:C0002455			test	byte ptr ds:dword_C000080C, 8
cseg01:C000245C			jz	short loc_C000246E
cseg01:C000245E
cseg01:C000245E	loc_C000245E:				; CODE XREF: sub_C000244E+27j
cseg01:C000245E			push	20h
cseg01:C0002460			call	sub_C0002496
cseg01:C0002465			add	esp, 4
cseg01:C0002468			and	eax, 0FFEFFFFFh
cseg01:C000246D			retn
cseg01:C000246E	; ---------------------------------------------------------------------------
cseg01:C000246E
cseg01:C000246E	loc_C000246E:				; CODE XREF: sub_C000244E+Ej
cseg01:C000246E			mov	ah, [esp+arg_5]
cseg01:C0002472			test	ah, 1
cseg01:C0002475			jnz	short loc_C000245E
cseg01:C0002477			test	ah, 8
cseg01:C000247A			jnz	short loc_C0002491
cseg01:C000247C			push	20h
cseg01:C000247E			call	sub_C0002496
cseg01:C0002483			add	esp, 4
cseg01:C0002486			and	eax, 0FFEFFFFFh
cseg01:C000248B			test	ah, 8
cseg01:C000248E			jz	short loc_C0002491
cseg01:C0002490			retn
cseg01:C0002491	; ---------------------------------------------------------------------------
cseg01:C0002491
cseg01:C0002491	loc_C0002491:				; CODE XREF: sub_C000244E+5j
cseg01:C0002491						; sub_C000244E+2Cj ...
cseg01:C0002491			mov	eax, [esp+8]
cseg01:C0002495			retn
cseg01:C0002495	sub_C000244E	endp
cseg01:C0002495
cseg01:C0002496
cseg01:C0002496	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002496
cseg01:C0002496
cseg01:C0002496	sub_C0002496	proc near		; CODE XREF: sub_C0001644+12p
cseg01:C0002496						; sub_C0001644+8Cp ...
cseg01:C0002496
cseg01:C0002496	arg_0		= dword	ptr  4
cseg01:C0002496
cseg01:C0002496			push	ebx
cseg01:C0002497			push	esi
cseg01:C0002498			push	edi
cseg01:C0002499			push	ebp
cseg01:C000249A			test	byte ptr ds:dword_C00007E0+3, 8
cseg01:C00024A1			jz	short loc_C00024CF
cseg01:C00024A3			mov	eax, [esp+10h+arg_0]
cseg01:C00024A7			push	eax
cseg01:C00024A8			push	34h
cseg01:C00024AA			call	sub_C0000CD3
cseg01:C00024AF			add	esp, 8
cseg01:C00024B2			push	34h
cseg01:C00024B4			call	sub_C0000C93
cseg01:C00024B9			add	esp, 4
cseg01:C00024BC			push	eax
cseg01:C00024BD			mov	edx, [esp+14h+arg_0]
cseg01:C00024C1			push	edx
cseg01:C00024C2
cseg01:C00024C2	loc_C00024C2:				; CODE XREF: sub_C0002496+75j
cseg01:C00024C2			call	sub_C000244E
cseg01:C00024C7			add	esp, 8
cseg01:C00024CA			pop	ebp
cseg01:C00024CB			pop	edi
cseg01:C00024CC			pop	esi
cseg01:C00024CD			pop	ebx
cseg01:C00024CE			retn
cseg01:C00024CF	; ---------------------------------------------------------------------------
cseg01:C00024CF
cseg01:C00024CF	loc_C00024CF:				; CODE XREF: sub_C0002496+Bj
cseg01:C00024CF			mov	ebx, ds:dword_C00007B4
cseg01:C00024D5			add	ebx, 80h
cseg01:C00024DB			mov	ebp, [esp+10h+arg_0]
cseg01:C00024DF
cseg01:C00024DF	loc_C00024DF:				; CODE XREF: sub_C0002496+81j
cseg01:C00024DF			mov	ecx, [ebx]
cseg01:C00024E1			test	ecx, ecx
cseg01:C00024E3			jz	short loc_C0002519
cseg01:C00024E5			cmp	dword ptr [ebx+4], 100h
cseg01:C00024EC			jnz	short loc_C0002510
cseg01:C00024EE			lea	esi, [ecx-2]
cseg01:C00024F1			shr	esi, 1
cseg01:C00024F3			lea	edi, [ebx+8]
cseg01:C00024F6			xor	edx, edx
cseg01:C00024F8
cseg01:C00024F8	loc_C00024F8:				; CODE XREF: sub_C0002496+78j
cseg01:C00024F8			cmp	edx, esi
cseg01:C00024FA			jnb	short loc_C0002510
cseg01:C00024FC			mov	eax, edx
cseg01:C00024FE			mov	ecx, [edi+eax*8]
cseg01:C0002501			mov	eax, [edi+eax*8+4]
cseg01:C0002505			cmp	ecx, ebp
cseg01:C0002507			jnz	short loc_C000250D
cseg01:C0002509			push	eax
cseg01:C000250A			push	ebp
cseg01:C000250B			jmp	short loc_C00024C2
cseg01:C000250D	; ---------------------------------------------------------------------------
cseg01:C000250D
cseg01:C000250D	loc_C000250D:				; CODE XREF: sub_C0002496+71j
cseg01:C000250D			inc	edx
cseg01:C000250E			jmp	short loc_C00024F8
cseg01:C0002510	; ---------------------------------------------------------------------------
cseg01:C0002510
cseg01:C0002510	loc_C0002510:				; CODE XREF: sub_C0002496+56j
cseg01:C0002510						; sub_C0002496+64j
cseg01:C0002510			mov	eax, [ebx]
cseg01:C0002512			shl	eax, 2
cseg01:C0002515			add	ebx, eax
cseg01:C0002517			jmp	short loc_C00024DF
cseg01:C0002519	; ---------------------------------------------------------------------------
cseg01:C0002519
cseg01:C0002519	loc_C0002519:				; CODE XREF: sub_C0002496+4Dj
cseg01:C0002519			xor	eax, eax
cseg01:C000251B
cseg01:C000251B	loc_C000251B:				; CODE XREF: sub_C0002574+14j
cseg01:C000251B			pop	ebp
cseg01:C000251C			pop	edi
cseg01:C000251D			pop	esi
cseg01:C000251E			pop	ebx
cseg01:C000251F			retn
cseg01:C000251F	sub_C0002496	endp
cseg01:C000251F
cseg01:C0002520
cseg01:C0002520	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002520
cseg01:C0002520
cseg01:C0002520	sub_C0002520	proc near		; CODE XREF: sub_C000055F+1E1p
cseg01:C0002520						; sub_C0002574+1Fp
cseg01:C0002520
cseg01:C0002520	arg_0		= dword	ptr  4
cseg01:C0002520	arg_4		= dword	ptr  8
cseg01:C0002520
cseg01:C0002520			mov	edx, [esp+arg_0]
cseg01:C0002524			mov	eax, [esp+arg_4]
cseg01:C0002528			cmp	edx, 3
cseg01:C000252B			jz	short loc_C000255D
cseg01:C000252D			cmp	edx, 2
cseg01:C0002530			jz	short loc_C0002548
cseg01:C0002532			cmp	edx, 1
cseg01:C0002535			jnz	short loc_C000256E
cseg01:C0002537			cmp	eax, 100h
cseg01:C000253C			jnb	short loc_C000256E
cseg01:C000253E			push	eax
cseg01:C000253F			call	sub_C0000C93
cseg01:C0002544			add	esp, 4
cseg01:C0002547
cseg01:C0002547	locret_C0002547:			; CODE XREF: sub_C00025A4+9j
cseg01:C0002547						; sub_C00025A4+Fj
cseg01:C0002547			retn
cseg01:C0002548	; ---------------------------------------------------------------------------
cseg01:C0002548
cseg01:C0002548	loc_C0002548:				; CODE XREF: sub_C0002520+10j
cseg01:C0002548			cmp	eax, 400h
cseg01:C000254D			jnb	short loc_C000256E
cseg01:C000254F			mov	edx, eax
cseg01:C0002551			shl	edx, 2
cseg01:C0002554			mov	eax, ds:dword_C00007B4
cseg01:C0002559			mov	eax, [edx+eax]
cseg01:C000255C			retn
cseg01:C000255D	; ---------------------------------------------------------------------------
cseg01:C000255D
cseg01:C000255D	loc_C000255D:				; CODE XREF: sub_C0002520+Bj
cseg01:C000255D			cmp	eax, 200h
cseg01:C0002562			jnb	short loc_C000256E
cseg01:C0002564			push	eax
cseg01:C0002565			call	sub_C0002496
cseg01:C000256A			add	esp, 4
cseg01:C000256D			retn
cseg01:C000256E	; ---------------------------------------------------------------------------
cseg01:C000256E
cseg01:C000256E	loc_C000256E:				; CODE XREF: sub_C0002520+15j
cseg01:C000256E						; sub_C0002520+1Cj ...
cseg01:C000256E			mov	eax, 0FFFFFFFFh
cseg01:C0002573			retn
cseg01:C0002573	sub_C0002520	endp
cseg01:C0002573
cseg01:C0002574
cseg01:C0002574	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002574
cseg01:C0002574
cseg01:C0002574	sub_C0002574	proc near		; CODE XREF: sub_C000055F+1FAp
cseg01:C0002574
cseg01:C0002574	arg_0		= dword	ptr  4
cseg01:C0002574	arg_4		= dword	ptr  8
cseg01:C0002574	arg_8		= dword	ptr  0Ch
cseg01:C0002574	arg_C		= dword	ptr  10h
cseg01:C0002574
cseg01:C0002574			push	ebx
cseg01:C0002575			push	esi
cseg01:C0002576			push	edi
cseg01:C0002577			push	ebp
cseg01:C0002578			mov	esi, [esp+10h+arg_4]
cseg01:C000257C			mov	edi, [esp+10h+arg_8]
cseg01:C0002580			mov	ebp, [esp+10h+arg_C]
cseg01:C0002584			xor	ebx, ebx
cseg01:C0002586
cseg01:C0002586	loc_C0002586:				; CODE XREF: sub_C0002574+2Ej
cseg01:C0002586			cmp	ebx, edi
cseg01:C0002588			jnb	short loc_C000251B
cseg01:C000258A			lea	eax, [esi+ebx]
cseg01:C000258D			push	eax
cseg01:C000258E			mov	eax, [esp+14h+arg_0]
cseg01:C0002592			push	eax
cseg01:C0002593			call	sub_C0002520
cseg01:C0002598			add	esp, 8
cseg01:C000259B			mov	edx, ebx
cseg01:C000259D			mov	[ebp+edx*4+0], eax
cseg01:C00025A1			inc	ebx
cseg01:C00025A2			jmp	short loc_C0002586
cseg01:C00025A2	sub_C0002574	endp
cseg01:C00025A2
cseg01:C00025A4
cseg01:C00025A4	; =============== S U B	R O U T	I N E =======================================
cseg01:C00025A4
cseg01:C00025A4
cseg01:C00025A4	sub_C00025A4	proc near		; CODE XREF: sub_C000037B:loc_C00004D0p
cseg01:C00025A4			mov	eax, ds:dword_C00010B4
cseg01:C00025A9			cmp	dword ptr [eax+8], 0
cseg01:C00025AD			jbe	short locret_C0002547
cseg01:C00025AF			cmp	dword ptr [eax+0Ch], 0
cseg01:C00025B3			jbe	short locret_C0002547
cseg01:C00025B5			push	1
cseg01:C00025B7			push	1
cseg01:C00025B9			call	sub_C0000CD3
cseg01:C00025BE			add	esp, 8
cseg01:C00025BE	sub_C00025A4	endp ; sp-analysis failed
cseg01:C00025BE
cseg01:C00025C1
cseg01:C00025C1	; =============== S U B	R O U T	I N E =======================================
cseg01:C00025C1
cseg01:C00025C1
cseg01:C00025C1	sub_C00025C1	proc near		; CODE XREF: sub_C0002353:loc_C00023B9p
cseg01:C00025C1			push	ebx
cseg01:C00025C2			cmp	ds:dword_C00013A4, 0
cseg01:C00025C9			jz	short loc_C000261E
cseg01:C00025CB			mov	ebx, ds:dword_C0001400
cseg01:C00025D1			push	4Ch
cseg01:C00025D3			push	0
cseg01:C00025D5			push	ebx
cseg01:C00025D6			call	sub_C00011BA
cseg01:C00025DB			add	esp, 0Ch
cseg01:C00025DE			mov	dword ptr [ebx+14h], 0Ch
cseg01:C00025E5			mov	dword ptr [ebx+40h], 1
cseg01:C00025EC			mov	dword ptr [ebx+44h], 1
cseg01:C00025F3			mov	dword ptr [ebx+48h], 0
cseg01:C00025FA			push	0
cseg01:C00025FC			push	0C0000000h
cseg01:C0002601			push	0
cseg01:C0002603			push	4Ch
cseg01:C0002605			mov	edx, ds:dword_C0001400
cseg01:C000260B			push	edx
cseg01:C000260C			call	sub_C00017FE
cseg01:C0002611			add	esp, 14h
cseg01:C0002614			mov	ds:dword_C00013A8, 1
cseg01:C000261E
cseg01:C000261E	loc_C000261E:				; CODE XREF: sub_C00025C1+8j
cseg01:C000261E			pop	ebx
cseg01:C000261F			retn
cseg01:C000261F	sub_C00025C1	endp
cseg01:C000261F
cseg01:C0002620
cseg01:C0002620	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002620
cseg01:C0002620
cseg01:C0002620	sub_C0002620	proc near		; CODE XREF: sub_C000037B:loc_C00004D7p
cseg01:C0002620						; sub_C0000795+Dp
cseg01:C0002620
cseg01:C0002620	; FUNCTION CHUNK AT cseg01:C0000C1F SIZE 00000006 BYTES
cseg01:C0002620
cseg01:C0002620			call	sub_C00020E0
cseg01:C0002625			jmp	loc_C0000C1F
cseg01:C0002625	sub_C0002620	endp
cseg01:C0002625
cseg01:C000262A
cseg01:C000262A	; =============== S U B	R O U T	I N E =======================================
cseg01:C000262A
cseg01:C000262A
cseg01:C000262A	sub_C000262A	proc near		; CODE XREF: sub_C000037B:loc_C000048Fp
cseg01:C000262A						; sub_C000055F:loc_C00006BEp ...
cseg01:C000262A			mov	eax, ds:dword_C00013AC
cseg01:C000262F			retn
cseg01:C000262F	sub_C000262A	endp
cseg01:C000262F
cseg01:C0002630
cseg01:C0002630	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002630
cseg01:C0002630
cseg01:C0002630	sub_C0002630	proc near		; CODE XREF: sub_C000037B+D1p
cseg01:C0002630						; sub_C000055F+123p ...
cseg01:C0002630
cseg01:C0002630	var_14		= dword	ptr -14h
cseg01:C0002630
cseg01:C0002630			push	ebx
cseg01:C0002631			push	esi
cseg01:C0002632			push	edi
cseg01:C0002633			push	ebp
cseg01:C0002634			sub	esp, 4
cseg01:C0002637			mov	eax, ds:dword_C00010B4
cseg01:C000263C			cmp	dword ptr [eax+10h], 20h
cseg01:C0002640			jnz	short loc_C00026A1
cseg01:C0002642			xor	ecx, ecx
cseg01:C0002644			mov	[esp+14h+var_14], ecx
cseg01:C0002647			push	10h
cseg01:C0002649			push	1
cseg01:C000264B			lea	eax, [esp+1Ch+var_14]
cseg01:C000264F			push	eax
cseg01:C0002650			mov	ebx, ds:dword_C0001400
cseg01:C0002656			push	ebx
cseg01:C0002657			call	sub_C000219E
cseg01:C000265C			add	esp, 10h
cseg01:C000265F			mov	dword ptr [eax], 0
cseg01:C0002665			mov	dword ptr [eax+4], 0
cseg01:C000266C			mov	edx, ds:dword_C00010B4
cseg01:C0002672			mov	edx, [edx+8]
cseg01:C0002675			mov	[eax+8], edx
cseg01:C0002678			mov	edx, ds:dword_C00010B4
cseg01:C000267E			mov	edx, [edx+0Ch]
cseg01:C0002681			mov	[eax+0Ch], edx
cseg01:C0002684			push	0
cseg01:C0002686			push	60000000h
cseg01:C000268B			push	0
cseg01:C000268D			mov	esi, [esp+20h+var_14]
cseg01:C0002691			push	esi
cseg01:C0002692			mov	edi, ds:dword_C0001400
cseg01:C0002698			push	edi
cseg01:C0002699			call	sub_C00017FE
cseg01:C000269E			add	esp, 14h
cseg01:C00026A1
cseg01:C00026A1	loc_C00026A1:				; CODE XREF: sub_C0002630+10j
cseg01:C00026A1			mov	ebp, ds:dword_C00010B8
cseg01:C00026A7			push	ebp
cseg01:C00026A8			call	sub_C000133D
cseg01:C00026AD			add	esp, 4
cseg01:C00026B0			add	esp, 4
cseg01:C00026B3			pop	ebp
cseg01:C00026B4			pop	edi
cseg01:C00026B5			pop	esi
cseg01:C00026B6			pop	ebx
cseg01:C00026B7			retn
cseg01:C00026B7	sub_C0002630	endp
cseg01:C00026B7
cseg01:C00026B8
cseg01:C00026B8	; =============== S U B	R O U T	I N E =======================================
cseg01:C00026B8
cseg01:C00026B8
cseg01:C00026B8	sub_C00026B8	proc near		; CODE XREF: sub_C000037B+F7p
cseg01:C00026B8						; sub_C000055F+14Dp
cseg01:C00026B8
cseg01:C00026B8	arg_0		= byte ptr  4
cseg01:C00026B8	arg_4		= dword	ptr  8
cseg01:C00026B8
cseg01:C00026B8			push	ebx
cseg01:C00026B9			movzx	ebx, [esp+4+arg_0]
cseg01:C00026BE			lea	ebx, [ebx+ebx*2+400h]
cseg01:C00026C5			mov	eax, [esp+4+arg_4]
cseg01:C00026C9			shr	eax, 10h
cseg01:C00026CC			and	eax, 0FFh
cseg01:C00026D1			push	eax
cseg01:C00026D2			push	ebx
cseg01:C00026D3			call	sub_C0000CD3
cseg01:C00026D8			add	esp, 8
cseg01:C00026DB			mov	eax, [esp+4+arg_4]
cseg01:C00026DF			shr	eax, 8
cseg01:C00026E2			and	eax, 0FFh
cseg01:C00026E7			push	eax
cseg01:C00026E8			lea	eax, [ebx+1]
cseg01:C00026EB			push	eax
cseg01:C00026EC			call	sub_C0000CD3
cseg01:C00026F1			add	esp, 8
cseg01:C00026F4			mov	eax, [esp+4+arg_4]
cseg01:C00026F8			and	eax, 0FFh
cseg01:C00026FD			push	eax
cseg01:C00026FE			add	ebx, 2
cseg01:C0002701			push	ebx
cseg01:C0002702			call	sub_C0000CD3
cseg01:C0002707			add	esp, 8
cseg01:C000270A			pop	ebx
cseg01:C000270B			retn
cseg01:C000270B	sub_C00026B8	endp
cseg01:C000270B
cseg01:C000270C
cseg01:C000270C	; =============== S U B	R O U T	I N E =======================================
cseg01:C000270C
cseg01:C000270C
cseg01:C000270C	sub_C000270C	proc near		; CODE XREF: sub_C000037B+108p
cseg01:C000270C						; sub_C000055F+158p
cseg01:C000270C
cseg01:C000270C	arg_0		= byte ptr  4
cseg01:C000270C
cseg01:C000270C			push	ebx
cseg01:C000270D			push	esi
cseg01:C000270E			movzx	eax, [esp+8+arg_0]
cseg01:C0002713			lea	eax, [eax+eax*2]
cseg01:C0002716			lea	ebx, [eax+400h]
cseg01:C000271C			push	ebx
cseg01:C000271D			call	sub_C0000C93
cseg01:C0002722			add	esp, 4
cseg01:C0002725			mov	esi, eax
cseg01:C0002727			and	esi, 0FFh
cseg01:C000272D			shl	esi, 10h
cseg01:C0002730			lea	eax, [ebx+1]
cseg01:C0002733			push	eax
cseg01:C0002734			call	sub_C0000C93
cseg01:C0002739			add	esp, 4
cseg01:C000273C			and	eax, 0FFh
cseg01:C0002741			shl	eax, 8
cseg01:C0002744			or	esi, eax
cseg01:C0002746			add	ebx, 2
cseg01:C0002749			push	ebx
cseg01:C000274A			call	sub_C0000C93
cseg01:C000274F			add	esp, 4
cseg01:C0002752			and	eax, 0FFh
cseg01:C0002757			or	eax, esi
cseg01:C0002759			pop	esi
cseg01:C000275A			pop	ebx
cseg01:C000275B			retn
cseg01:C000275B	sub_C000270C	endp
cseg01:C000275B
cseg01:C000275B	; ---------------------------------------------------------------------------
cseg01:C000275C	dword_C000275C	dd 2 dup(0)		; DATA XREF: sub_C00027CF+7w
cseg01:C000275C						; sub_C00027CF+Dr ...
cseg01:C0002764
cseg01:C0002764	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002764
cseg01:C0002764
cseg01:C0002764	sub_C0002764	proc near		; CODE XREF: sub_C00004F5+1p
cseg01:C0002764
cseg01:C0002764	arg_0		= dword	ptr  4
cseg01:C0002764
cseg01:C0002764			mov	eax, [esp+arg_0]
cseg01:C0002768			and	byte ptr [eax+2Ch], 0FEh
cseg01:C000276C			retn	4
cseg01:C000276C	sub_C0002764	endp
cseg01:C000276C
cseg01:C000276F
cseg01:C000276F	; =============== S U B	R O U T	I N E =======================================
cseg01:C000276F
cseg01:C000276F
cseg01:C000276F	sub_C000276F	proc near		; CODE XREF: sub_C0000503+1p
cseg01:C000276F
cseg01:C000276F	arg_0		= dword	ptr  4
cseg01:C000276F
cseg01:C000276F			push	ebx
cseg01:C0002770			mov	ebx, [esp+4+arg_0]
cseg01:C0002774			call	sub_C000262A
cseg01:C0002779			test	eax, eax
cseg01:C000277B			jz	short loc_C000279A
cseg01:C000277D			movzx	eax, word ptr ds:dword_C0000808
cseg01:C0002784			shl	eax, 10h
cseg01:C0002787			test	eax, eax
cseg01:C0002789			jnz	short loc_C0002795
cseg01:C000278B			cmp	word ptr ds:dword_C0000808+2, 0
cseg01:C0002793			jz	short loc_C000279A
cseg01:C0002795
cseg01:C0002795	loc_C0002795:				; CODE XREF: sub_C000276F+1Aj
cseg01:C0002795			mov	eax, 1
cseg01:C000279A
cseg01:C000279A	loc_C000279A:				; CODE XREF: sub_C000276F+Cj
cseg01:C000279A						; sub_C000276F+24j
cseg01:C000279A			mov	[ebx+1Ch], eax
cseg01:C000279D			pop	ebx
cseg01:C000279E			retn	4
cseg01:C000279E	sub_C000276F	endp
cseg01:C000279E
cseg01:C00027A1
cseg01:C00027A1	; =============== S U B	R O U T	I N E =======================================
cseg01:C00027A1
cseg01:C00027A1
cseg01:C00027A1	sub_C00027A1	proc near		; CODE XREF: sub_C00004FC+1p
cseg01:C00027A1
cseg01:C00027A1	arg_0		= dword	ptr  4
cseg01:C00027A1
cseg01:C00027A1			push	ebx
cseg01:C00027A2			mov	ebx, [esp+4+arg_0]
cseg01:C00027A6			call	sub_C000262A
cseg01:C00027AB			test	eax, eax
cseg01:C00027AD			jz	short loc_C00027C4
cseg01:C00027AF			push	0Fh
cseg01:C00027B1			call	sub_C0000C93
cseg01:C00027B6			add	esp, 4
cseg01:C00027B9			mov	[ebx+18h], eax
cseg01:C00027BC			or	byte ptr [ebx+2Ch], 1
cseg01:C00027C0			pop	ebx
cseg01:C00027C1			retn	4
cseg01:C00027C4	; ---------------------------------------------------------------------------
cseg01:C00027C4
cseg01:C00027C4	loc_C00027C4:				; CODE XREF: sub_C00027A1+Cj
cseg01:C00027C4			mov	[ebx+18h], eax
cseg01:C00027C7			and	byte ptr [ebx+2Ch], 0FEh
cseg01:C00027CB			pop	ebx
cseg01:C00027CC			retn	4
cseg01:C00027CC	sub_C00027A1	endp
cseg01:C00027CC
cseg01:C00027CF
cseg01:C00027CF	; =============== S U B	R O U T	I N E =======================================
cseg01:C00027CF
cseg01:C00027CF
cseg01:C00027CF	sub_C00027CF	proc near		; CODE XREF: cseg01:C000282Dp
cseg01:C00027CF						; cseg01:C000283Ap
cseg01:C00027CF
cseg01:C00027CF	arg_0		= dword	ptr  4
cseg01:C00027CF
cseg01:C00027CF			push	ebx
cseg01:C00027D0			push	esi
cseg01:C00027D1			push	edi
cseg01:C00027D2			mov	eax, [esp+0Ch+arg_0]
cseg01:C00027D6			mov	ds:dword_C000275C, eax
cseg01:C00027DB			push	edx
cseg01:C00027DC			mov	edx, ds:dword_C000275C
cseg01:C00027E2			VMMCall	Enable_Global_Trapping
cseg01:C00027E8			pop	edx
cseg01:C00027E9			pop	edi
cseg01:C00027EA			pop	esi
cseg01:C00027EB			pop	ebx
cseg01:C00027EC			retn
cseg01:C00027EC	sub_C00027CF	endp
cseg01:C00027EC
cseg01:C00027ED
cseg01:C00027ED	; =============== S U B	R O U T	I N E =======================================
cseg01:C00027ED
cseg01:C00027ED
cseg01:C00027ED	sub_C00027ED	proc near		; CODE XREF: cseg01:C0002810p
cseg01:C00027ED						; cseg01:C000281Dp
cseg01:C00027ED
cseg01:C00027ED	arg_0		= dword	ptr  4
cseg01:C00027ED
cseg01:C00027ED			push	ebx
cseg01:C00027EE			push	esi
cseg01:C00027EF			push	edi
cseg01:C00027F0			mov	eax, [esp+0Ch+arg_0]
cseg01:C00027F4			mov	ds:dword_C000275C+4, eax
cseg01:C00027F9			push	edx
cseg01:C00027FA			mov	edx, ds:dword_C000275C+4
cseg01:C0002800			VMMCall	Disable_Global_Trapping
cseg01:C0002806			pop	edx
cseg01:C0002807			pop	edi
cseg01:C0002808			pop	esi
cseg01:C0002809			pop	ebx
cseg01:C000280A			retn
cseg01:C000280A	sub_C00027ED	endp
cseg01:C000280A
cseg01:C000280B	; ---------------------------------------------------------------------------
cseg01:C000280B			push	1CEh
cseg01:C0002810			call	sub_C00027ED
cseg01:C0002815			add	esp, 4
cseg01:C0002818			push	1CFh
cseg01:C000281D			call	sub_C00027ED
cseg01:C0002822
cseg01:C0002822	loc_C0002822:				; CODE XREF: cseg01:C000283Fj
cseg01:C0002822			add	esp, 4
cseg01:C0002825			retn	4
cseg01:C0002828	; ---------------------------------------------------------------------------
cseg01:C0002828			push	1CEh
cseg01:C000282D			call	sub_C00027CF
cseg01:C0002832			add	esp, 4
cseg01:C0002835			push	1CFh
cseg01:C000283A			call	sub_C00027CF
cseg01:C000283F			jmp	short loc_C0002822
cseg01:C0002841
cseg01:C0002841	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002841
cseg01:C0002841
cseg01:C0002841	sub_C0002841	proc near		; CODE XREF: sub_C00028B5+9p
cseg01:C0002841			push	0
cseg01:C0002843			push	2F9h
cseg01:C0002848			call	sub_C0000006
cseg01:C000284D			add	esp, 8
cseg01:C0002850			push	80h
cseg01:C0002855			push	2FBh
cseg01:C000285A			call	sub_C0000006
cseg01:C000285F			add	esp, 8
cseg01:C0002862			push	12h
cseg01:C0002864			push	2F8h
cseg01:C0002869			call	sub_C0000006
cseg01:C000286E			add	esp, 8
cseg01:C0002871			push	0
cseg01:C0002873			push	2F9h
cseg01:C0002878			call	sub_C0000006
cseg01:C000287D			add	esp, 8
cseg01:C0002880			push	3
cseg01:C0002882			push	2FBh
cseg01:C0002887			call	sub_C0000006
cseg01:C000288C			add	esp, 8
cseg01:C000288F			push	0C7h
cseg01:C0002894			push	2FAh
cseg01:C0002899
cseg01:C0002899	loc_C0002899:				; CODE XREF: sub_C00028B5+2Cj
cseg01:C0002899			call	sub_C0000006
cseg01:C000289E			add	esp, 8
cseg01:C00028A1			retn
cseg01:C00028A1	sub_C0002841	endp
cseg01:C00028A1
cseg01:C00028A2
cseg01:C00028A2	; =============== S U B	R O U T	I N E =======================================
cseg01:C00028A2
cseg01:C00028A2
cseg01:C00028A2	sub_C00028A2	proc near		; CODE XREF: sub_C00028B5:loc_C00028CDp
cseg01:C00028A2			push	2FDh
cseg01:C00028A7			call	sub_C0000000
cseg01:C00028AC			add	esp, 4
cseg01:C00028AF			and	al, 20h
cseg01:C00028B1			movzx	eax, al
cseg01:C00028B4			retn
cseg01:C00028B4	sub_C00028A2	endp
cseg01:C00028B4
cseg01:C00028B5
cseg01:C00028B5	; =============== S U B	R O U T	I N E =======================================
cseg01:C00028B5
cseg01:C00028B5
cseg01:C00028B5	sub_C00028B5	proc near		; CODE XREF: sub_C00028FA+37p
cseg01:C00028B5						; sub_C00028FA+48p ...
cseg01:C00028B5
cseg01:C00028B5	arg_0		= byte ptr  4
cseg01:C00028B5
cseg01:C00028B5			cmp	ds:dword_C0000044, 0
cseg01:C00028BC			jnz	short loc_C00028CD
cseg01:C00028BE			call	sub_C0002841
cseg01:C00028C3			mov	ds:dword_C0000044, 1
cseg01:C00028CD
cseg01:C00028CD	loc_C00028CD:				; CODE XREF: sub_C00028B5+7j
cseg01:C00028CD						; sub_C00028B5+1Fj
cseg01:C00028CD			call	sub_C00028A2
cseg01:C00028D2			test	eax, eax
cseg01:C00028D4			jz	short loc_C00028CD
cseg01:C00028D6			movzx	eax, [esp+arg_0]
cseg01:C00028DB			push	eax
cseg01:C00028DC			push	2F8h
cseg01:C00028E1			jmp	short loc_C0002899
cseg01:C00028E1	sub_C00028B5	endp
cseg01:C00028E1
cseg01:C00028E3
cseg01:C00028E3	; =============== S U B	R O U T	I N E =======================================
cseg01:C00028E3
cseg01:C00028E3
cseg01:C00028E3	sub_C00028E3	proc near		; CODE XREF: sub_C0002A03+189p
cseg01:C00028E3
cseg01:C00028E3	arg_0		= dword	ptr  4
cseg01:C00028E3
cseg01:C00028E3			mov	eax, [esp+arg_0]
cseg01:C00028E7			cmp	eax, 30h
cseg01:C00028EA			jl	short loc_C00028F7
cseg01:C00028EC			cmp	eax, 39h
cseg01:C00028EF			jg	short loc_C00028F7
cseg01:C00028F1			mov	eax, 1
cseg01:C00028F6			retn
cseg01:C00028F7	; ---------------------------------------------------------------------------
cseg01:C00028F7
cseg01:C00028F7	loc_C00028F7:				; CODE XREF: sub_C00028E3+7j
cseg01:C00028F7						; sub_C00028E3+Cj
cseg01:C00028F7			xor	eax, eax
cseg01:C00028F9			retn
cseg01:C00028F9	sub_C00028E3	endp
cseg01:C00028F9
cseg01:C00028FA
cseg01:C00028FA	; =============== S U B	R O U T	I N E =======================================
cseg01:C00028FA
cseg01:C00028FA
cseg01:C00028FA	sub_C00028FA	proc near		; CODE XREF: sub_C0002955+24p
cseg01:C00028FA						; sub_C0002A03+B8p
cseg01:C00028FA
cseg01:C00028FA	var_1C		= byte ptr -1Ch
cseg01:C00028FA	arg_0		= dword	ptr  4
cseg01:C00028FA	arg_4		= dword	ptr  8
cseg01:C00028FA
cseg01:C00028FA			push	ebx
cseg01:C00028FB			push	esi
cseg01:C00028FC			push	edi
cseg01:C00028FD			sub	esp, 10h
cseg01:C0002900			mov	esi, [esp+1Ch+arg_4]
cseg01:C0002904			xor	ebx, ebx
cseg01:C0002906			mov	ecx, [esp+1Ch+arg_0]
cseg01:C000290A			mov	edi, 0Ah
cseg01:C000290F
cseg01:C000290F	loc_C000290F:				; CODE XREF: sub_C00028FA+2Fj
cseg01:C000290F			xor	edx, edx
cseg01:C0002911			mov	eax, ecx
cseg01:C0002913			div	edi
cseg01:C0002915			mov	edx, eax
cseg01:C0002917			mov	ch, 0Ah
cseg01:C0002919			mul	ch
cseg01:C000291B			sub	cl, al
cseg01:C000291D			mov	al, cl
cseg01:C000291F			add	al, 30h
cseg01:C0002921			mov	[esp+ebx+1Ch+var_1C], al
cseg01:C0002924			mov	ecx, edx
cseg01:C0002926			inc	ebx
cseg01:C0002927			test	edx, edx
cseg01:C0002929			jnz	short loc_C000290F
cseg01:C000292B
cseg01:C000292B	loc_C000292B:				; CODE XREF: sub_C00028FA+40j
cseg01:C000292B			cmp	esi, ebx
cseg01:C000292D			jle	short loc_C000293C
cseg01:C000292F			push	20h
cseg01:C0002931			call	sub_C00028B5
cseg01:C0002936			add	esp, 4
cseg01:C0002939			dec	esi
cseg01:C000293A			jmp	short loc_C000292B
cseg01:C000293C	; ---------------------------------------------------------------------------
cseg01:C000293C
cseg01:C000293C	loc_C000293C:				; CODE XREF: sub_C00028FA+33j
cseg01:C000293C						; sub_C00028FA+52j
cseg01:C000293C			dec	ebx
cseg01:C000293D			movzx	edx, [esp+ebx+1Ch+var_1C]
cseg01:C0002941			push	edx
cseg01:C0002942			call	sub_C00028B5
cseg01:C0002947			add	esp, 4
cseg01:C000294A			test	ebx, ebx
cseg01:C000294C			jnz	short loc_C000293C
cseg01:C000294E			add	esp, 10h
cseg01:C0002951			pop	edi
cseg01:C0002952			pop	esi
cseg01:C0002953			pop	ebx
cseg01:C0002954			retn
cseg01:C0002954	sub_C00028FA	endp
cseg01:C0002954
cseg01:C0002955
cseg01:C0002955	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002955
cseg01:C0002955
cseg01:C0002955	sub_C0002955	proc near		; CODE XREF: sub_C0002A03+9Fp
cseg01:C0002955
cseg01:C0002955	arg_0		= dword	ptr  4
cseg01:C0002955	arg_4		= dword	ptr  8
cseg01:C0002955
cseg01:C0002955			push	ebx
cseg01:C0002956			mov	ebx, [esp+4+arg_4]
cseg01:C000295A			mov	eax, [esp+4+arg_0]
cseg01:C000295E			test	eax, eax
cseg01:C0002960			jge	short loc_C0002977
cseg01:C0002962			push	2Dh
cseg01:C0002964			call	sub_C00028B5
cseg01:C0002969			add	esp, 4
cseg01:C000296C			mov	eax, [esp+4+arg_0]
cseg01:C0002970			neg	eax
cseg01:C0002972			test	ebx, ebx
cseg01:C0002974			jle	short loc_C0002977
cseg01:C0002976			dec	ebx
cseg01:C0002977
cseg01:C0002977	loc_C0002977:				; CODE XREF: sub_C0002955+Bj
cseg01:C0002977						; sub_C0002955+1Fj
cseg01:C0002977			push	ebx
cseg01:C0002978			push	eax
cseg01:C0002979			call	sub_C00028FA
cseg01:C000297E			add	esp, 8
cseg01:C0002981			pop	ebx
cseg01:C0002982			retn
cseg01:C0002982	sub_C0002955	endp
cseg01:C0002982
cseg01:C0002983
cseg01:C0002983	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002983
cseg01:C0002983
cseg01:C0002983	sub_C0002983	proc near		; CODE XREF: sub_C0002A03+EDp
cseg01:C0002983						; sub_C0002A03+108p
cseg01:C0002983
cseg01:C0002983	var_10		= byte ptr -10h
cseg01:C0002983	arg_0		= dword	ptr  4
cseg01:C0002983	arg_4		= dword	ptr  8
cseg01:C0002983	arg_8		= byte ptr  0Ch
cseg01:C0002983
cseg01:C0002983			push	ebx
cseg01:C0002984			push	esi
cseg01:C0002985			sub	esp, 8
cseg01:C0002988			mov	eax, [esp+10h+arg_0]
cseg01:C000298C			mov	esi, [esp+10h+arg_4]
cseg01:C0002990			xor	ebx, ebx
cseg01:C0002992
cseg01:C0002992	loc_C0002992:				; CODE XREF: sub_C0002983+33j
cseg01:C0002992			mov	edx, eax
cseg01:C0002994			and	edx, 0Fh
cseg01:C0002997			shr	eax, 4
cseg01:C000299A			cmp	edx, 9
cseg01:C000299D			jle	short loc_C00029A9
cseg01:C000299F			movzx	ecx, [esp+10h+arg_8]
cseg01:C00029A4			sub	ecx, 0Ah
cseg01:C00029A7			jmp	short loc_C00029AE
cseg01:C00029A9	; ---------------------------------------------------------------------------
cseg01:C00029A9
cseg01:C00029A9	loc_C00029A9:				; CODE XREF: sub_C0002983+1Aj
cseg01:C00029A9			mov	ecx, 30h
cseg01:C00029AE
cseg01:C00029AE	loc_C00029AE:				; CODE XREF: sub_C0002983+24j
cseg01:C00029AE			add	edx, ecx
cseg01:C00029B0			mov	[esp+ebx+10h+var_10], dl
cseg01:C00029B3			inc	ebx
cseg01:C00029B4			test	eax, eax
cseg01:C00029B6			jnz	short loc_C0002992
cseg01:C00029B8
cseg01:C00029B8	loc_C00029B8:				; CODE XREF: sub_C0002983+44j
cseg01:C00029B8			cmp	esi, ebx
cseg01:C00029BA			jle	short loc_C00029C9
cseg01:C00029BC			push	30h
cseg01:C00029BE			call	sub_C00028B5
cseg01:C00029C3			add	esp, 4
cseg01:C00029C6			dec	esi
cseg01:C00029C7			jmp	short loc_C00029B8
cseg01:C00029C9	; ---------------------------------------------------------------------------
cseg01:C00029C9
cseg01:C00029C9	loc_C00029C9:				; CODE XREF: sub_C0002983+37j
cseg01:C00029C9						; sub_C0002983+56j
cseg01:C00029C9			dec	ebx
cseg01:C00029CA			movzx	eax, [esp+ebx+10h+var_10]
cseg01:C00029CE			push	eax
cseg01:C00029CF			call	sub_C00028B5
cseg01:C00029D4			add	esp, 4
cseg01:C00029D7			test	ebx, ebx
cseg01:C00029D9			jnz	short loc_C00029C9
cseg01:C00029DB			add	esp, 8
cseg01:C00029DE
cseg01:C00029DE	loc_C00029DE:				; CODE XREF: sub_C00029E1+11j
cseg01:C00029DE			pop	esi
cseg01:C00029DF			pop	ebx
cseg01:C00029E0			retn
cseg01:C00029E0	sub_C0002983	endp
cseg01:C00029E0
cseg01:C00029E1
cseg01:C00029E1	; =============== S U B	R O U T	I N E =======================================
cseg01:C00029E1
cseg01:C00029E1
cseg01:C00029E1	sub_C00029E1	proc near		; CODE XREF: sub_C0002A03+121p
cseg01:C00029E1
cseg01:C00029E1	arg_0		= dword	ptr  4
cseg01:C00029E1	arg_4		= dword	ptr  8
cseg01:C00029E1
cseg01:C00029E1			push	ebx
cseg01:C00029E2			push	esi
cseg01:C00029E3			mov	esi, [esp+8+arg_4]
cseg01:C00029E7			mov	ebx, [esp+8+arg_0]
cseg01:C00029EB
cseg01:C00029EB	loc_C00029EB:				; CODE XREF: sub_C00029E1+20j
cseg01:C00029EB			mov	gs, esi
cseg01:C00029ED			mov	al, gs:[ebx]
cseg01:C00029F0			test	al, al
cseg01:C00029F2			jz	short loc_C00029DE
cseg01:C00029F4			movzx	eax, al
cseg01:C00029F7			push	eax
cseg01:C00029F8			inc	ebx
cseg01:C00029F9			call	sub_C00028B5
cseg01:C00029FE			add	esp, 4
cseg01:C0002A01			jmp	short loc_C00029EB
cseg01:C0002A01	sub_C00029E1	endp
cseg01:C0002A01
cseg01:C0002A03
cseg01:C0002A03	; =============== S U B	R O U T	I N E =======================================
cseg01:C0002A03
cseg01:C0002A03
cseg01:C0002A03	sub_C0002A03	proc near		; CODE XREF: sub_C000050A+5p
cseg01:C0002A03						; sub_C000055F+102p ...
cseg01:C0002A03
cseg01:C0002A03	var_18		= word ptr -18h
cseg01:C0002A03	var_14		= byte ptr -14h
cseg01:C0002A03	var_10		= byte ptr -10h
cseg01:C0002A03	arg_0		= dword	ptr  4
cseg01:C0002A03	arg_4		= byte ptr  8
cseg01:C0002A03
cseg01:C0002A03			push	ebx
cseg01:C0002A04			push	esi
cseg01:C0002A05			push	edi
cseg01:C0002A06			sub	esp, 0Ch
cseg01:C0002A09			lea	esi, [esp+18h+arg_4]
cseg01:C0002A0D			jmp	loc_C0002B63
cseg01:C0002A12	; ---------------------------------------------------------------------------
cseg01:C0002A12
cseg01:C0002A12	loc_C0002A12:				; CODE XREF: sub_C0002A03+193j
cseg01:C0002A12			mov	eax, [esp+18h+arg_0]
cseg01:C0002A16			mov	al, [eax]
cseg01:C0002A18			cmp	al, 6Ch
cseg01:C0002A1A			jz	short loc_C0002A20
cseg01:C0002A1C			cmp	al, 57h
cseg01:C0002A1E			jnz	short loc_C0002A31
cseg01:C0002A20
cseg01:C0002A20	loc_C0002A20:				; CODE XREF: sub_C0002A03+17j
cseg01:C0002A20			mov	eax, [esp+18h+arg_0]
cseg01:C0002A24			lea	edx, [eax+1]
cseg01:C0002A27			mov	[esp+18h+arg_0], edx
cseg01:C0002A2B			mov	al, [eax]
cseg01:C0002A2D			mov	[esp+18h+var_14], al
cseg01:C0002A31
cseg01:C0002A31	loc_C0002A31:				; CODE XREF: sub_C0002A03+1Bj
cseg01:C0002A31			mov	eax, [esp+18h+arg_0]
cseg01:C0002A35			mov	al, [eax]
cseg01:C0002A37			cmp	al, 70h
cseg01:C0002A39			jb	short loc_C0002A4B
cseg01:C0002A3B			jbe	short loc_C0002A5F
cseg01:C0002A3D			cmp	al, 78h
cseg01:C0002A3F			jz	short loc_C0002A5F
cseg01:C0002A41			cmp	al, 75h
cseg01:C0002A43			jz	short loc_C0002A5F
cseg01:C0002A45			cmp	al, 73h
cseg01:C0002A47			jz	short loc_C0002A5F
cseg01:C0002A49			jmp	short loc_C0002A70
cseg01:C0002A4B	; ---------------------------------------------------------------------------
cseg01:C0002A4B
cseg01:C0002A4B	loc_C0002A4B:				; CODE XREF: sub_C0002A03+36j
cseg01:C0002A4B			cmp	al, 58h
cseg01:C0002A4D			jb	short loc_C0002A5B
cseg01:C0002A4F			jbe	short loc_C0002A5F
cseg01:C0002A51			cmp	al, 63h
cseg01:C0002A53			jb	short loc_C0002A70
cseg01:C0002A55			cmp	al, 64h
cseg01:C0002A57			jbe	short loc_C0002A5F
cseg01:C0002A59			jmp	short loc_C0002A70
cseg01:C0002A5B	; ---------------------------------------------------------------------------
cseg01:C0002A5B
cseg01:C0002A5B	loc_C0002A5B:				; CODE XREF: sub_C0002A03+4Aj
cseg01:C0002A5B			cmp	al, 50h
cseg01:C0002A5D			jnz	short loc_C0002A70
cseg01:C0002A5F
cseg01:C0002A5F	loc_C0002A5F:				; CODE XREF: sub_C0002A03+38j
cseg01:C0002A5F						; sub_C0002A03+3Cj ...
cseg01:C0002A5F			mov	eax, [esp+18h+arg_0]
cseg01:C0002A63			lea	ecx, [eax+1]
cseg01:C0002A66			mov	[esp+18h+arg_0], ecx
cseg01:C0002A6A			mov	al, [eax]
cseg01:C0002A6C			mov	[esp+18h+var_10], al
cseg01:C0002A70
cseg01:C0002A70	loc_C0002A70:				; CODE XREF: sub_C0002A03+46j
cseg01:C0002A70						; sub_C0002A03+50j ...
cseg01:C0002A70			mov	ch, [esp+18h+var_10]
cseg01:C0002A74			test	ch, ch
cseg01:C0002A76			jz	loc_C0002B4C
cseg01:C0002A7C			add	esi, 4
cseg01:C0002A7F			mov	eax, [esi-4]
cseg01:C0002A82			mov	[esp+18h+var_18], ax
cseg01:C0002A86			cmp	ch, 63h
cseg01:C0002A89			jnz	short loc_C0002A94
cseg01:C0002A8B			movzx	eax, byte ptr [esp+18h+var_18]
cseg01:C0002A8F			jmp	loc_C0002B5A
cseg01:C0002A94	; ---------------------------------------------------------------------------
cseg01:C0002A94
cseg01:C0002A94	loc_C0002A94:				; CODE XREF: sub_C0002A03+86j
cseg01:C0002A94			cmp	ch, 64h
cseg01:C0002A97			jnz	short loc_C0002AAD
cseg01:C0002A99			cmp	[esp+18h+var_14], 6Ch
cseg01:C0002A9E			jnz	short loc_C0002AA9
cseg01:C0002AA0			push	ebx
cseg01:C0002AA1
cseg01:C0002AA1	loc_C0002AA1:				; CODE XREF: sub_C0002A03+A8j
cseg01:C0002AA1			push	eax
cseg01:C0002AA2			call	sub_C0002955
cseg01:C0002AA7			jmp	short loc_C0002AC0
cseg01:C0002AA9	; ---------------------------------------------------------------------------
cseg01:C0002AA9
cseg01:C0002AA9	loc_C0002AA9:				; CODE XREF: sub_C0002A03+9Bj
cseg01:C0002AA9			push	ebx
cseg01:C0002AAA			cwde
cseg01:C0002AAB			jmp	short loc_C0002AA1
cseg01:C0002AAD	; ---------------------------------------------------------------------------
cseg01:C0002AAD
cseg01:C0002AAD	loc_C0002AAD:				; CODE XREF: sub_C0002A03+94j
cseg01:C0002AAD			cmp	ch, 75h
cseg01:C0002AB0			jnz	short loc_C0002ACE
cseg01:C0002AB2			cmp	[esp+18h+var_14], 6Ch
cseg01:C0002AB7			jnz	short loc_C0002AC8
cseg01:C0002AB9			push	ebx
cseg01:C0002ABA
cseg01:C0002ABA	loc_C0002ABA:				; CODE XREF: sub_C0002A03+C9j
cseg01:C0002ABA			push	eax
cseg01:C0002ABB			call	sub_C00028FA
cseg01:C0002AC0
cseg01:C0002AC0	loc_C0002AC0:				; CODE XREF: sub_C0002A03+A4j
cseg01:C0002AC0						; sub_C0002A03+126j
cseg01:C0002AC0			add	esp, 8
cseg01:C0002AC3			jmp	loc_C0002B63
cseg01:C0002AC8	; ---------------------------------------------------------------------------
cseg01:C0002AC8
cseg01:C0002AC8	loc_C0002AC8:				; CODE XREF: sub_C0002A03+B4j
cseg01:C0002AC8			push	ebx
cseg01:C0002AC9			movzx	eax, ax
cseg01:C0002ACC			jmp	short loc_C0002ABA
cseg01:C0002ACE	; ---------------------------------------------------------------------------
cseg01:C0002ACE
cseg01:C0002ACE	loc_C0002ACE:				; CODE XREF: sub_C0002A03+ADj
cseg01:C0002ACE			cmp	ch, 70h
cseg01:C0002AD1			jz	short loc_C0002AD8
cseg01:C0002AD3			cmp	ch, 50h
cseg01:C0002AD6			jnz	short loc_C0002B1B
cseg01:C0002AD8
cseg01:C0002AD8	loc_C0002AD8:				; CODE XREF: sub_C0002A03+CEj
cseg01:C0002AD8			mov	dl, [esp+18h+var_10]
cseg01:C0002ADC			sub	dl, 0Fh
cseg01:C0002ADF			cmp	[esp+18h+var_14], 57h
cseg01:C0002AE4			jnz	short loc_C0002B15
cseg01:C0002AE6			movzx	ebx, dl
cseg01:C0002AE9			push	ebx
cseg01:C0002AEA			push	4
cseg01:C0002AEC			shr	eax, 10h
cseg01:C0002AEF			push	eax
cseg01:C0002AF0			call	sub_C0002983
cseg01:C0002AF5			add	esp, 0Ch
cseg01:C0002AF8			push	3Ah
cseg01:C0002AFA			call	sub_C00028B5
cseg01:C0002AFF			add	esp, 4
cseg01:C0002B02			push	ebx
cseg01:C0002B03
cseg01:C0002B03	loc_C0002B03:				; CODE XREF: sub_C0002A03+116j
cseg01:C0002B03			push	4
cseg01:C0002B05			movzx	eax, [esp+20h+var_18]
cseg01:C0002B0A
cseg01:C0002B0A	loc_C0002B0A:				; CODE XREF: sub_C0002A03+147j
cseg01:C0002B0A			push	eax
cseg01:C0002B0B			call	sub_C0002983
cseg01:C0002B10			add	esp, 0Ch
cseg01:C0002B13			jmp	short loc_C0002B63
cseg01:C0002B15	; ---------------------------------------------------------------------------
cseg01:C0002B15
cseg01:C0002B15	loc_C0002B15:				; CODE XREF: sub_C0002A03+E1j
cseg01:C0002B15			movzx	eax, dl
cseg01:C0002B18			push	eax
cseg01:C0002B19			jmp	short loc_C0002B03
cseg01:C0002B1B	; ---------------------------------------------------------------------------
cseg01:C0002B1B
cseg01:C0002B1B	loc_C0002B1B:				; CODE XREF: sub_C0002A03+D3j
cseg01:C0002B1B			cmp	ch, 73h
cseg01:C0002B1E			jnz	short loc_C0002B2B
cseg01:C0002B20			mov	edx, ds
cseg01:C0002B22			push	edx
cseg01:C0002B23			push	eax
cseg01:C0002B24			call	sub_C00029E1
cseg01:C0002B29			jmp	short loc_C0002AC0
cseg01:C0002B2B	; ---------------------------------------------------------------------------
cseg01:C0002B2B
cseg01:C0002B2B	loc_C0002B2B:				; CODE XREF: sub_C0002A03+11Bj
cseg01:C0002B2B			cmp	ch, 78h
cseg01:C0002B2E			jz	short loc_C0002B35
cseg01:C0002B30			cmp	ch, 58h
cseg01:C0002B33			jnz	short loc_C0002B63
cseg01:C0002B35
cseg01:C0002B35	loc_C0002B35:				; CODE XREF: sub_C0002A03+12Bj
cseg01:C0002B35			mov	dl, [esp+18h+var_10]
cseg01:C0002B39			sub	dl, 17h
cseg01:C0002B3C			test	ebx, ebx
cseg01:C0002B3E			jnz	short loc_C0002B45
cseg01:C0002B40			mov	ebx, 8
cseg01:C0002B45
cseg01:C0002B45	loc_C0002B45:				; CODE XREF: sub_C0002A03+13Bj
cseg01:C0002B45			movzx	edx, dl
cseg01:C0002B48			push	edx
cseg01:C0002B49			push	ebx
cseg01:C0002B4A			jmp	short loc_C0002B0A
cseg01:C0002B4C	; ---------------------------------------------------------------------------
cseg01:C0002B4C
cseg01:C0002B4C	loc_C0002B4C:				; CODE XREF: sub_C0002A03+73j
cseg01:C0002B4C			mov	eax, [esp+18h+arg_0]
cseg01:C0002B50			lea	ebx, [eax+1]
cseg01:C0002B53			mov	[esp+18h+arg_0], ebx
cseg01:C0002B57
cseg01:C0002B57	loc_C0002B57:				; CODE XREF: sub_C0002A03+1B5j
cseg01:C0002B57			movzx	eax, byte ptr [eax]
cseg01:C0002B5A
cseg01:C0002B5A	loc_C0002B5A:				; CODE XREF: sub_C0002A03+8Cj
cseg01:C0002B5A			push	eax
cseg01:C0002B5B			call	sub_C00028B5
cseg01:C0002B60			add	esp, 4
cseg01:C0002B63
cseg01:C0002B63	loc_C0002B63:				; CODE XREF: sub_C0002A03+Aj
cseg01:C0002B63						; sub_C0002A03+C0j ...
cseg01:C0002B63			mov	eax, [esp+18h+arg_0]
cseg01:C0002B67			cmp	byte ptr [eax],	0
cseg01:C0002B6A			jz	short loc_C0002BBA
cseg01:C0002B6C			lea	edx, [eax+1]
cseg01:C0002B6F			cmp	byte ptr [eax],	25h
cseg01:C0002B72			jnz	short loc_C0002BB4
cseg01:C0002B74			mov	[esp+18h+var_10], 0
cseg01:C0002B79			xor	ebx, ebx
cseg01:C0002B7B			mov	[esp+18h+var_14], 0
cseg01:C0002B80			mov	[esp+18h+arg_0], edx
cseg01:C0002B84
cseg01:C0002B84	loc_C0002B84:				; CODE XREF: sub_C0002A03+1AFj
cseg01:C0002B84			mov	eax, [esp+18h+arg_0]
cseg01:C0002B88			movzx	eax, byte ptr [eax]
cseg01:C0002B8B			push	eax
cseg01:C0002B8C			call	sub_C00028E3
cseg01:C0002B91			add	esp, 4
cseg01:C0002B94			test	eax, eax
cseg01:C0002B96			jz	loc_C0002A12
cseg01:C0002B9C			imul	ebx, 0Ah
cseg01:C0002B9F			mov	eax, [esp+18h+arg_0]
cseg01:C0002BA3			lea	edi, [eax+1]
cseg01:C0002BA6			mov	[esp+18h+arg_0], edi
cseg01:C0002BAA			movzx	eax, byte ptr [eax]
cseg01:C0002BAD			sub	eax, 30h
cseg01:C0002BB0			add	ebx, eax
cseg01:C0002BB2			jmp	short loc_C0002B84
cseg01:C0002BB4	; ---------------------------------------------------------------------------
cseg01:C0002BB4
cseg01:C0002BB4	loc_C0002BB4:				; CODE XREF: sub_C0002A03+16Fj
cseg01:C0002BB4			mov	[esp+18h+arg_0], edx
cseg01:C0002BB8			jmp	short loc_C0002B57
cseg01:C0002BBA	; ---------------------------------------------------------------------------
cseg01:C0002BBA
cseg01:C0002BBA	loc_C0002BBA:				; CODE XREF: sub_C0002A03+167j
cseg01:C0002BBA			add	esp, 0Ch
cseg01:C0002BBD			pop	edi
cseg01:C0002BBE			pop	esi
cseg01:C0002BBF			pop	ebx
cseg01:C0002BC0			retn
cseg01:C0002BC0	sub_C0002A03	endp
cseg01:C0002BC0
cseg01:C0002BC0	; ---------------------------------------------------------------------------
cseg01:C0002BC1			align 800h
cseg01:C0002BC1	cseg01		ends
cseg01:C0002BC1
cseg01:C0002BC1
cseg01:C0002BC1			end Control_0
